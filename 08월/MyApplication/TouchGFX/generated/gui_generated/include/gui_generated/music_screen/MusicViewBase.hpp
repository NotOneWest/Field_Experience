/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MUSICVIEWBASE_HPP
#define MUSICVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/music_screen/MusicPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TiledImage.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>
#include <touchgfx/containers/progress_indicators/BoxProgress.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/Slider.hpp>
extern "C"
{
	#include "../../../../../STM32CubeIDE/Drivers/BSP/STM32F7508-Discovery/stm32f7508_discovery_audio.h"
}

extern int audioPlay, volume;
#include "fatfs.h"
extern int file_index;
extern int backState, pos, volume;
extern int playTime, audioPlay, play;

class MusicViewBase : public touchgfx::View<MusicPresenter>
{
public:
    MusicViewBase();
    virtual ~MusicViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void btnNextClicked()
    {
        // Override and implement this function in Music
    }
    virtual void btnPrevClicked()
    {
        // Override and implement this function in Music
    }
    virtual void playMusic()
    {
        // Override and implement this function in Music
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::TiledImage background;
    touchgfx::MoveAnimator< touchgfx::Image > iconBox;
    touchgfx::Image icon;
    touchgfx::BoxProgress playBar;
    touchgfx::ToggleButton btnStopPlay;
    touchgfx::Button btnNext;
    touchgfx::Button btnPrev;
    touchgfx::TextAreaWithOneWildcard title;
    touchgfx::TextAreaWithTwoWildcards playtime;
    touchgfx::Slider verticalSlider;
    touchgfx::Button Home;
    touchgfx::Button btnList;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TITLE_SIZE = 30;
    touchgfx::Unicode::UnicodeChar titleBuffer[TITLE_SIZE];
    static const uint16_t PLAYTIMEBUFFER1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar playtimeBuffer1[PLAYTIMEBUFFER1_SIZE];
    static const uint16_t PLAYTIMEBUFFER2_SIZE = 10;
    touchgfx::Unicode::UnicodeChar playtimeBuffer2[PLAYTIMEBUFFER2_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MusicViewBase, const touchgfx::Slider&, int> sliderValueConfirmedCallback;
    touchgfx::Callback<MusicViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value);
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // MUSICVIEWBASE_HPP
