
F750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd78  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  0800bf48  0800bf48  0001bf48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c814  0800c814  00031ab8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c814  0800c814  0001c814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c81c  0800c81c  00031ab8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c81c  0800c81c  0001c81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c820  0800c820  0001c820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd4  200001ec  0800ca10  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011c0  0800ca10  000211c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031ab8  2**0
                  CONTENTS, READONLY
 12 ExtFlashSection 00001ab8  90000000  90000000  00030000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .comment      00000043  00000000  00000000  00031ae8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00042c39  00000000  00000000  00031b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000080d2  00000000  00000000  00074764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00017e3b  00000000  00000000  0007c836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000024a0  00000000  00000000  00094678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000023c2  00000000  00000000  00096b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00032015  00000000  00000000  00098eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00045093  00000000  00000000  000caeef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001203f0  00000000  00000000  0010ff82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000847c  00000000  00000000  00230374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000039  00000000  00000000  002387f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bf30 	.word	0x0800bf30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0800bf30 	.word	0x0800bf30

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <_write>:
unsigned short int *Camera = (unsigned short int *)0xC0040000;
#define putPixel(x,y,color) Buffer[x+y*480]=color
#define getCamera(x, y)		Camera[x+y*480]

int _write(int file, uint8_t *p, int len)
{	HAL_UART_Transmit(&huart1, p, len, 100);
 8000ee4:	b510      	push	{r4, lr}
 8000ee6:	4614      	mov	r4, r2
 8000ee8:	2364      	movs	r3, #100	; 0x64
 8000eea:	b292      	uxth	r2, r2
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <_write+0x14>)
 8000eee:	f007 fdea 	bl	8008ac6 <HAL_UART_Transmit>
   return len;
}
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	bd10      	pop	{r4, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200009b8 	.word	0x200009b8

08000efc <f750camera>:

extern I2C_HandleTypeDef hi2c1;

void f750camera(void){
 8000efc:	b508      	push	{r3, lr}
	HAL_TIM_Base_Start_IT(&htim2);
 8000efe:	4824      	ldr	r0, [pc, #144]	; (8000f90 <f750camera+0x94>)
 8000f00:	f007 f846 	bl	8007f90 <HAL_TIM_Base_Start_IT>
	int x=0;
	BSP_LED_Init(0);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f002 f8e9 	bl	80030dc <BSP_LED_Init>
	BSP_LCD_Init();
 8000f0a:	f002 fc0b 	bl	8003724 <BSP_LCD_Init>
	BSP_LCD_Init();
 8000f0e:	f002 fc09 	bl	8003724 <BSP_LCD_Init>
	BSP_LCD_LayerRgb565Init(0, LCD_FB_START_ADDRESS);
 8000f12:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000f16:	2000      	movs	r0, #0
 8000f18:	f002 facc 	bl	80034b4 <BSP_LCD_LayerRgb565Init>
	BSP_LCD_DisplayOn();
 8000f1c:	f002 fb36 	bl	800358c <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 8000f20:	2000      	movs	r0, #0
 8000f22:	f002 fb03 	bl	800352c <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(BLACK);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f002 fb12 	bl	8003550 <BSP_LCD_Clear>
    x=BSP_QSPI_Init ();
 8000f2c:	f002 fd68 	bl	8003a00 <BSP_QSPI_Init>
 8000f30:	4601      	mov	r1, r0
	printf("\n\rBSP_QSPI_Init = %d\n\r",x);
 8000f32:	4818      	ldr	r0, [pc, #96]	; (8000f94 <f750camera+0x98>)
 8000f34:	f008 fffa 	bl	8009f2c <iprintf>
	x= BSP_QSPI_EnableMemoryMappedMode();
 8000f38:	f002 fca8 	bl	800388c <BSP_QSPI_EnableMemoryMappedMode>
 8000f3c:	4601      	mov	r1, r0
	printf("\n\rEnableMemoryMapped = %d\n\r",x);
 8000f3e:	4816      	ldr	r0, [pc, #88]	; (8000f98 <f750camera+0x9c>)
 8000f40:	f008 fff4 	bl	8009f2c <iprintf>

	uint8_t res;
	res = ov5640_ReadID(0x78);
 8000f44:	2078      	movs	r0, #120	; 0x78
 8000f46:	f001 fdf9 	bl	8002b3c <ov5640_ReadID>
	printf("READ 0x78 : %d\r\n", res);
 8000f4a:	b2c1      	uxtb	r1, r0
 8000f4c:	4813      	ldr	r0, [pc, #76]	; (8000f9c <f750camera+0xa0>)
 8000f4e:	f008 ffed 	bl	8009f2c <iprintf>
	res = ov5640_ReadID(0x79);
 8000f52:	2079      	movs	r0, #121	; 0x79
 8000f54:	f001 fdf2 	bl	8002b3c <ov5640_ReadID>
	printf("READ 0x79 : %d\r\n", res);
 8000f58:	b2c1      	uxtb	r1, r0
 8000f5a:	4811      	ldr	r0, [pc, #68]	; (8000fa0 <f750camera+0xa4>)
 8000f5c:	f008 ffe6 	bl	8009f2c <iprintf>
	res = ov5640_ReadID(0x3c);
 8000f60:	203c      	movs	r0, #60	; 0x3c
 8000f62:	f001 fdeb 	bl	8002b3c <ov5640_ReadID>
	printf("READ 0x3C : %d\r\n", res);
 8000f66:	b2c1      	uxtb	r1, r0
 8000f68:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <f750camera+0xa8>)
 8000f6a:	f008 ffdf 	bl	8009f2c <iprintf>
	res = ov5640_ReadID(0x3d);
 8000f6e:	203d      	movs	r0, #61	; 0x3d
 8000f70:	f001 fde4 	bl	8002b3c <ov5640_ReadID>
	printf("READ 0x3D : %d\r\n", res);
 8000f74:	b2c1      	uxtb	r1, r0
 8000f76:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <f750camera+0xac>)
 8000f78:	f008 ffd8 	bl	8009f2c <iprintf>





	res = BSP_CAMERA_Init(CAMERA_R320x240);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f002 f9eb 	bl	8003358 <BSP_CAMERA_Init>
 8000f82:	4601      	mov	r1, r0
	printf("CAMERA INIT : %d\r\n", res);
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <f750camera+0xb0>)




}
 8000f86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printf("CAMERA INIT : %d\r\n", res);
 8000f8a:	f008 bfcf 	b.w	8009f2c <iprintf>
 8000f8e:	bf00      	nop
 8000f90:	20000888 	.word	0x20000888
 8000f94:	0800bf48 	.word	0x0800bf48
 8000f98:	0800bf5f 	.word	0x0800bf5f
 8000f9c:	0800bf7b 	.word	0x0800bf7b
 8000fa0:	0800bf8c 	.word	0x0800bf8c
 8000fa4:	0800bf9d 	.word	0x0800bf9d
 8000fa8:	0800bfae 	.word	0x0800bfae
 8000fac:	0800bfbf 	.word	0x0800bfbf

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b510      	push	{r4, lr}
 8000fb2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb4:	2230      	movs	r2, #48	; 0x30
 8000fb6:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb8:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	a808      	add	r0, sp, #32
 8000fbc:	f009 f8fc 	bl	800a1b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	2214      	movs	r2, #20
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	a803      	add	r0, sp, #12
 8000fc6:	f009 f8f7 	bl	800a1b8 <memset>
  HAL_PWR_EnableBkUpAccess();
 8000fca:	f004 fd23 	bl	8005a14 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <SystemClock_Config+0xa8>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fd0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fdc:	641a      	str	r2, [r3, #64]	; 0x40
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <SystemClock_Config+0xac>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000ff0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001000:	2309      	movs	r3, #9
 8001002:	e9cd 3208 	strd	r3, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001006:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001008:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100a:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 25;
 800100e:	2219      	movs	r2, #25
 8001010:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001014:	f44f 72c8 	mov.w	r2, #400	; 0x190
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001018:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f005 f85e 	bl	80060dc <HAL_RCC_OscConfig>
 8001020:	b108      	cbz	r0, 8001026 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001022:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	e7fe      	b.n	8001024 <SystemClock_Config+0x74>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001026:	f004 fcfd 	bl	8005a24 <HAL_PWREx_EnableOverDrive>
 800102a:	b108      	cbz	r0, 8001030 <SystemClock_Config+0x80>
 800102c:	b672      	cpsid	i
  while (1)
 800102e:	e7fe      	b.n	800102e <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001032:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001038:	2106      	movs	r1, #6
 800103a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001044:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001048:	f005 fa30 	bl	80064ac <HAL_RCC_ClockConfig>
 800104c:	b108      	cbz	r0, 8001052 <SystemClock_Config+0xa2>
 800104e:	b672      	cpsid	i
  while (1)
 8001050:	e7fe      	b.n	8001050 <SystemClock_Config+0xa0>
}
 8001052:	b014      	add	sp, #80	; 0x50
 8001054:	bd10      	pop	{r4, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40007000 	.word	0x40007000

08001060 <PeriphCommonClock_Config>:
{
 8001060:	b500      	push	{lr}
 8001062:	b0a3      	sub	sp, #140	; 0x8c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	2100      	movs	r1, #0
 8001068:	a802      	add	r0, sp, #8
 800106a:	f009 f8a5 	bl	800a1b8 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <PeriphCommonClock_Config+0x40>)
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001070:	2005      	movs	r0, #5
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001072:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001074:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001078:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800107a:	2302      	movs	r3, #2
 800107c:	e9cd 3007 	strd	r3, r0, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001080:	2303      	movs	r3, #3
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001082:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001084:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001086:	2301      	movs	r3, #1
 8001088:	930b      	str	r3, [sp, #44]	; 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800108a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800108e:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001090:	f005 fae8 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 8001094:	b108      	cbz	r0, 800109a <PeriphCommonClock_Config+0x3a>
 8001096:	b672      	cpsid	i
  while (1)
 8001098:	e7fe      	b.n	8001098 <PeriphCommonClock_Config+0x38>
}
 800109a:	b023      	add	sp, #140	; 0x8c
 800109c:	f85d fb04 	ldr.w	pc, [sp], #4
 80010a0:	00b00008 	.word	0x00b00008

080010a4 <main>:
{
 80010a4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80010a8:	b0a9      	sub	sp, #164	; 0xa4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010aa:	4dc0      	ldr	r5, [pc, #768]	; (80013ac <main+0x308>)
  HAL_Init();
 80010ac:	f002 ffc8 	bl	8004040 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b0:	2400      	movs	r4, #0
  SystemClock_Config();
 80010b2:	f7ff ff7d 	bl	8000fb0 <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b6:	f04f 0908 	mov.w	r9, #8
  PeriphCommonClock_Config();
 80010ba:	f7ff ffd1 	bl	8001060 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010be:	2214      	movs	r2, #20
 80010c0:	2100      	movs	r1, #0
 80010c2:	a81b      	add	r0, sp, #108	; 0x6c
 80010c4:	f009 f878 	bl	800a1b8 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2120      	movs	r1, #32
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ce:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010d2:	48b7      	ldr	r0, [pc, #732]	; (80013b0 <main+0x30c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d4:	f04f 0b03 	mov.w	fp, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2702      	movs	r7, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010da:	632b      	str	r3, [r5, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010dc:	f04f 080b 	mov.w	r8, #11
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80010e4:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80010f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f6:	632b      	str	r3, [r5, #48]	; 0x30
 80010f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80010fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010fe:	9303      	str	r3, [sp, #12]
 8001100:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	632b      	str	r3, [r5, #48]	; 0x30
 800110a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	9304      	str	r3, [sp, #16]
 8001112:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001114:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	632b      	str	r3, [r5, #48]	; 0x30
 800111c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	9305      	str	r3, [sp, #20]
 8001124:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	632b      	str	r3, [r5, #48]	; 0x30
 800112e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	9306      	str	r3, [sp, #24]
 8001136:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	632b      	str	r3, [r5, #48]	; 0x30
 8001140:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	9307      	str	r3, [sp, #28]
 8001148:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800114a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800114c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001150:	632b      	str	r3, [r5, #48]	; 0x30
 8001152:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001158:	9308      	str	r3, [sp, #32]
 800115a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800115c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800115e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001162:	632b      	str	r3, [r5, #48]	; 0x30
 8001164:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116a:	9309      	str	r3, [sp, #36]	; 0x24
 800116c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800116e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001170:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001174:	632b      	str	r3, [r5, #48]	; 0x30
 8001176:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117c:	930a      	str	r3, [sp, #40]	; 0x28
 800117e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001180:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001182:	f043 0320 	orr.w	r3, r3, #32
 8001186:	632b      	str	r3, [r5, #48]	; 0x30
 8001188:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800118a:	f003 0320 	and.w	r3, r3, #32
 800118e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001192:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001198:	632b      	str	r3, [r5, #48]	; 0x30
 800119a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800119c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a0:	930c      	str	r3, [sp, #48]	; 0x30
 80011a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011a4:	f003 ff28 	bl	8004ff8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	210c      	movs	r1, #12
 80011ac:	4881      	ldr	r0, [pc, #516]	; (80013b4 <main+0x310>)
 80011ae:	f003 ff23 	bl	8004ff8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	2108      	movs	r1, #8
 80011b6:	4880      	ldr	r0, [pc, #512]	; (80013b8 <main+0x314>)
 80011b8:	f003 ff1e 	bl	8004ff8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c2:	487c      	ldr	r0, [pc, #496]	; (80013b4 <main+0x310>)
 80011c4:	f003 ff18 	bl	8004ff8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ce:	487b      	ldr	r0, [pc, #492]	; (80013bc <main+0x318>)
 80011d0:	f003 ff12 	bl	8004ff8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	21c8      	movs	r1, #200	; 0xc8
 80011d8:	4879      	ldr	r0, [pc, #484]	; (80013c0 <main+0x31c>)
 80011da:	f003 ff0d 	bl	8004ff8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011de:	a91b      	add	r1, sp, #108	; 0x6c
 80011e0:	4878      	ldr	r0, [pc, #480]	; (80013c4 <main+0x320>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	e9cd 941b 	strd	r9, r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f003 fd7e 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011f0:	a91b      	add	r1, sp, #108	; 0x6c
 80011f2:	4873      	ldr	r0, [pc, #460]	; (80013c0 <main+0x31c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	e9cd 371b 	strd	r3, r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011fa:	e9cd b81e 	strd	fp, r8, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011fe:	f003 fd73 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001206:	a91b      	add	r1, sp, #108	; 0x6c
 8001208:	486f      	ldr	r0, [pc, #444]	; (80013c8 <main+0x324>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120c:	e9cd 341b 	strd	r3, r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001210:	f003 fd6a 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001214:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8001218:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800121a:	a91b      	add	r1, sp, #108	; 0x6c
 800121c:	4864      	ldr	r0, [pc, #400]	; (80013b0 <main+0x30c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001220:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001224:	f003 fd60 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001228:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	a91b      	add	r1, sp, #108	; 0x6c
 800122e:	4867      	ldr	r0, [pc, #412]	; (80013cc <main+0x328>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	e9cd 371b 	strd	r3, r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001234:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001236:	e9cd 4b1d 	strd	r4, fp, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800123a:	931f      	str	r3, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f003 fd54 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2120      	movs	r1, #32
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001242:	485b      	ldr	r0, [pc, #364]	; (80013b0 <main+0x30c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	e9cd 161b 	strd	r1, r6, [sp, #108]	; 0x6c
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001248:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800124e:	f003 fd4b 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001252:	f241 010c 	movw	r1, #4108	; 0x100c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001256:	4857      	ldr	r0, [pc, #348]	; (80013b4 <main+0x310>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	e9cd 161b 	strd	r1, r6, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800125c:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001262:	f003 fd41 	bl	8004ce8 <HAL_GPIO_Init>
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001266:	a91b      	add	r1, sp, #108	; 0x6c
 8001268:	4859      	ldr	r0, [pc, #356]	; (80013d0 <main+0x32c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126c:	e9cd a41b 	strd	sl, r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001270:	f003 fd3a 	bl	8004ce8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001274:	a91b      	add	r1, sp, #108	; 0x6c
 8001276:	4850      	ldr	r0, [pc, #320]	; (80013b8 <main+0x314>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	e9cd 961b 	strd	r9, r6, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001280:	f003 fd32 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001284:	2310      	movs	r3, #16
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001286:	a91b      	add	r1, sp, #108	; 0x6c
 8001288:	4849      	ldr	r0, [pc, #292]	; (80013b0 <main+0x30c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	e9cd 341b 	strd	r3, r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001290:	f003 fd2a 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001294:	f248 0104 	movw	r1, #32772	; 0x8004
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001298:	4848      	ldr	r0, [pc, #288]	; (80013bc <main+0x318>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129c:	e9cd 141b 	strd	r1, r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012a0:	a91b      	add	r1, sp, #108	; 0x6c
 80012a2:	f003 fd21 	bl	8004ce8 <HAL_GPIO_Init>
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80012a6:	a91b      	add	r1, sp, #108	; 0x6c
 80012a8:	4844      	ldr	r0, [pc, #272]	; (80013bc <main+0x318>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	e9cd a61b 	strd	sl, r6, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f003 fd19 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012b6:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80012ba:	a91b      	add	r1, sp, #108	; 0x6c
 80012bc:	483d      	ldr	r0, [pc, #244]	; (80013b4 <main+0x310>)
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80012be:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80012c2:	f04f 0a04 	mov.w	sl, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	e9cd 241c 	strd	r2, r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f003 fd0d 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80012ce:	22c8      	movs	r2, #200	; 0xc8
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012d0:	a91b      	add	r1, sp, #108	; 0x6c
 80012d2:	483b      	ldr	r0, [pc, #236]	; (80013c0 <main+0x31c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	e9cd 261b 	strd	r2, r6, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012dc:	f003 fd04 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012e0:	2232      	movs	r2, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e2:	a91b      	add	r1, sp, #108	; 0x6c
 80012e4:	483a      	ldr	r0, [pc, #232]	; (80013d0 <main+0x32c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e6:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	e9cd 271b 	strd	r2, r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	e9cd 4b1d 	strd	r4, fp, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f003 fcf9 	bl	8004ce8 <HAL_GPIO_Init>
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80012f6:	a91b      	add	r1, sp, #108	; 0x6c
 80012f8:	4831      	ldr	r0, [pc, #196]	; (80013c0 <main+0x31c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	e9cd a41b 	strd	sl, r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001300:	f003 fcf2 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001304:	2286      	movs	r2, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	a91b      	add	r1, sp, #108	; 0x6c
 8001308:	4830      	ldr	r0, [pc, #192]	; (80013cc <main+0x328>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800130a:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	e9cd 271b 	strd	r2, r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	e9cd 4b1d 	strd	r4, fp, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f003 fce7 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 800131a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800131e:	230a      	movs	r3, #10
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 8001320:	a91b      	add	r1, sp, #108	; 0x6c
 8001322:	482c      	ldr	r0, [pc, #176]	; (80013d4 <main+0x330>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001324:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	e9cd 271b 	strd	r2, r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	e9cd 4b1d 	strd	r4, fp, [sp, #116]	; 0x74
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 800132e:	f003 fcdb 	bl	8004ce8 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001332:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001334:	4622      	mov	r2, r4
 8001336:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001338:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800133c:	2011      	movs	r0, #17
  hltdc.Init.VerticalSync = 9;
 800133e:	f04f 0b28 	mov.w	fp, #40	; 0x28
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001342:	632b      	str	r3, [r5, #48]	; 0x30
 8001344:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800134e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001350:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001354:	632b      	str	r3, [r5, #48]	; 0x30
 8001356:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hltdc.Instance = LTDC;
 8001358:	4d1f      	ldr	r5, [pc, #124]	; (80013d8 <main+0x334>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800135a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001362:	f003 f801 	bl	8004368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001366:	2011      	movs	r0, #17
 8001368:	f003 f830 	bl	80043cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800136c:	4622      	mov	r2, r4
 800136e:	4621      	mov	r1, r4
 8001370:	203c      	movs	r0, #60	; 0x3c
 8001372:	f002 fff9 	bl	8004368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001376:	203c      	movs	r0, #60	; 0x3c
 8001378:	f003 f828 	bl	80043cc <HAL_NVIC_EnableIRQ>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800137c:	2234      	movs	r2, #52	; 0x34
 800137e:	4621      	mov	r1, r4
 8001380:	a81b      	add	r0, sp, #108	; 0x6c
 8001382:	f008 ff19 	bl	800a1b8 <memset>
  hltdc.Instance = LTDC;
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <main+0x338>)
  hltdc.Init.AccumulatedActiveH = 283;
 8001388:	f240 2215 	movw	r2, #533	; 0x215
  hltdc.Init.TotalHeigh = 285;
 800138c:	f240 2135 	movw	r1, #565	; 0x235
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001390:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8001392:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001394:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 8001396:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800139a:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 800139e:	2309      	movs	r3, #9
 80013a0:	e9c5 b305 	strd	fp, r3, [r5, #20]
  hltdc.Init.AccumulatedHBP = 53;
 80013a4:	2335      	movs	r3, #53	; 0x35
  hltdc.Init.AccumulatedVBP = 11;
 80013a6:	e9c5 3807 	strd	r3, r8, [r5, #28]
 80013aa:	e019      	b.n	80013e0 <main+0x33c>
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020c00 	.word	0x40020c00
 80013b4:	40022000 	.word	0x40022000
 80013b8:	40022800 	.word	0x40022800
 80013bc:	40021c00 	.word	0x40021c00
 80013c0:	40021800 	.word	0x40021800
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40022400 	.word	0x40022400
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020400 	.word	0x40020400
 80013d8:	2000046c 	.word	0x2000046c
 80013dc:	40016800 	.word	0x40016800
  hltdc.Init.AccumulatedActiveH = 283;
 80013e0:	f240 131b 	movw	r3, #283	; 0x11b
 80013e4:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 80013e8:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80013ec:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 80013f0:	e9c5 130b 	strd	r1, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013f4:	f004 fa12 	bl	800581c <HAL_LTDC_Init>
 80013f8:	4602      	mov	r2, r0
 80013fa:	b108      	cbz	r0, 8001400 <main+0x35c>
 80013fc:	b672      	cpsid	i
  while (1)
 80013fe:	e7fe      	b.n	80013fe <main+0x35a>
  pLayerCfg.WindowX1 = 480;
 8001400:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  pLayerCfg.Alpha = 255;
 8001404:	f04f 08ff 	mov.w	r8, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001408:	2407      	movs	r4, #7
  pLayerCfg.WindowX0 = 0;
 800140a:	901b      	str	r0, [sp, #108]	; 0x6c
  pLayerCfg.WindowY1 = 272;
 800140c:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.Backcolor.Blue = 0;
 8001410:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
  pLayerCfg.Backcolor.Red = 0;
 8001414:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
  pLayerCfg.ImageHeight = 272;
 8001418:	9326      	str	r3, [sp, #152]	; 0x98
  pLayerCfg.WindowY0 = 0;
 800141a:	e9cd 101c 	strd	r1, r0, [sp, #112]	; 0x70
  pLayerCfg.Alpha0 = 0;
 800141e:	e9cd 8020 	strd	r8, r0, [sp, #128]	; 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001422:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001426:	e9cd 0422 	strd	r0, r4, [sp, #136]	; 0x88
  pLayerCfg.FBStartAdress = 0xC0000000;
 800142a:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
  pLayerCfg.ImageWidth = 480;
 800142e:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001432:	a91b      	add	r1, sp, #108	; 0x6c
 8001434:	4628      	mov	r0, r5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001436:	e9cd 371e 	strd	r3, r7, [sp, #120]	; 0x78
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800143a:	f004 fabb 	bl	80059b4 <HAL_LTDC_ConfigLayer>
 800143e:	b108      	cbz	r0, 8001444 <main+0x3a0>
 8001440:	b672      	cpsid	i
  while (1)
 8001442:	e7fe      	b.n	8001442 <main+0x39e>
  hqspi.Instance = QUADSPI;
 8001444:	4ba9      	ldr	r3, [pc, #676]	; (80016ec <main+0x648>)
 8001446:	4aaa      	ldr	r2, [pc, #680]	; (80016f0 <main+0x64c>)
  hqspi.Init.FifoThreshold = 4;
 8001448:	f8c3 a008 	str.w	sl, [r3, #8]
  hqspi.Init.FlashSize = 24;
 800144c:	f04f 0a10 	mov.w	sl, #16
  hqspi.Init.ClockPrescaler = 1;
 8001450:	e9c3 2600 	strd	r2, r6, [r3]
  hqspi.Init.FlashSize = 24;
 8001454:	2218      	movs	r2, #24
 8001456:	e9c3 a203 	strd	sl, r2, [r3, #12]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800145a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800145e:	e9c3 0007 	strd	r0, r0, [r3, #28]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001462:	e9c3 2005 	strd	r2, r0, [r3, #20]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001466:	4618      	mov	r0, r3
 8001468:	f004 fbf6 	bl	8005c58 <HAL_QSPI_Init>
 800146c:	4605      	mov	r5, r0
 800146e:	b108      	cbz	r0, 8001474 <main+0x3d0>
 8001470:	b672      	cpsid	i
  while (1)
 8001472:	e7fe      	b.n	8001472 <main+0x3ce>
  RTC_TimeTypeDef sTime = {0};
 8001474:	4601      	mov	r1, r0
 8001476:	2214      	movs	r2, #20
 8001478:	a814      	add	r0, sp, #80	; 0x50
  hrtc.Instance = RTC;
 800147a:	f8df a2a0 	ldr.w	sl, [pc, #672]	; 800171c <main+0x678>
  RTC_TimeTypeDef sTime = {0};
 800147e:	f008 fe9b 	bl	800a1b8 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8001482:	465a      	mov	r2, fp
 8001484:	4629      	mov	r1, r5
 8001486:	a81b      	add	r0, sp, #108	; 0x6c
  RTC_DateTypeDef sDate = {0};
 8001488:	9510      	str	r5, [sp, #64]	; 0x40
  RTC_AlarmTypeDef sAlarm = {0};
 800148a:	f008 fe95 	bl	800a1b8 <memset>
  hrtc.Instance = RTC;
 800148e:	4b99      	ldr	r3, [pc, #612]	; (80016f4 <main+0x650>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001490:	4650      	mov	r0, sl
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001492:	f8ca 5018 	str.w	r5, [sl, #24]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001496:	e9ca 3500 	strd	r3, r5, [sl]
  hrtc.Init.AsynchPrediv = 127;
 800149a:	237f      	movs	r3, #127	; 0x7f
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800149c:	e9ca 5504 	strd	r5, r5, [sl, #16]
  hrtc.Init.SynchPrediv = 255;
 80014a0:	e9ca 3802 	strd	r3, r8, [sl, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014a4:	f005 fc1d 	bl	8006ce2 <HAL_RTC_Init>
 80014a8:	b108      	cbz	r0, 80014ae <main+0x40a>
 80014aa:	b672      	cpsid	i
  while (1)
 80014ac:	e7fe      	b.n	80014ac <main+0x408>
  sTime.Hours = 0x0;
 80014ae:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014b2:	4632      	mov	r2, r6
  sTime.Seconds = 0x0;
 80014b4:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014b8:	a914      	add	r1, sp, #80	; 0x50
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014ba:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014be:	4650      	mov	r0, sl
 80014c0:	f005 fc62 	bl	8006d88 <HAL_RTC_SetTime>
 80014c4:	b108      	cbz	r0, 80014ca <main+0x426>
 80014c6:	b672      	cpsid	i
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <main+0x424>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80014ca:	4b8b      	ldr	r3, [pc, #556]	; (80016f8 <main+0x654>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014cc:	4632      	mov	r2, r6
 80014ce:	a910      	add	r1, sp, #64	; 0x40
 80014d0:	4650      	mov	r0, sl
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80014d2:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014d4:	f005 fcb1 	bl	8006e3a <HAL_RTC_SetDate>
 80014d8:	b108      	cbz	r0, 80014de <main+0x43a>
 80014da:	b672      	cpsid	i
  while (1)
 80014dc:	e7fe      	b.n	80014dc <main+0x438>
  sAlarm.Alarm = RTC_ALARM_A;
 80014de:	f44f 7380 	mov.w	r3, #256	; 0x100
  sAlarm.AlarmTime.Hours = 0x0;
 80014e2:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
  sAlarm.AlarmTime.Seconds = 0x0;
 80014e6:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80014ea:	4632      	mov	r2, r6
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80014ec:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80014ee:	a91b      	add	r1, sp, #108	; 0x6c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80014f0:	9022      	str	r0, [sp, #136]	; 0x88
  sAlarm.AlarmDateWeekDay = 0x1;
 80014f2:	f88d 608c 	strb.w	r6, [sp, #140]	; 0x8c
  sAlarm.Alarm = RTC_ALARM_A;
 80014f6:	9324      	str	r3, [sp, #144]	; 0x90
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014f8:	e9cd 001e 	strd	r0, r0, [sp, #120]	; 0x78
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80014fc:	e9cd 0020 	strd	r0, r0, [sp, #128]	; 0x80
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001500:	4650      	mov	r0, sl
 8001502:	f005 fce3 	bl	8006ecc <HAL_RTC_SetAlarm>
 8001506:	b108      	cbz	r0, 800150c <main+0x468>
 8001508:	b672      	cpsid	i
  while (1)
 800150a:	e7fe      	b.n	800150a <main+0x466>
  sAlarm.Alarm = RTC_ALARM_B;
 800150c:	f44f 7500 	mov.w	r5, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001510:	a91b      	add	r1, sp, #108	; 0x6c
 8001512:	4632      	mov	r2, r6
 8001514:	4650      	mov	r0, sl
  sAlarm.Alarm = RTC_ALARM_B;
 8001516:	9524      	str	r5, [sp, #144]	; 0x90
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001518:	f005 fcd8 	bl	8006ecc <HAL_RTC_SetAlarm>
 800151c:	4601      	mov	r1, r0
 800151e:	b108      	cbz	r0, 8001524 <main+0x480>
 8001520:	b672      	cpsid	i
  while (1)
 8001522:	e7fe      	b.n	8001522 <main+0x47e>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001524:	463a      	mov	r2, r7
 8001526:	4650      	mov	r0, sl
 8001528:	f005 fd76 	bl	8007018 <HAL_RTCEx_SetTimeStamp>
 800152c:	b108      	cbz	r0, 8001532 <main+0x48e>
 800152e:	b672      	cpsid	i
  while (1)
 8001530:	e7fe      	b.n	8001530 <main+0x48c>
  hsd1.Instance = SDMMC1;
 8001532:	4b72      	ldr	r3, [pc, #456]	; (80016fc <main+0x658>)
 8001534:	4a72      	ldr	r2, [pc, #456]	; (8001700 <main+0x65c>)
  hsd1.Init.ClockDiv = 0;
 8001536:	6198      	str	r0, [r3, #24]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001538:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 8001720 <main+0x67c>
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800153c:	e9c3 2000 	strd	r2, r0, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001540:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001544:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001548:	e9c3 2004 	strd	r2, r0, [r3, #16]
  hspi2.Instance = SPI2;
 800154c:	4b6d      	ldr	r3, [pc, #436]	; (8001704 <main+0x660>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800154e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001552:	e9c3 e200 	strd	lr, r2, [r3]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001556:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800155a:	6098      	str	r0, [r3, #8]
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800155c:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001560:	e9c3 2003 	strd	r2, r0, [r3, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001564:	e9c3 0505 	strd	r0, r5, [r3, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001568:	e9c3 0007 	strd	r0, r0, [r3, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800156c:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001570:	e9c3 400b 	strd	r4, r0, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001574:	4618      	mov	r0, r3
 8001576:	f006 fbb9 	bl	8007cec <HAL_SPI_Init>
 800157a:	b108      	cbz	r0, 8001580 <main+0x4dc>
 800157c:	b672      	cpsid	i
  while (1)
 800157e:	e7fe      	b.n	800157e <main+0x4da>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	2500      	movs	r5, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001582:	2210      	movs	r2, #16
 8001584:	2100      	movs	r1, #0
 8001586:	a810      	add	r0, sp, #64	; 0x40
 8001588:	f008 fe16 	bl	800a1b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800158c:	221c      	movs	r2, #28
 800158e:	4629      	mov	r1, r5
 8001590:	a814      	add	r0, sp, #80	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001592:	950f      	str	r5, [sp, #60]	; 0x3c
  htim1.Instance = TIM1;
 8001594:	4c5c      	ldr	r4, [pc, #368]	; (8001708 <main+0x664>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001596:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 800159a:	f008 fe0d 	bl	800a1b8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800159e:	222c      	movs	r2, #44	; 0x2c
 80015a0:	4629      	mov	r1, r5
 80015a2:	a81b      	add	r0, sp, #108	; 0x6c
 80015a4:	f008 fe08 	bl	800a1b8 <memset>
  htim1.Instance = TIM1;
 80015a8:	4b58      	ldr	r3, [pc, #352]	; (800170c <main+0x668>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015aa:	4620      	mov	r0, r4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ac:	60a5      	str	r5, [r4, #8]
  htim1.Init.Prescaler = 0;
 80015ae:	e9c4 3500 	strd	r3, r5, [r4]
  htim1.Init.Period = 65535;
 80015b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b6:	e9c4 5505 	strd	r5, r5, [r4, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ba:	e9c4 3503 	strd	r3, r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015be:	f006 fe3f 	bl	8008240 <HAL_TIM_Base_Init>
 80015c2:	b108      	cbz	r0, 80015c8 <main+0x524>
 80015c4:	b672      	cpsid	i
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <main+0x522>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c8:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015cc:	a910      	add	r1, sp, #64	; 0x40
 80015ce:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d0:	9610      	str	r6, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015d2:	f006 ff55 	bl	8008480 <HAL_TIM_ConfigClockSource>
 80015d6:	b108      	cbz	r0, 80015dc <main+0x538>
 80015d8:	b672      	cpsid	i
  while (1)
 80015da:	e7fe      	b.n	80015da <main+0x536>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015dc:	4620      	mov	r0, r4
 80015de:	f006 fe5f 	bl	80082a0 <HAL_TIM_PWM_Init>
 80015e2:	b108      	cbz	r0, 80015e8 <main+0x544>
 80015e4:	b672      	cpsid	i
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <main+0x542>
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015e8:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ec:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ee:	a90d      	add	r1, sp, #52	; 0x34
 80015f0:	4620      	mov	r0, r4
 80015f2:	f006 ffdf 	bl	80085b4 <HAL_TIMEx_MasterConfigSynchronization>
 80015f6:	4602      	mov	r2, r0
 80015f8:	b108      	cbz	r0, 80015fe <main+0x55a>
 80015fa:	b672      	cpsid	i
  while (1)
 80015fc:	e7fe      	b.n	80015fc <main+0x558>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015fe:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001600:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001602:	a914      	add	r1, sp, #80	; 0x50
  sConfigOC.Pulse = 0;
 8001604:	e9cd 3014 	strd	r3, r0, [sp, #80]	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001608:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800160c:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001610:	4620      	mov	r0, r4
 8001612:	f006 fead 	bl	8008370 <HAL_TIM_PWM_ConfigChannel>
 8001616:	b108      	cbz	r0, 800161c <main+0x578>
 8001618:	b672      	cpsid	i
  while (1)
 800161a:	e7fe      	b.n	800161a <main+0x576>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800161c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001620:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001622:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001624:	a91b      	add	r1, sp, #108	; 0x6c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001626:	9025      	str	r0, [sp, #148]	; 0x94
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001628:	e9cd 3020 	strd	r3, r0, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800162c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001630:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001634:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001638:	e9cd 3023 	strd	r3, r0, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800163c:	4620      	mov	r0, r4
 800163e:	f007 f805 	bl	800864c <HAL_TIMEx_ConfigBreakDeadTime>
 8001642:	4605      	mov	r5, r0
 8001644:	b108      	cbz	r0, 800164a <main+0x5a6>
 8001646:	b672      	cpsid	i
  while (1)
 8001648:	e7fe      	b.n	8001648 <main+0x5a4>
  HAL_TIM_MspPostInit(&htim1);
 800164a:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 99;
 800164c:	2763      	movs	r7, #99	; 0x63
  HAL_TIM_MspPostInit(&htim1);
 800164e:	f000 ff5f 	bl	8002510 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	2210      	movs	r2, #16
 8001654:	4629      	mov	r1, r5
 8001656:	a81b      	add	r0, sp, #108	; 0x6c
 8001658:	f008 fdae 	bl	800a1b8 <memset>
  htim2.Instance = TIM2;
 800165c:	4c2c      	ldr	r4, [pc, #176]	; (8001710 <main+0x66c>)
  htim2.Init.Prescaler = 99;
 800165e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001662:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001664:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001666:	60a5      	str	r5, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001668:	61a5      	str	r5, [r4, #24]
  htim2.Init.Prescaler = 99;
 800166a:	e9c4 3700 	strd	r3, r7, [r4]
  htim2.Init.Period = 45000-1;
 800166e:	f64a 73c7 	movw	r3, #44999	; 0xafc7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001672:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001676:	e9c4 3503 	strd	r3, r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800167a:	f006 fde1 	bl	8008240 <HAL_TIM_Base_Init>
 800167e:	b108      	cbz	r0, 8001684 <main+0x5e0>
 8001680:	b672      	cpsid	i
  while (1)
 8001682:	e7fe      	b.n	8001682 <main+0x5de>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001684:	a91b      	add	r1, sp, #108	; 0x6c
 8001686:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001688:	961b      	str	r6, [sp, #108]	; 0x6c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800168a:	f006 fef9 	bl	8008480 <HAL_TIM_ConfigClockSource>
 800168e:	b108      	cbz	r0, 8001694 <main+0x5f0>
 8001690:	b672      	cpsid	i
  while (1)
 8001692:	e7fe      	b.n	8001692 <main+0x5ee>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001694:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001696:	a914      	add	r1, sp, #80	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001698:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800169a:	4620      	mov	r0, r4
 800169c:	f006 ff8a 	bl	80085b4 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4604      	mov	r4, r0
 80016a2:	b108      	cbz	r0, 80016a8 <main+0x604>
 80016a4:	b672      	cpsid	i
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <main+0x602>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a8:	4601      	mov	r1, r0
 80016aa:	2210      	movs	r2, #16
 80016ac:	a81b      	add	r0, sp, #108	; 0x6c
 80016ae:	f008 fd83 	bl	800a1b8 <memset>
  htim3.Instance = TIM3;
 80016b2:	4818      	ldr	r0, [pc, #96]	; (8001714 <main+0x670>)
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <main+0x674>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b6:	9416      	str	r4, [sp, #88]	; 0x58
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	6084      	str	r4, [r0, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ba:	6184      	str	r4, [r0, #24]
  htim3.Init.Prescaler = 99;
 80016bc:	e9c0 3700 	strd	r3, r7, [r0]
  htim3.Init.Period = 999;
 80016c0:	f240 33e7 	movw	r3, #999	; 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c8:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016cc:	f006 fdb8 	bl	8008240 <HAL_TIM_Base_Init>
 80016d0:	b108      	cbz	r0, 80016d6 <main+0x632>
 80016d2:	b672      	cpsid	i
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <main+0x630>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016da:	a91b      	add	r1, sp, #108	; 0x6c
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <main+0x670>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016de:	961b      	str	r6, [sp, #108]	; 0x6c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016e0:	f006 fece 	bl	8008480 <HAL_TIM_ConfigClockSource>
 80016e4:	b1f0      	cbz	r0, 8001724 <main+0x680>
 80016e6:	b672      	cpsid	i
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <main+0x644>
 80016ea:	bf00      	nop
 80016ec:	20000514 	.word	0x20000514
 80016f0:	a0001000 	.word	0xa0001000
 80016f4:	40002800 	.word	0x40002800
 80016f8:	00010101 	.word	0x00010101
 80016fc:	20000688 	.word	0x20000688
 8001700:	40012c00 	.word	0x40012c00
 8001704:	2000078c 	.word	0x2000078c
 8001708:	200007f0 	.word	0x200007f0
 800170c:	40010000 	.word	0x40010000
 8001710:	20000888 	.word	0x20000888
 8001714:	200008d4 	.word	0x200008d4
 8001718:	40000400 	.word	0x40000400
 800171c:	20000560 	.word	0x20000560
 8001720:	40003800 	.word	0x40003800
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001724:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001726:	a914      	add	r1, sp, #80	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001728:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800172a:	48a0      	ldr	r0, [pc, #640]	; (80019ac <main+0x908>)
 800172c:	f006 ff42 	bl	80085b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001730:	4604      	mov	r4, r0
 8001732:	b108      	cbz	r0, 8001738 <main+0x694>
 8001734:	b672      	cpsid	i
  while (1)
 8001736:	e7fe      	b.n	8001736 <main+0x692>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001738:	4601      	mov	r1, r0
 800173a:	2210      	movs	r2, #16
 800173c:	a814      	add	r0, sp, #80	; 0x50
  htim5.Instance = TIM5;
 800173e:	4d9c      	ldr	r5, [pc, #624]	; (80019b0 <main+0x90c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001740:	f008 fd3a 	bl	800a1b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001744:	221c      	movs	r2, #28
 8001746:	4621      	mov	r1, r4
 8001748:	a81b      	add	r0, sp, #108	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174a:	9412      	str	r4, [sp, #72]	; 0x48
 800174c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001750:	f008 fd32 	bl	800a1b8 <memset>
  htim5.Instance = TIM5;
 8001754:	4b97      	ldr	r3, [pc, #604]	; (80019b4 <main+0x910>)
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001756:	4628      	mov	r0, r5
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001758:	60ac      	str	r4, [r5, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175a:	61ac      	str	r4, [r5, #24]
  htim5.Init.Prescaler = 0;
 800175c:	e9c5 3400 	strd	r3, r4, [r5]
  htim5.Init.Period = 4294967295;
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001764:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001768:	f006 fd6a 	bl	8008240 <HAL_TIM_Base_Init>
 800176c:	b108      	cbz	r0, 8001772 <main+0x6ce>
 800176e:	b672      	cpsid	i
  while (1)
 8001770:	e7fe      	b.n	8001770 <main+0x6cc>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001772:	a914      	add	r1, sp, #80	; 0x50
 8001774:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001776:	9614      	str	r6, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001778:	f006 fe82 	bl	8008480 <HAL_TIM_ConfigClockSource>
 800177c:	b108      	cbz	r0, 8001782 <main+0x6de>
 800177e:	b672      	cpsid	i
  while (1)
 8001780:	e7fe      	b.n	8001780 <main+0x6dc>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001782:	4628      	mov	r0, r5
 8001784:	f006 fd8c 	bl	80082a0 <HAL_TIM_PWM_Init>
 8001788:	b108      	cbz	r0, 800178e <main+0x6ea>
 800178a:	b672      	cpsid	i
  while (1)
 800178c:	e7fe      	b.n	800178c <main+0x6e8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178e:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001790:	a910      	add	r1, sp, #64	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001792:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001794:	4628      	mov	r0, r5
 8001796:	f006 ff0d 	bl	80085b4 <HAL_TIMEx_MasterConfigSynchronization>
 800179a:	b108      	cbz	r0, 80017a0 <main+0x6fc>
 800179c:	b672      	cpsid	i
  while (1)
 800179e:	e7fe      	b.n	800179e <main+0x6fa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a0:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a2:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a4:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017a6:	220c      	movs	r2, #12
 80017a8:	a91b      	add	r1, sp, #108	; 0x6c
  sConfigOC.Pulse = 0;
 80017aa:	e9cd 301b 	strd	r3, r0, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017ae:	4628      	mov	r0, r5
 80017b0:	f006 fdde 	bl	8008370 <HAL_TIM_PWM_ConfigChannel>
 80017b4:	4604      	mov	r4, r0
 80017b6:	b108      	cbz	r0, 80017bc <main+0x718>
 80017b8:	b672      	cpsid	i
  while (1)
 80017ba:	e7fe      	b.n	80017ba <main+0x716>
  HAL_TIM_MspPostInit(&htim5);
 80017bc:	4628      	mov	r0, r5
  htim8.Instance = TIM8;
 80017be:	4d7e      	ldr	r5, [pc, #504]	; (80019b8 <main+0x914>)
  HAL_TIM_MspPostInit(&htim5);
 80017c0:	f000 fea6 	bl	8002510 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c4:	2210      	movs	r2, #16
 80017c6:	4621      	mov	r1, r4
 80017c8:	a81b      	add	r0, sp, #108	; 0x6c
 80017ca:	f008 fcf5 	bl	800a1b8 <memset>
  htim8.Instance = TIM8;
 80017ce:	4b7b      	ldr	r3, [pc, #492]	; (80019bc <main+0x918>)
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80017d0:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d2:	9416      	str	r4, [sp, #88]	; 0x58
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	60ac      	str	r4, [r5, #8]
  htim8.Init.Prescaler = 0;
 80017d6:	e9c5 3400 	strd	r3, r4, [r5]
  htim8.Init.Period = 65535;
 80017da:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017de:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e2:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e6:	e9c5 4405 	strd	r4, r4, [r5, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80017ea:	f006 fd29 	bl	8008240 <HAL_TIM_Base_Init>
 80017ee:	b108      	cbz	r0, 80017f4 <main+0x750>
 80017f0:	b672      	cpsid	i
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <main+0x74e>
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80017f4:	a91b      	add	r1, sp, #108	; 0x6c
 80017f6:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f8:	961b      	str	r6, [sp, #108]	; 0x6c
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80017fa:	f006 fe41 	bl	8008480 <HAL_TIM_ConfigClockSource>
 80017fe:	b108      	cbz	r0, 8001804 <main+0x760>
 8001800:	b672      	cpsid	i
  while (1)
 8001802:	e7fe      	b.n	8001802 <main+0x75e>
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001804:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001808:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800180a:	a914      	add	r1, sp, #80	; 0x50
 800180c:	4628      	mov	r0, r5
 800180e:	f006 fed1 	bl	80085b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001812:	b108      	cbz	r0, 8001818 <main+0x774>
 8001814:	b672      	cpsid	i
  while (1)
 8001816:	e7fe      	b.n	8001816 <main+0x772>
  htim12.Instance = TIM12;
 8001818:	4d69      	ldr	r5, [pc, #420]	; (80019c0 <main+0x91c>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 800181a:	221c      	movs	r2, #28
 800181c:	2100      	movs	r1, #0
 800181e:	a81b      	add	r0, sp, #108	; 0x6c
 8001820:	f008 fcca 	bl	800a1b8 <memset>
  htim12.Init.Prescaler = 0;
 8001824:	2300      	movs	r3, #0
  htim12.Init.Period = 65535;
 8001826:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim12.Init.Prescaler = 0;
 800182a:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 80019fc <main+0x958>
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800182e:	4628      	mov	r0, r5
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001830:	60ab      	str	r3, [r5, #8]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001832:	61ab      	str	r3, [r5, #24]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001834:	e9c5 2303 	strd	r2, r3, [r5, #12]
  htim12.Init.Prescaler = 0;
 8001838:	e9c5 c300 	strd	ip, r3, [r5]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800183c:	f006 fd30 	bl	80082a0 <HAL_TIM_PWM_Init>
 8001840:	4602      	mov	r2, r0
 8001842:	b108      	cbz	r0, 8001848 <main+0x7a4>
 8001844:	b672      	cpsid	i
  while (1)
 8001846:	e7fe      	b.n	8001846 <main+0x7a2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001848:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800184a:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184c:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184e:	a91b      	add	r1, sp, #108	; 0x6c
  sConfigOC.Pulse = 0;
 8001850:	e9cd 301b 	strd	r3, r0, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001854:	4628      	mov	r0, r5
 8001856:	f006 fd8b 	bl	8008370 <HAL_TIM_PWM_ConfigChannel>
 800185a:	4604      	mov	r4, r0
 800185c:	b108      	cbz	r0, 8001862 <main+0x7be>
 800185e:	b672      	cpsid	i
  while (1)
 8001860:	e7fe      	b.n	8001860 <main+0x7bc>
  HAL_TIM_MspPostInit(&htim12);
 8001862:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 8001864:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  HAL_TIM_MspPostInit(&htim12);
 8001868:	f000 fe52 	bl	8002510 <HAL_TIM_MspPostInit>
  huart1.Init.Mode = UART_MODE_TX_RX;
 800186c:	250c      	movs	r5, #12
  huart1.Instance = USART1;
 800186e:	4855      	ldr	r0, [pc, #340]	; (80019c4 <main+0x920>)
  huart1.Init.BaudRate = 115200;
 8001870:	4b55      	ldr	r3, [pc, #340]	; (80019c8 <main+0x924>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8001872:	6104      	str	r4, [r0, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001874:	6244      	str	r4, [r0, #36]	; 0x24
  huart1.Init.BaudRate = 115200;
 8001876:	e9c0 3600 	strd	r3, r6, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800187a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	e9c0 5405 	strd	r5, r4, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001882:	e9c0 4407 	strd	r4, r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001886:	f007 f992 	bl	8008bae <HAL_UART_Init>
 800188a:	b108      	cbz	r0, 8001890 <main+0x7ec>
 800188c:	b672      	cpsid	i
  while (1)
 800188e:	e7fe      	b.n	800188e <main+0x7ea>
  huart6.Instance = USART6;
 8001890:	4b4e      	ldr	r3, [pc, #312]	; (80019cc <main+0x928>)
 8001892:	4a4f      	ldr	r2, [pc, #316]	; (80019d0 <main+0x92c>)
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001894:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001898:	e9c3 0504 	strd	r0, r5, [r3, #16]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800189c:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a0:	e9c3 0008 	strd	r0, r0, [r3, #32]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018a4:	4618      	mov	r0, r3
  huart6.Init.BaudRate = 115200;
 80018a6:	e9c3 2600 	strd	r2, r6, [r3]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018aa:	f007 f980 	bl	8008bae <HAL_UART_Init>
 80018ae:	4604      	mov	r4, r0
 80018b0:	b108      	cbz	r0, 80018b6 <main+0x812>
 80018b2:	b672      	cpsid	i
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <main+0x810>
  MX_FATFS_Init();
 80018b6:	f007 fd81 	bl	80093bc <MX_FATFS_Init>
  hsai_BlockA2.Instance = SAI2_Block_A;
 80018ba:	4846      	ldr	r0, [pc, #280]	; (80019d4 <main+0x930>)
 80018bc:	4a46      	ldr	r2, [pc, #280]	; (80019d8 <main+0x934>)
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80018be:	2601      	movs	r6, #1
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80018c0:	2740      	movs	r7, #64	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80018c2:	2508      	movs	r5, #8
  hsai_BlockA2.Instance = SAI2_Block_A;
 80018c4:	6002      	str	r2, [r0, #0]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80018c6:	4a45      	ldr	r2, [pc, #276]	; (80019dc <main+0x938>)
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80018c8:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80018ca:	6044      	str	r4, [r0, #4]
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80018cc:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80018ce:	6084      	str	r4, [r0, #8]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80018d0:	6184      	str	r4, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80018d2:	61c2      	str	r2, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018d4:	60c4      	str	r4, [r0, #12]
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018d6:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80018d8:	6604      	str	r4, [r0, #96]	; 0x60
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80018da:	e9c0 740d 	strd	r7, r4, [r0, #52]	; 0x34
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80018de:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80018e2:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80018e6:	e9c0 5610 	strd	r5, r6, [r0, #64]	; 0x40
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80018ee:	e9c0 4414 	strd	r4, r4, [r0, #80]	; 0x50
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80018f2:	e9c0 4616 	strd	r4, r6, [r0, #88]	; 0x58
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80018f6:	f005 fbdb 	bl	80070b0 <HAL_SAI_Init>
 80018fa:	b108      	cbz	r0, 8001900 <main+0x85c>
 80018fc:	b672      	cpsid	i
  while (1)
 80018fe:	e7fe      	b.n	80018fe <main+0x85a>
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001900:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <main+0x93c>)
 8001902:	4a38      	ldr	r2, [pc, #224]	; (80019e4 <main+0x940>)
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001904:	6318      	str	r0, [r3, #48]	; 0x30
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001906:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001908:	2203      	movs	r2, #3
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800190a:	63d8      	str	r0, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800190c:	6118      	str	r0, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800190e:	6198      	str	r0, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001910:	60d8      	str	r0, [r3, #12]
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001912:	62d8      	str	r0, [r3, #44]	; 0x2c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001914:	6618      	str	r0, [r3, #96]	; 0x60
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001916:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001918:	609e      	str	r6, [r3, #8]
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800191a:	e9c3 700d 	strd	r7, r0, [r3, #52]	; 0x34
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800191e:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001922:	e9c3 0012 	strd	r0, r0, [r3, #72]	; 0x48
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001926:	e9c3 0014 	strd	r0, r0, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800192a:	e9c3 0616 	strd	r0, r6, [r3, #88]	; 0x58
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800192e:	4618      	mov	r0, r3
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001930:	e9c3 5610 	strd	r5, r6, [r3, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001934:	f005 fbbc 	bl	80070b0 <HAL_SAI_Init>
 8001938:	4605      	mov	r5, r0
 800193a:	b108      	cbz	r0, 8001940 <main+0x89c>
 800193c:	b672      	cpsid	i
  while (1)
 800193e:	e7fe      	b.n	800193e <main+0x89a>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001940:	4601      	mov	r1, r0
 8001942:	2210      	movs	r2, #16
 8001944:	a81b      	add	r0, sp, #108	; 0x6c
  hadc3.Instance = ADC3;
 8001946:	4c28      	ldr	r4, [pc, #160]	; (80019e8 <main+0x944>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001948:	f008 fc36 	bl	800a1b8 <memset>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800194c:	4f27      	ldr	r7, [pc, #156]	; (80019ec <main+0x948>)
 800194e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001952:	4620      	mov	r0, r4
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001954:	60a5      	str	r5, [r4, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001956:	6125      	str	r5, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001958:	61a5      	str	r5, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800195a:	f884 5020 	strb.w	r5, [r4, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800195e:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001960:	60e5      	str	r5, [r4, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001962:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001964:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001968:	6166      	str	r6, [r4, #20]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800196a:	e9c4 7300 	strd	r7, r3, [r4]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <main+0x94c>)
 8001970:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001972:	f002 fb95 	bl	80040a0 <HAL_ADC_Init>
 8001976:	b108      	cbz	r0, 800197c <main+0x8d8>
 8001978:	b672      	cpsid	i
  while (1)
 800197a:	e7fe      	b.n	800197a <main+0x8d6>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800197c:	e9cd 061b 	strd	r0, r6, [sp, #108]	; 0x6c
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001980:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001982:	a91b      	add	r1, sp, #108	; 0x6c
 8001984:	4620      	mov	r0, r4
 8001986:	f002 fc31 	bl	80041ec <HAL_ADC_ConfigChannel>
 800198a:	b108      	cbz	r0, 8001990 <main+0x8ec>
 800198c:	b672      	cpsid	i
  while (1)
 800198e:	e7fe      	b.n	800198e <main+0x8ea>
  hcrc.Instance = CRC;
 8001990:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <main+0x950>)
 8001992:	4a19      	ldr	r2, [pc, #100]	; (80019f8 <main+0x954>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001994:	8098      	strh	r0, [r3, #4]
  hcrc.Instance = CRC;
 8001996:	601a      	str	r2, [r3, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001998:	621e      	str	r6, [r3, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800199a:	e9c3 0005 	strd	r0, r0, [r3, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 fd22 	bl	80043e8 <HAL_CRC_Init>
 80019a4:	b360      	cbz	r0, 8001a00 <main+0x95c>
 80019a6:	b672      	cpsid	i
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <main+0x904>
 80019aa:	bf00      	nop
 80019ac:	200008d4 	.word	0x200008d4
 80019b0:	20000920 	.word	0x20000920
 80019b4:	40000c00 	.word	0x40000c00
 80019b8:	2000096c 	.word	0x2000096c
 80019bc:	40010400 	.word	0x40010400
 80019c0:	2000083c 	.word	0x2000083c
 80019c4:	200009b8 	.word	0x200009b8
 80019c8:	40011000 	.word	0x40011000
 80019cc:	20000a40 	.word	0x20000a40
 80019d0:	40011400 	.word	0x40011400
 80019d4:	20000580 	.word	0x20000580
 80019d8:	40015c04 	.word	0x40015c04
 80019dc:	0002ee00 	.word	0x0002ee00
 80019e0:	20000604 	.word	0x20000604
 80019e4:	40015c24 	.word	0x40015c24
 80019e8:	20000208 	.word	0x20000208
 80019ec:	40012200 	.word	0x40012200
 80019f0:	0f000001 	.word	0x0f000001
 80019f4:	20000250 	.word	0x20000250
 80019f8:	40023000 	.word	0x40023000
 80019fc:	40001800 	.word	0x40001800
  hdma2d.Instance = DMA2D;
 8001a00:	4b54      	ldr	r3, [pc, #336]	; (8001b54 <main+0xab0>)
 8001a02:	4a55      	ldr	r2, [pc, #340]	; (8001b58 <main+0xab4>)
  hdma2d.Init.OutputOffset = 0;
 8001a04:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001a08:	e9c3 2000 	strd	r2, r0, [r3]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001a0c:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a10:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f002 ffd1 	bl	80049bc <HAL_DMA2D_Init>
 8001a1a:	b108      	cbz	r0, 8001a20 <main+0x97c>
 8001a1c:	b672      	cpsid	i
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <main+0x97a>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001a20:	2101      	movs	r1, #1
 8001a22:	484c      	ldr	r0, [pc, #304]	; (8001b54 <main+0xab0>)
 8001a24:	f003 f918 	bl	8004c58 <HAL_DMA2D_ConfigLayer>
 8001a28:	b108      	cbz	r0, 8001a2e <main+0x98a>
 8001a2a:	b672      	cpsid	i
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <main+0x988>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001a2e:	4b4b      	ldr	r3, [pc, #300]	; (8001b5c <main+0xab8>)
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001a30:	2404      	movs	r4, #4
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001a32:	4a4b      	ldr	r2, [pc, #300]	; (8001b60 <main+0xabc>)
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001a34:	2140      	movs	r1, #64	; 0x40
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001a36:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a3a:	6098      	str	r0, [r3, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a3c:	61d8      	str	r0, [r3, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001a3e:	6298      	str	r0, [r3, #40]	; 0x28
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001a40:	e9c3 2000 	strd	r2, r0, [r3]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001a44:	2210      	movs	r2, #16
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001a46:	4618      	mov	r0, r3
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001a48:	e9c3 4203 	strd	r4, r2, [r3, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001a4c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001a50:	e9c3 1205 	strd	r1, r2, [r3, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001a54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001a58:	2107      	movs	r1, #7
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001a5a:	e9c3 5208 	strd	r5, r2, [r3, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001a5e:	2202      	movs	r2, #2
  SdramTiming.RowCycleDelay = 7;
 8001a60:	e9cd 411d 	strd	r4, r1, [sp, #116]	; 0x74
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001a64:	e9cd 211b 	strd	r2, r1, [sp, #108]	; 0x6c
  SdramTiming.WriteRecoveryTime = 3;
 8001a68:	2103      	movs	r1, #3
  SdramTiming.RCDDelay = 2;
 8001a6a:	9221      	str	r2, [sp, #132]	; 0x84
  SdramTiming.RPDelay = 2;
 8001a6c:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001a70:	a91b      	add	r1, sp, #108	; 0x6c
 8001a72:	f006 f8ad 	bl	8007bd0 <HAL_SDRAM_Init>
 8001a76:	b108      	cbz	r0, 8001a7c <main+0x9d8>
 8001a78:	b672      	cpsid	i
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <main+0x9d6>
  hspdif.Instance = SPDIFRX;
 8001a7c:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <main+0xac0>)
 8001a7e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001a82:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001a86:	e9c3 2000 	strd	r2, r0, [r3]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001a8a:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001a8e:	e9c3 0006 	strd	r0, r0, [r3, #24]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001a92:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001a96:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f006 f8f0 	bl	8007c7e <HAL_SPDIFRX_Init>
 8001a9e:	b108      	cbz	r0, 8001aa4 <main+0xa00>
 8001aa0:	b672      	cpsid	i
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <main+0x9fe>
  hdcmi.Instance = DCMI;
 8001aa4:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <main+0xac4>)
 8001aa6:	4a31      	ldr	r2, [pc, #196]	; (8001b6c <main+0xac8>)
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001aa8:	6198      	str	r0, [r3, #24]
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001aaa:	6318      	str	r0, [r3, #48]	; 0x30
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001aac:	e9c3 2000 	strd	r2, r0, [r3]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001ab0:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001ab4:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001ab8:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001abc:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fcef 	bl	80044a4 <HAL_DCMI_Init>
 8001ac6:	b108      	cbz	r0, 8001acc <main+0xa28>
 8001ac8:	b672      	cpsid	i
  while (1)
 8001aca:	e7fe      	b.n	8001aca <main+0xa26>
  hi2c1.Instance = I2C1;
 8001acc:	4c28      	ldr	r4, [pc, #160]	; (8001b70 <main+0xacc>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ace:	2501      	movs	r5, #1
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <main+0xad0>)
 8001ad2:	4e29      	ldr	r6, [pc, #164]	; (8001b78 <main+0xad4>)
  hi2c1.Init.OwnAddress1 = 0;
 8001ad4:	60a0      	str	r0, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad6:	e9c4 5003 	strd	r5, r0, [r4, #12]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ada:	e9c4 0005 	strd	r0, r0, [r4, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ade:	e9c4 0007 	strd	r0, r0, [r4, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ae2:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001ae4:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ae8:	f003 fba6 	bl	8005238 <HAL_I2C_Init>
 8001aec:	4601      	mov	r1, r0
 8001aee:	b108      	cbz	r0, 8001af4 <main+0xa50>
 8001af0:	b672      	cpsid	i
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <main+0xa4e>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001af4:	4620      	mov	r0, r4
 8001af6:	f003 fdc4 	bl	8005682 <HAL_I2CEx_ConfigAnalogFilter>
 8001afa:	4601      	mov	r1, r0
 8001afc:	b108      	cbz	r0, 8001b02 <main+0xa5e>
 8001afe:	b672      	cpsid	i
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <main+0xa5c>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b02:	4620      	mov	r0, r4
 8001b04:	f003 fde3 	bl	80056ce <HAL_I2CEx_ConfigDigitalFilter>
 8001b08:	b108      	cbz	r0, 8001b0e <main+0xa6a>
 8001b0a:	b672      	cpsid	i
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <main+0xa68>
  hi2c3.Instance = I2C3;
 8001b0e:	4c1b      	ldr	r4, [pc, #108]	; (8001b7c <main+0xad8>)
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <main+0xadc>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b12:	6220      	str	r0, [r4, #32]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b14:	e9c4 0502 	strd	r0, r5, [r4, #8]
  hi2c3.Init.OwnAddress2 = 0;
 8001b18:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b1c:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b20:	4620      	mov	r0, r4
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001b22:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b26:	f003 fb87 	bl	8005238 <HAL_I2C_Init>
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	b108      	cbz	r0, 8001b32 <main+0xa8e>
 8001b2e:	b672      	cpsid	i
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <main+0xa8c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b32:	4620      	mov	r0, r4
 8001b34:	f003 fda5 	bl	8005682 <HAL_I2CEx_ConfigAnalogFilter>
 8001b38:	4601      	mov	r1, r0
 8001b3a:	b108      	cbz	r0, 8001b40 <main+0xa9c>
 8001b3c:	b672      	cpsid	i
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <main+0xa9a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b40:	4620      	mov	r0, r4
 8001b42:	f003 fdc4 	bl	80056ce <HAL_I2CEx_ConfigDigitalFilter>
 8001b46:	b108      	cbz	r0, 8001b4c <main+0xaa8>
 8001b48:	b672      	cpsid	i
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <main+0xaa6>
  f750camera();
 8001b4c:	f7ff f9d6 	bl	8000efc <f750camera>
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <main+0xaac>
 8001b52:	bf00      	nop
 8001b54:	200002c4 	.word	0x200002c4
 8001b58:	4002b000 	.word	0x4002b000
 8001b5c:	2000070c 	.word	0x2000070c
 8001b60:	a0000140 	.word	0xa0000140
 8001b64:	20000740 	.word	0x20000740
 8001b68:	20000274 	.word	0x20000274
 8001b6c:	50050000 	.word	0x50050000
 8001b70:	200003c4 	.word	0x200003c4
 8001b74:	40005400 	.word	0x40005400
 8001b78:	00c0eaff 	.word	0x00c0eaff
 8001b7c:	20000418 	.word	0x20000418
 8001b80:	40005c00 	.word	0x40005c00

08001b84 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8001b84:	6802      	ldr	r2, [r0, #0]
 8001b86:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d101      	bne.n	8001b90 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001b8c:	f002 ba64 	b.w	8004058 <HAL_IncTick>
}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40001000 	.word	0x40001000

08001b98 <Error_Handler>:
 8001b98:	b672      	cpsid	i
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <Error_Handler+0x2>

08001b9c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_MspInit+0x38>)
{
 8001b9e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ba0:	210f      	movs	r1, #15
 8001ba2:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
 8001bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001bb4:	9200      	str	r2, [sp, #0]
 8001bb6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bbe:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bc0:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bcc:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bce:	f002 bbcb 	b.w	8004368 <HAL_NVIC_SetPriority>
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b510      	push	{r4, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	2214      	movs	r2, #20
 8001be0:	2100      	movs	r1, #0
 8001be2:	a803      	add	r0, sp, #12
 8001be4:	f008 fae8 	bl	800a1b8 <memset>
  if(hadc->Instance==ADC3)
 8001be8:	6822      	ldr	r2, [r4, #0]
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <HAL_ADC_MspInit+0x7c>)
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d12e      	bne.n	8001c4e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001bf0:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf4:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bf6:	a903      	add	r1, sp, #12
 8001bf8:	4817      	ldr	r0, [pc, #92]	; (8001c58 <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001bfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
 8001c02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c04:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001c08:	9200      	str	r2, [sp, #0]
 8001c0a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0e:	f042 0220 	orr.w	r2, r2, #32
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
 8001c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c16:	f002 0220 	and.w	r2, r2, #32
 8001c1a:	9201      	str	r2, [sp, #4]
 8001c1c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c20:	f042 0201 	orr.w	r2, r2, #1
 8001c24:	631a      	str	r2, [r3, #48]	; 0x30
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	9302      	str	r3, [sp, #8]
 8001c2e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c30:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001c34:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c38:	f003 f856 	bl	8004ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001c3c:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001c3e:	a903      	add	r1, sp, #12
 8001c40:	4806      	ldr	r0, [pc, #24]	; (8001c5c <HAL_ADC_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c42:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f003 f84d 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c4e:	b008      	add	sp, #32
 8001c50:	bd10      	pop	{r4, pc}
 8001c52:	bf00      	nop
 8001c54:	40012200 	.word	0x40012200
 8001c58:	40021400 	.word	0x40021400
 8001c5c:	40020000 	.word	0x40020000

08001c60 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001c60:	6802      	ldr	r2, [r0, #0]
{
 8001c62:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_CRC_MspInit+0x28>)
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d10b      	bne.n	8001c82 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c6a:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8001c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c76:	631a      	str	r2, [r3, #48]	; 0x30
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c82:	b002      	add	sp, #8
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40023000 	.word	0x40023000

08001c8c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001c8c:	b570      	push	{r4, r5, r6, lr}
 8001c8e:	b08c      	sub	sp, #48	; 0x30
 8001c90:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c92:	2214      	movs	r2, #20
 8001c94:	2100      	movs	r1, #0
 8001c96:	a807      	add	r0, sp, #28
 8001c98:	f008 fa8e 	bl	800a1b8 <memset>
  if(hdcmi->Instance==DCMI)
 8001c9c:	6822      	ldr	r2, [r4, #0]
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_DCMI_MspInit+0xf4>)
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d16b      	bne.n	8001d7c <HAL_DCMI_MspInit+0xf0>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001ca4:	4b37      	ldr	r3, [pc, #220]	; (8001d84 <HAL_DCMI_MspInit+0xf8>)
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ca8:	250d      	movs	r5, #13
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001caa:	a907      	add	r1, sp, #28
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb0:	4835      	ldr	r0, [pc, #212]	; (8001d88 <HAL_DCMI_MspInit+0xfc>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	635a      	str	r2, [r3, #52]	; 0x34
 8001cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cba:	f002 0201 	and.w	r2, r2, #1
 8001cbe:	9201      	str	r2, [sp, #4]
 8001cc0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cc4:	f042 0210 	orr.w	r2, r2, #16
 8001cc8:	631a      	str	r2, [r3, #48]	; 0x30
 8001cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ccc:	f002 0210 	and.w	r2, r2, #16
 8001cd0:	9202      	str	r2, [sp, #8]
 8001cd2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd6:	f042 0208 	orr.w	r2, r2, #8
 8001cda:	631a      	str	r2, [r3, #48]	; 0x30
 8001cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cde:	f002 0208 	and.w	r2, r2, #8
 8001ce2:	9203      	str	r2, [sp, #12]
 8001ce4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cec:	631a      	str	r2, [r3, #48]	; 0x30
 8001cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cf0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001cf4:	9204      	str	r2, [sp, #16]
 8001cf6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8001d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d02:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001d06:	9205      	str	r2, [sp, #20]
 8001d08:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d0c:	f042 0201 	orr.w	r2, r2, #1
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	9306      	str	r3, [sp, #24]
 8001d1a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2360      	movs	r3, #96	; 0x60
 8001d1e:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d22:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d24:	f002 ffe0 	bl	8004ce8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001d28:	2308      	movs	r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	a907      	add	r1, sp, #28
 8001d2c:	4817      	ldr	r0, [pc, #92]	; (8001d8c <HAL_DCMI_MspInit+0x100>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d2e:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f002 ffd6 	bl	8004ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001d40:	a907      	add	r1, sp, #28
 8001d42:	4813      	ldr	r0, [pc, #76]	; (8001d90 <HAL_DCMI_MspInit+0x104>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d44:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001d4e:	f002 ffcb 	bl	8004ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001d52:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d56:	a907      	add	r1, sp, #28
 8001d58:	480e      	ldr	r0, [pc, #56]	; (8001d94 <HAL_DCMI_MspInit+0x108>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d5a:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d64:	f002 ffc0 	bl	8004ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001d68:	2350      	movs	r3, #80	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	a907      	add	r1, sp, #28
 8001d6c:	480a      	ldr	r0, [pc, #40]	; (8001d98 <HAL_DCMI_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d6e:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d78:	f002 ffb6 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001d7c:	b00c      	add	sp, #48	; 0x30
 8001d7e:	bd70      	pop	{r4, r5, r6, pc}
 8001d80:	50050000 	.word	0x50050000
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40020c00 	.word	0x40020c00
 8001d90:	40021800 	.word	0x40021800
 8001d94:	40021c00 	.word	0x40021c00
 8001d98:	40020000 	.word	0x40020000

08001d9c <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <HAL_DMA2D_MspInit+0x3c>)
{
 8001d9e:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001da0:	6802      	ldr	r2, [r0, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d115      	bne.n	8001dd2 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001da6:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001daa:	2105      	movs	r1, #5
 8001dac:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001db0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001db6:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001dc2:	f002 fad1 	bl	8004368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001dc6:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001dc8:	b003      	add	sp, #12
 8001dca:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001dce:	f002 bafd 	b.w	80043cc <HAL_NVIC_EnableIRQ>
}
 8001dd2:	b003      	add	sp, #12
 8001dd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dd8:	4002b000 	.word	0x4002b000

08001ddc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ddc:	b570      	push	{r4, r5, r6, lr}
 8001dde:	b0aa      	sub	sp, #168	; 0xa8
 8001de0:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de2:	2214      	movs	r2, #20
 8001de4:	2100      	movs	r1, #0
 8001de6:	a804      	add	r0, sp, #16
 8001de8:	f008 f9e6 	bl	800a1b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dec:	2284      	movs	r2, #132	; 0x84
 8001dee:	2100      	movs	r1, #0
 8001df0:	a809      	add	r0, sp, #36	; 0x24
 8001df2:	f008 f9e1 	bl	800a1b8 <memset>
  if(hi2c->Instance==I2C1)
 8001df6:	6833      	ldr	r3, [r6, #0]
 8001df8:	4a3d      	ldr	r2, [pc, #244]	; (8001ef0 <HAL_I2C_MspInit+0x114>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d148      	bne.n	8001e90 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001dfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e02:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e04:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e06:	f004 fc2d 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 8001e0a:	b108      	cbz	r0, 8001e10 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8001e0c:	f7ff fec4 	bl	8001b98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e10:	4c38      	ldr	r4, [pc, #224]	; (8001ef4 <HAL_I2C_MspInit+0x118>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e12:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	6323      	str	r3, [r4, #48]	; 0x30
 8001e22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e2c:	2312      	movs	r3, #18
 8001e2e:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e34:	4830      	ldr	r0, [pc, #192]	; (8001ef8 <HAL_I2C_MspInit+0x11c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3e:	f002 ff53 	bl	8004ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e42:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001e44:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8001f08 <HAL_I2C_MspInit+0x12c>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e4c:	6423      	str	r3, [r4, #64]	; 0x40
 8001e4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001e50:	4c2a      	ldr	r4, [pc, #168]	; (8001efc <HAL_I2C_MspInit+0x120>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001e56:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e58:	61a5      	str	r5, [r4, #24]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e62:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001e64:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e68:	2340      	movs	r3, #64	; 0x40
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e6a:	e9c4 3502 	strd	r3, r5, [r4, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e72:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8001e76:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e7a:	e9c4 3507 	strd	r3, r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001e7e:	f002 fbb5 	bl	80045ec <HAL_DMA_Init>
 8001e82:	b108      	cbz	r0, 8001e88 <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 8001e84:	f7ff fe88 	bl	8001b98 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001e88:	63b4      	str	r4, [r6, #56]	; 0x38
 8001e8a:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e8c:	b02a      	add	sp, #168	; 0xa8
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
  else if(hi2c->Instance==I2C3)
 8001e90:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <HAL_I2C_MspInit+0x124>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d1fa      	bne.n	8001e8c <HAL_I2C_MspInit+0xb0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e9a:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001e9c:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e9e:	f004 fbe1 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 8001ea2:	b108      	cbz	r0, 8001ea8 <HAL_I2C_MspInit+0xcc>
      Error_Handler();
 8001ea4:	f7ff fe78 	bl	8001b98 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ea8:	4c12      	ldr	r4, [pc, #72]	; (8001ef4 <HAL_I2C_MspInit+0x118>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eaa:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2101      	movs	r1, #1
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eb0:	4814      	ldr	r0, [pc, #80]	; (8001f04 <HAL_I2C_MspInit+0x128>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb8:	6323      	str	r3, [r4, #48]	; 0x30
 8001eba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec0:	9302      	str	r3, [sp, #8]
 8001ec2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec4:	2312      	movs	r3, #18
 8001ec6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e9cd 1306 	strd	r1, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ed0:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ed2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ed4:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ed6:	f002 ff07 	bl	8004ce8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001edc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ee0:	6423      	str	r3, [r4, #64]	; 0x40
 8001ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ee4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ee8:	9303      	str	r3, [sp, #12]
 8001eea:	9b03      	ldr	r3, [sp, #12]
}
 8001eec:	e7ce      	b.n	8001e8c <HAL_I2C_MspInit+0xb0>
 8001eee:	bf00      	nop
 8001ef0:	40005400 	.word	0x40005400
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	20000304 	.word	0x20000304
 8001f00:	40005c00 	.word	0x40005c00
 8001f04:	40021c00 	.word	0x40021c00
 8001f08:	400260a0 	.word	0x400260a0

08001f0c <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 8001f0c:	6803      	ldr	r3, [r0, #0]
 8001f0e:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <HAL_I2C_MspDeInit+0x60>)
 8001f10:	4293      	cmp	r3, r2
{
 8001f12:	b510      	push	{r4, lr}
 8001f14:	4604      	mov	r4, r0
  if(hi2c->Instance==I2C1)
 8001f16:	d114      	bne.n	8001f42 <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001f18:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8001f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f20:	4813      	ldr	r0, [pc, #76]	; (8001f70 <HAL_I2C_MspDeInit+0x64>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001f22:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8001f2a:	f002 ffbf 	bl	8004eac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8001f2e:	4810      	ldr	r0, [pc, #64]	; (8001f70 <HAL_I2C_MspDeInit+0x64>)
 8001f30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f34:	f002 ffba 	bl	8004eac <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 8001f38:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(hi2c->hdmatx);
 8001f3e:	f002 bbd3 	b.w	80046e8 <HAL_DMA_DeInit>
  else if(hi2c->Instance==I2C3)
 8001f42:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <HAL_I2C_MspDeInit+0x68>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d110      	bne.n	8001f6a <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001f48:	f502 32ee 	add.w	r2, r2, #121856	; 0x1dc00
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8001f4c:	2180      	movs	r1, #128	; 0x80
 8001f4e:	480a      	ldr	r0, [pc, #40]	; (8001f78 <HAL_I2C_MspDeInit+0x6c>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001f50:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f56:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8001f58:	f002 ffa8 	bl	8004eac <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8001f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f60:	4805      	ldr	r0, [pc, #20]	; (8001f78 <HAL_I2C_MspDeInit+0x6c>)
}
 8001f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8001f66:	f002 bfa1 	b.w	8004eac <HAL_GPIO_DeInit>
}
 8001f6a:	bd10      	pop	{r4, pc}
 8001f6c:	40005400 	.word	0x40005400
 8001f70:	40020400 	.word	0x40020400
 8001f74:	40005c00 	.word	0x40005c00
 8001f78:	40021c00 	.word	0x40021c00

08001f7c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f7c:	b570      	push	{r4, r5, r6, lr}
 8001f7e:	b08c      	sub	sp, #48	; 0x30
 8001f80:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f82:	2214      	movs	r2, #20
 8001f84:	2100      	movs	r1, #0
 8001f86:	a807      	add	r0, sp, #28
 8001f88:	f008 f916 	bl	800a1b8 <memset>
  if(hltdc->Instance==LTDC)
 8001f8c:	6822      	ldr	r2, [r4, #0]
 8001f8e:	4b3e      	ldr	r3, [pc, #248]	; (8002088 <HAL_LTDC_MspInit+0x10c>)
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d176      	bne.n	8002082 <HAL_LTDC_MspInit+0x106>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f94:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f9a:	260e      	movs	r6, #14
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001f9c:	a907      	add	r1, sp, #28
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2400      	movs	r4, #0
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001fa2:	483a      	ldr	r0, [pc, #232]	; (800208c <HAL_LTDC_MspInit+0x110>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fa4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001fa8:	645a      	str	r2, [r3, #68]	; 0x44
 8001faa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fac:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001fb0:	9201      	str	r2, [sp, #4]
 8001fb2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb6:	f042 0210 	orr.w	r2, r2, #16
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
 8001fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fbe:	f002 0210 	and.w	r2, r2, #16
 8001fc2:	9202      	str	r2, [sp, #8]
 8001fc4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fcc:	631a      	str	r2, [r3, #48]	; 0x30
 8001fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001fd4:	9203      	str	r2, [sp, #12]
 8001fd6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001fe6:	9204      	str	r2, [sp, #16]
 8001fe8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001ff8:	9205      	str	r2, [sp, #20]
 8001ffa:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ffe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002002:	631a      	str	r2, [r3, #48]	; 0x30
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	9306      	str	r3, [sp, #24]
 800200c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2310      	movs	r3, #16
 8002010:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002014:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002016:	f002 fe67 	bl	8004ce8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800201a:	f64e 73ff 	movw	r3, #61439	; 0xefff
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800201e:	a907      	add	r1, sp, #28
 8002020:	481b      	ldr	r0, [pc, #108]	; (8002090 <HAL_LTDC_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002022:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800202c:	f002 fe5c 	bl	8004ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002030:	23f7      	movs	r3, #247	; 0xf7
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002032:	a907      	add	r1, sp, #28
 8002034:	4817      	ldr	r0, [pc, #92]	; (8002094 <HAL_LTDC_MspInit+0x118>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002036:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002040:	f002 fe52 	bl	8004ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002048:	a907      	add	r1, sp, #28
 800204a:	4813      	ldr	r0, [pc, #76]	; (8002098 <HAL_LTDC_MspInit+0x11c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002050:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002056:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002058:	f002 fe46 	bl	8004ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800205c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002060:	a907      	add	r1, sp, #28
 8002062:	480e      	ldr	r0, [pc, #56]	; (800209c <HAL_LTDC_MspInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002064:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800206e:	f002 fe3b 	bl	8004ce8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002072:	2058      	movs	r0, #88	; 0x58
 8002074:	4622      	mov	r2, r4
 8002076:	2105      	movs	r1, #5
 8002078:	f002 f976 	bl	8004368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800207c:	2058      	movs	r0, #88	; 0x58
 800207e:	f002 f9a5 	bl	80043cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002082:	b00c      	add	sp, #48	; 0x30
 8002084:	bd70      	pop	{r4, r5, r6, pc}
 8002086:	bf00      	nop
 8002088:	40016800 	.word	0x40016800
 800208c:	40021000 	.word	0x40021000
 8002090:	40022400 	.word	0x40022400
 8002094:	40022800 	.word	0x40022800
 8002098:	40021800 	.word	0x40021800
 800209c:	40022000 	.word	0x40022000

080020a0 <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	2214      	movs	r2, #20
 80020a2:	2100      	movs	r1, #0
{
 80020a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020a8:	b08a      	sub	sp, #40	; 0x28
 80020aa:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	eb0d 0002 	add.w	r0, sp, r2
 80020b0:	f008 f882 	bl	800a1b8 <memset>
  if(hqspi->Instance==QUADSPI)
 80020b4:	6822      	ldr	r2, [r4, #0]
 80020b6:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <HAL_QSPI_MspInit+0xc8>)
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d151      	bne.n	8002160 <HAL_QSPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80020bc:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_QSPI_MspInit+0xcc>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020c0:	2403      	movs	r4, #3
 80020c2:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 80020c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80020ca:	a905      	add	r1, sp, #20
 80020cc:	4828      	ldr	r0, [pc, #160]	; (8002170 <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 80020ce:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 80020d4:	639a      	str	r2, [r3, #56]	; 0x38
 80020d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d8:	f002 0202 	and.w	r2, r2, #2
 80020dc:	9201      	str	r2, [sp, #4]
 80020de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e2:	f042 0210 	orr.w	r2, r2, #16
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
 80020e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ea:	f002 0210 	and.w	r2, r2, #16
 80020ee:	9202      	str	r2, [sp, #8]
 80020f0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f4:	f042 0202 	orr.w	r2, r2, #2
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
 80020fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020fc:	f002 0202 	and.w	r2, r2, #2
 8002100:	9203      	str	r2, [sp, #12]
 8002102:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002106:	f042 0208 	orr.w	r2, r2, #8
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	9304      	str	r3, [sp, #16]
 8002114:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800211a:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800211e:	f002 fde3 	bl	8004ce8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002122:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002124:	a905      	add	r1, sp, #20
 8002126:	4813      	ldr	r0, [pc, #76]	; (8002174 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800212c:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	e9cd 7407 	strd	r7, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002132:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002134:	f002 fdd8 	bl	8004ce8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002138:	a905      	add	r1, sp, #20
 800213a:	480e      	ldr	r0, [pc, #56]	; (8002174 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800213c:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002146:	f002 fdcf 	bl	8004ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800214a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800214e:	a905      	add	r1, sp, #20
 8002150:	4809      	ldr	r0, [pc, #36]	; (8002178 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002152:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800215c:	f002 fdc4 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002160:	b00a      	add	sp, #40	; 0x28
 8002162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002166:	bf00      	nop
 8002168:	a0001000 	.word	0xa0001000
 800216c:	40023800 	.word	0x40023800
 8002170:	40021000 	.word	0x40021000
 8002174:	40020400 	.word	0x40020400
 8002178:	40020c00 	.word	0x40020c00

0800217c <HAL_QSPI_MspDeInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
  if(hqspi->Instance==QUADSPI)
 800217c:	6802      	ldr	r2, [r0, #0]
{
 800217e:	b508      	push	{r3, lr}
  if(hqspi->Instance==QUADSPI)
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_QSPI_MspDeInit+0x34>)
 8002182:	429a      	cmp	r2, r3
 8002184:	d113      	bne.n	80021ae <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002186:	4a0b      	ldr	r2, [pc, #44]	; (80021b4 <HAL_QSPI_MspDeInit+0x38>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(QSPI_D2_GPIO_Port, QSPI_D2_Pin);
 8002188:	2104      	movs	r1, #4
 800218a:	480b      	ldr	r0, [pc, #44]	; (80021b8 <HAL_QSPI_MspDeInit+0x3c>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 800218c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800218e:	f023 0302 	bic.w	r3, r3, #2
 8002192:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(QSPI_D2_GPIO_Port, QSPI_D2_Pin);
 8002194:	f002 fe8a 	bl	8004eac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, QSPI_NCS_Pin|GPIO_PIN_2);
 8002198:	2144      	movs	r1, #68	; 0x44
 800219a:	4808      	ldr	r0, [pc, #32]	; (80021bc <HAL_QSPI_MspDeInit+0x40>)
 800219c:	f002 fe86 	bl	8004eac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin);
 80021a0:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80021a4:	4806      	ldr	r0, [pc, #24]	; (80021c0 <HAL_QSPI_MspDeInit+0x44>)
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80021a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOD, QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin);
 80021aa:	f002 be7f 	b.w	8004eac <HAL_GPIO_DeInit>
}
 80021ae:	bd08      	pop	{r3, pc}
 80021b0:	a0001000 	.word	0xa0001000
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40020400 	.word	0x40020400
 80021c0:	40020c00 	.word	0x40020c00

080021c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021c4:	b510      	push	{r4, lr}
 80021c6:	b0a2      	sub	sp, #136	; 0x88
 80021c8:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021ca:	2284      	movs	r2, #132	; 0x84
 80021cc:	2100      	movs	r1, #0
 80021ce:	a801      	add	r0, sp, #4
 80021d0:	f007 fff2 	bl	800a1b8 <memset>
  if(hrtc->Instance==RTC)
 80021d4:	6822      	ldr	r2, [r4, #0]
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_RTC_MspInit+0x3c>)
 80021d8:	429a      	cmp	r2, r3
 80021da:	d10f      	bne.n	80021fc <HAL_RTC_MspInit+0x38>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021dc:	2320      	movs	r3, #32
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021de:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021e0:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e6:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e8:	f004 fa3c 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 80021ec:	b108      	cbz	r0, 80021f2 <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 80021ee:	f7ff fcd3 	bl	8001b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021f2:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_RTC_MspInit+0x40>)
 80021f4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80021f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021fa:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021fc:	b022      	add	sp, #136	; 0x88
 80021fe:	bd10      	pop	{r4, pc}
 8002200:	40002800 	.word	0x40002800
 8002204:	40023800 	.word	0x40023800

08002208 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002208:	b570      	push	{r4, r5, r6, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220e:	2214      	movs	r2, #20
 8002210:	2100      	movs	r1, #0
 8002212:	a803      	add	r0, sp, #12
 8002214:	f007 ffd0 	bl	800a1b8 <memset>
  if(hsd->Instance==SDMMC1)
 8002218:	6822      	ldr	r2, [r4, #0]
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <HAL_SD_MspInit+0x8c>)
 800221c:	429a      	cmp	r2, r3
 800221e:	d136      	bne.n	800228e <HAL_SD_MspInit+0x86>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002220:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002224:	240c      	movs	r4, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002228:	2503      	movs	r5, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800222a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222c:	eb0d 0104 	add.w	r1, sp, r4
 8002230:	4819      	ldr	r0, [pc, #100]	; (8002298 <HAL_SD_MspInit+0x90>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002236:	645a      	str	r2, [r3, #68]	; 0x44
 8002238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800223a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800223e:	9200      	str	r2, [sp, #0]
 8002240:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002244:	f042 0204 	orr.w	r2, r2, #4
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
 800224a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800224c:	f002 0204 	and.w	r2, r2, #4
 8002250:	9201      	str	r2, [sp, #4]
 8002252:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002256:	f042 0208 	orr.w	r2, r2, #8
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	9302      	str	r3, [sp, #8]
 8002264:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800226a:	e9cd 5406 	strd	r5, r4, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002272:	f002 fd39 	bl	8004ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002276:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002278:	eb0d 0104 	add.w	r1, sp, r4
 800227c:	4807      	ldr	r0, [pc, #28]	; (800229c <HAL_SD_MspInit+0x94>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800227e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800228a:	f002 fd2d 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800228e:	b008      	add	sp, #32
 8002290:	bd70      	pop	{r4, r5, r6, pc}
 8002292:	bf00      	nop
 8002294:	40012c00 	.word	0x40012c00
 8002298:	40020800 	.word	0x40020800
 800229c:	40020c00 	.word	0x40020c00

080022a0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80022a0:	b510      	push	{r4, lr}
 80022a2:	b0a8      	sub	sp, #160	; 0xa0
 80022a4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a6:	2214      	movs	r2, #20
 80022a8:	2100      	movs	r1, #0
 80022aa:	a802      	add	r0, sp, #8
 80022ac:	f007 ff84 	bl	800a1b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022b0:	2284      	movs	r2, #132	; 0x84
 80022b2:	2100      	movs	r1, #0
 80022b4:	a807      	add	r0, sp, #28
 80022b6:	f007 ff7f 	bl	800a1b8 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80022c0:	d131      	bne.n	8002326 <HAL_SPDIFRX_MspInit+0x86>
  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80022c2:	2364      	movs	r3, #100	; 0x64
 80022c4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
    PeriphClkInitStruct.PLLI2SDivQ = 1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c8:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80022ca:	e9cd 1307 	strd	r1, r3, [sp, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80022ce:	2302      	movs	r3, #2
 80022d0:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80022d2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80022d6:	2301      	movs	r3, #1
 80022d8:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022da:	f004 f9c3 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 80022de:	b108      	cbz	r0, 80022e4 <HAL_SPDIFRX_MspInit+0x44>
    {
      Error_Handler();
 80022e0:	f7ff fc5a 	bl	8001b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_SPDIFRX_MspInit+0x8c>)
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80022e6:	4812      	ldr	r0, [pc, #72]	; (8002330 <HAL_SPDIFRX_MspInit+0x90>)
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80022e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022ee:	641a      	str	r2, [r3, #64]	; 0x40
 80022f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022f2:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80022f6:	9200      	str	r2, [sp, #0]
 80022f8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022fc:	f042 0208 	orr.w	r2, r2, #8
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	9301      	str	r3, [sp, #4]
 800230c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	e9cd 3304 	strd	r3, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800231a:	2308      	movs	r3, #8
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800231c:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002320:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002322:	f002 fce1 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002326:	b028      	add	sp, #160	; 0xa0
 8002328:	bd10      	pop	{r4, pc}
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800
 8002330:	40020c00 	.word	0x40020c00

08002334 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002334:	b530      	push	{r4, r5, lr}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233a:	2214      	movs	r2, #20
 800233c:	2100      	movs	r1, #0
 800233e:	a803      	add	r0, sp, #12
 8002340:	f007 ff3a 	bl	800a1b8 <memset>
  if(hspi->Instance==SPI2)
 8002344:	6822      	ldr	r2, [r4, #0]
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_SPI_MspInit+0x80>)
 8002348:	429a      	cmp	r2, r3
 800234a:	d131      	bne.n	80023b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800234c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002350:	2402      	movs	r4, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002352:	2505      	movs	r5, #5
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002354:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002358:	4817      	ldr	r0, [pc, #92]	; (80023b8 <HAL_SPI_MspInit+0x84>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800235a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
 8002360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002362:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002366:	9200      	str	r2, [sp, #0]
 8002368:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800236a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800236c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002370:	631a      	str	r2, [r3, #48]	; 0x30
 8002372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002374:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002378:	9201      	str	r2, [sp, #4]
 800237a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800237e:	f042 0202 	orr.w	r2, r2, #2
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002386:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	9302      	str	r3, [sp, #8]
 800238e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002394:	f002 fca8 	bl	8004ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002398:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239c:	a903      	add	r1, sp, #12
 800239e:	4807      	ldr	r0, [pc, #28]	; (80023bc <HAL_SPI_MspInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023a0:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a8:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ac:	f002 fc9c 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023b0:	b009      	add	sp, #36	; 0x24
 80023b2:	bd30      	pop	{r4, r5, pc}
 80023b4:	40003800 	.word	0x40003800
 80023b8:	40022000 	.word	0x40022000
 80023bc:	40020400 	.word	0x40020400

080023c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023c0:	b510      	push	{r4, lr}
 80023c2:	b08c      	sub	sp, #48	; 0x30
 80023c4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c6:	2214      	movs	r2, #20
 80023c8:	2100      	movs	r1, #0
 80023ca:	a807      	add	r0, sp, #28
 80023cc:	f007 fef4 	bl	800a1b8 <memset>
  if(htim_base->Instance==TIM1)
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	4a3e      	ldr	r2, [pc, #248]	; (80024cc <HAL_TIM_Base_MspInit+0x10c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d10b      	bne.n	80023f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023d8:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_TIM_Base_MspInit+0x110>)
 80023da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	645a      	str	r2, [r3, #68]	; 0x44
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80023ec:	b00c      	add	sp, #48	; 0x30
 80023ee:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM2)
 80023f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f4:	d127      	bne.n	8002446 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023f6:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80023fe:	4835      	ldr	r0, [pc, #212]	; (80024d4 <HAL_TIM_Base_MspInit+0x114>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
 8002408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800240a:	f002 0201 	and.w	r2, r2, #1
 800240e:	9201      	str	r2, [sp, #4]
 8002410:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002414:	f042 0201 	orr.w	r2, r2, #1
 8002418:	631a      	str	r2, [r3, #48]	; 0x30
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	9302      	str	r3, [sp, #8]
 8002422:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800242a:	2301      	movs	r3, #1
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800242c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800242e:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002430:	f002 fc5a 	bl	8004ce8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002434:	2200      	movs	r2, #0
 8002436:	201c      	movs	r0, #28
 8002438:	4611      	mov	r1, r2
 800243a:	f001 ff95 	bl	8004368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800243e:	201c      	movs	r0, #28
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002440:	f001 ffc4 	bl	80043cc <HAL_NVIC_EnableIRQ>
 8002444:	e7d2      	b.n	80023ec <HAL_TIM_Base_MspInit+0x2c>
  else if(htim_base->Instance==TIM3)
 8002446:	4a24      	ldr	r2, [pc, #144]	; (80024d8 <HAL_TIM_Base_MspInit+0x118>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d122      	bne.n	8002492 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800244c:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <HAL_TIM_Base_MspInit+0x110>)
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800244e:	a907      	add	r1, sp, #28
 8002450:	4822      	ldr	r0, [pc, #136]	; (80024dc <HAL_TIM_Base_MspInit+0x11c>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002454:	f042 0202 	orr.w	r2, r2, #2
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
 800245a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245c:	f002 0202 	and.w	r2, r2, #2
 8002460:	9203      	str	r2, [sp, #12]
 8002462:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002466:	f042 0202 	orr.w	r2, r2, #2
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2210      	movs	r2, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	9304      	str	r3, [sp, #16]
 8002476:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800247e:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002480:	f002 fc32 	bl	8004ce8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002484:	2200      	movs	r2, #0
 8002486:	201d      	movs	r0, #29
 8002488:	4611      	mov	r1, r2
 800248a:	f001 ff6d 	bl	8004368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800248e:	201d      	movs	r0, #29
 8002490:	e7d6      	b.n	8002440 <HAL_TIM_Base_MspInit+0x80>
  else if(htim_base->Instance==TIM5)
 8002492:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <HAL_TIM_Base_MspInit+0x120>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d10a      	bne.n	80024ae <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002498:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <HAL_TIM_Base_MspInit+0x110>)
 800249a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800249c:	f042 0208 	orr.w	r2, r2, #8
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	9305      	str	r3, [sp, #20]
 80024aa:	9b05      	ldr	r3, [sp, #20]
 80024ac:	e79e      	b.n	80023ec <HAL_TIM_Base_MspInit+0x2c>
  else if(htim_base->Instance==TIM8)
 80024ae:	4a0d      	ldr	r2, [pc, #52]	; (80024e4 <HAL_TIM_Base_MspInit+0x124>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d19b      	bne.n	80023ec <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_TIM_Base_MspInit+0x110>)
 80024b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024b8:	f042 0202 	orr.w	r2, r2, #2
 80024bc:	645a      	str	r2, [r3, #68]	; 0x44
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	9306      	str	r3, [sp, #24]
 80024c6:	9b06      	ldr	r3, [sp, #24]
}
 80024c8:	e790      	b.n	80023ec <HAL_TIM_Base_MspInit+0x2c>
 80024ca:	bf00      	nop
 80024cc:	40010000 	.word	0x40010000
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40020400 	.word	0x40020400
 80024e0:	40000c00 	.word	0x40000c00
 80024e4:	40010400 	.word	0x40010400

080024e8 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM12)
 80024e8:	6802      	ldr	r2, [r0, #0]
{
 80024ea:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM12)
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <HAL_TIM_PWM_MspInit+0x24>)
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d10a      	bne.n	8002508 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80024f2:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 80024f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002508:	b002      	add	sp, #8
 800250a:	4770      	bx	lr
 800250c:	40001800 	.word	0x40001800

08002510 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002510:	b510      	push	{r4, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002516:	2214      	movs	r2, #20
 8002518:	2100      	movs	r1, #0
 800251a:	a803      	add	r0, sp, #12
 800251c:	f007 fe4c 	bl	800a1b8 <memset>
  if(htim->Instance==TIM1)
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	4a22      	ldr	r2, [pc, #136]	; (80025ac <HAL_TIM_MspPostInit+0x9c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d116      	bne.n	8002556 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_TIM_MspPostInit+0xa0>)
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	f44f 7080 	mov.w	r0, #256	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800252e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
 8002544:	e9cd 0303 	strd	r0, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002548:	2301      	movs	r3, #1
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800254a:	481a      	ldr	r0, [pc, #104]	; (80025b4 <HAL_TIM_MspPostInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800254c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800254e:	f002 fbcb 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002552:	b008      	add	sp, #32
 8002554:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM5)
 8002556:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <HAL_TIM_MspPostInit+0xa8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d111      	bne.n	8002580 <HAL_TIM_MspPostInit+0x70>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <HAL_TIM_MspPostInit+0xa0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2101      	movs	r1, #1
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002560:	4816      	ldr	r0, [pc, #88]	; (80025bc <HAL_TIM_MspPostInit+0xac>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002568:	631a      	str	r2, [r3, #48]	; 0x30
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800257a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800257c:	a903      	add	r1, sp, #12
 800257e:	e7e6      	b.n	800254e <HAL_TIM_MspPostInit+0x3e>
  else if(htim->Instance==TIM12)
 8002580:	4a0f      	ldr	r2, [pc, #60]	; (80025c0 <HAL_TIM_MspPostInit+0xb0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d1e5      	bne.n	8002552 <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_TIM_MspPostInit+0xa0>)
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002588:	a903      	add	r1, sp, #12
 800258a:	480e      	ldr	r0, [pc, #56]	; (80025c4 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800258c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800258e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259c:	9302      	str	r3, [sp, #8]
 800259e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80025a6:	2309      	movs	r3, #9
 80025a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80025aa:	e7d0      	b.n	800254e <HAL_TIM_MspPostInit+0x3e>
 80025ac:	40010000 	.word	0x40010000
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40020000 	.word	0x40020000
 80025b8:	40000c00 	.word	0x40000c00
 80025bc:	40022000 	.word	0x40022000
 80025c0:	40001800 	.word	0x40001800
 80025c4:	40021c00 	.word	0x40021c00

080025c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c8:	b570      	push	{r4, r5, r6, lr}
 80025ca:	b0ac      	sub	sp, #176	; 0xb0
 80025cc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ce:	2214      	movs	r2, #20
 80025d0:	2100      	movs	r1, #0
 80025d2:	a806      	add	r0, sp, #24
 80025d4:	f007 fdf0 	bl	800a1b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025d8:	2284      	movs	r2, #132	; 0x84
 80025da:	2100      	movs	r1, #0
 80025dc:	a80b      	add	r0, sp, #44	; 0x2c
 80025de:	f007 fdeb 	bl	800a1b8 <memset>
  if(huart->Instance==USART1)
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	4a36      	ldr	r2, [pc, #216]	; (80026c0 <HAL_UART_MspInit+0xf8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d13d      	bne.n	8002666 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025ea:	2340      	movs	r3, #64	; 0x40
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ec:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025ee:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f0:	f004 f838 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 80025f4:	b108      	cbz	r0, 80025fa <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 80025f6:	f7ff facf 	bl	8001b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025fa:	4b32      	ldr	r3, [pc, #200]	; (80026c4 <HAL_UART_MspInit+0xfc>)
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002600:	2507      	movs	r5, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8002602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002604:	a906      	add	r1, sp, #24
 8002606:	4830      	ldr	r0, [pc, #192]	; (80026c8 <HAL_UART_MspInit+0x100>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002608:	f042 0210 	orr.w	r2, r2, #16
 800260c:	645a      	str	r2, [r3, #68]	; 0x44
 800260e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002610:	f002 0210 	and.w	r2, r2, #16
 8002614:	9201      	str	r2, [sp, #4]
 8002616:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800261a:	f042 0202 	orr.w	r2, r2, #2
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
 8002620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002622:	f002 0202 	and.w	r2, r2, #2
 8002626:	9202      	str	r2, [sp, #8]
 8002628:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	631a      	str	r2, [r3, #48]	; 0x30
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002634:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	9303      	str	r3, [sp, #12]
 800263c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263e:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002640:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002644:	e9cd 3606 	strd	r3, r6, [sp, #24]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002648:	f002 fb4e 	bl	8004ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800264c:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002650:	a906      	add	r1, sp, #24
 8002652:	481e      	ldr	r0, [pc, #120]	; (80026cc <HAL_UART_MspInit+0x104>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002654:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	e9cd 3606 	strd	r3, r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265e:	f002 fb43 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002662:	b02c      	add	sp, #176	; 0xb0
 8002664:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART6)
 8002666:	4a1a      	ldr	r2, [pc, #104]	; (80026d0 <HAL_UART_MspInit+0x108>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d1fa      	bne.n	8002662 <HAL_UART_MspInit+0x9a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800266c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002670:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002672:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002674:	f003 fff6 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 8002678:	b108      	cbz	r0, 800267e <HAL_UART_MspInit+0xb6>
      Error_Handler();
 800267a:	f7ff fa8d 	bl	8001b98 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <HAL_UART_MspInit+0xfc>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002680:	2100      	movs	r1, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002682:	4814      	ldr	r0, [pc, #80]	; (80026d4 <HAL_UART_MspInit+0x10c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8002684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002686:	f042 0220 	orr.w	r2, r2, #32
 800268a:	645a      	str	r2, [r3, #68]	; 0x44
 800268c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800268e:	f002 0220 	and.w	r2, r2, #32
 8002692:	9204      	str	r2, [sp, #16]
 8002694:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002698:	f042 0204 	orr.w	r2, r2, #4
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	9305      	str	r3, [sp, #20]
 80026a8:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e9cd 1308 	strd	r1, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80026b6:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80026ba:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026bc:	e7cf      	b.n	800265e <HAL_UART_MspInit+0x96>
 80026be:	bf00      	nop
 80026c0:	40011000 	.word	0x40011000
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020000 	.word	0x40020000
 80026d0:	40011400 	.word	0x40011400
 80026d4:	40020800 	.word	0x40020800

080026d8 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80026d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80026da:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80026dc:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80026de:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 80026e0:	4b29      	ldr	r3, [pc, #164]	; (8002788 <HAL_SDRAM_MspInit+0xb0>)
 80026e2:	681e      	ldr	r6, [r3, #0]
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d14d      	bne.n	8002784 <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
 80026e8:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026ec:	2503      	movs	r5, #3
 80026ee:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 80026f0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026f2:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80026f4:	4b25      	ldr	r3, [pc, #148]	; (800278c <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026f6:	4826      	ldr	r0, [pc, #152]	; (8002790 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80026f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	639a      	str	r2, [r3, #56]	; 0x38
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800270e:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002716:	f002 fae7 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800271a:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800271e:	a901      	add	r1, sp, #4
 8002720:	481c      	ldr	r0, [pc, #112]	; (8002794 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002722:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002728:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800272c:	f002 fadc 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002730:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002734:	a901      	add	r1, sp, #4
 8002736:	4818      	ldr	r0, [pc, #96]	; (8002798 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002738:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002742:	f002 fad1 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002746:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800274a:	a901      	add	r1, sp, #4
 800274c:	4813      	ldr	r0, [pc, #76]	; (800279c <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800274e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002754:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002758:	f002 fac6 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800275c:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800275e:	a901      	add	r1, sp, #4
 8002760:	480f      	ldr	r0, [pc, #60]	; (80027a0 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002762:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002768:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800276c:	f002 fabc 	bl	8004ce8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002770:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002772:	a901      	add	r1, sp, #4
 8002774:	480b      	ldr	r0, [pc, #44]	; (80027a4 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002776:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002780:	f002 fab2 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002784:	b007      	add	sp, #28
 8002786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002788:	20000ac8 	.word	0x20000ac8
 800278c:	40023800 	.word	0x40023800
 8002790:	40021000 	.word	0x40021000
 8002794:	40021800 	.word	0x40021800
 8002798:	40020c00 	.word	0x40020c00
 800279c:	40021400 	.word	0x40021400
 80027a0:	40021c00 	.word	0x40021c00
 80027a4:	40020800 	.word	0x40020800

080027a8 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80027a8:	6802      	ldr	r2, [r0, #0]
 80027aa:	4b32      	ldr	r3, [pc, #200]	; (8002874 <HAL_SAI_MspInit+0xcc>)
 80027ac:	429a      	cmp	r2, r3
{
 80027ae:	b570      	push	{r4, r5, r6, lr}
 80027b0:	4605      	mov	r5, r0
 80027b2:	b088      	sub	sp, #32
    if(hsai->Instance==SAI2_Block_A)
 80027b4:	d13b      	bne.n	800282e <HAL_SAI_MspInit+0x86>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80027b6:	4830      	ldr	r0, [pc, #192]	; (8002878 <HAL_SAI_MspInit+0xd0>)
 80027b8:	6803      	ldr	r3, [r0, #0]
 80027ba:	b94b      	cbnz	r3, 80027d0 <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80027bc:	4a2f      	ldr	r2, [pc, #188]	; (800287c <HAL_SAI_MspInit+0xd4>)
 80027be:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80027c0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80027c4:	6451      	str	r1, [r2, #68]	; 0x44
 80027c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027c8:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80027cc:	9201      	str	r2, [sp, #4]
 80027ce:	9a01      	ldr	r2, [sp, #4]
    }
    SAI2_client ++;
 80027d0:	3301      	adds	r3, #1
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d2:	21f0      	movs	r1, #240	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 80027d6:	4c2a      	ldr	r4, [pc, #168]	; (8002880 <HAL_SAI_MspInit+0xd8>)
    SAI2_client ++;
 80027d8:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027dc:	4829      	ldr	r0, [pc, #164]	; (8002884 <HAL_SAI_MspInit+0xdc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80027e2:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027e4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80027e6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e8:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027ec:	f002 fa7c 	bl	8004ce8 <HAL_GPIO_Init>
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 80027f0:	4825      	ldr	r0, [pc, #148]	; (8002888 <HAL_SAI_MspInit+0xe0>)
 80027f2:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027f6:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80027fa:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 80027fe:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002802:	2340      	movs	r3, #64	; 0x40
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8002804:	4620      	mov	r0, r4
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002806:	e9c4 3602 	strd	r3, r6, [r4, #8]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800280a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800280e:	e9c4 c304 	strd	ip, r3, [r4, #16]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8002812:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002816:	e9c4 6608 	strd	r6, r6, [r4, #32]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800281a:	e9c4 e306 	strd	lr, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800281e:	f001 fee5 	bl	80045ec <HAL_DMA_Init>
 8002822:	b108      	cbz	r0, 8002828 <HAL_SAI_MspInit+0x80>
    {
      Error_Handler();
 8002824:	f7ff f9b8 	bl	8001b98 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8002828:	672c      	str	r4, [r5, #112]	; 0x70
 800282a:	63a5      	str	r5, [r4, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 800282c:	66ec      	str	r4, [r5, #108]	; 0x6c

    }
    if(hsai->Instance==SAI2_Block_B)
 800282e:	682a      	ldr	r2, [r5, #0]
 8002830:	4b16      	ldr	r3, [pc, #88]	; (800288c <HAL_SAI_MspInit+0xe4>)
 8002832:	429a      	cmp	r2, r3
 8002834:	d11c      	bne.n	8002870 <HAL_SAI_MspInit+0xc8>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002836:	4810      	ldr	r0, [pc, #64]	; (8002878 <HAL_SAI_MspInit+0xd0>)
 8002838:	6803      	ldr	r3, [r0, #0]
 800283a:	b94b      	cbnz	r3, 8002850 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800283c:	4a0f      	ldr	r2, [pc, #60]	; (800287c <HAL_SAI_MspInit+0xd4>)
 800283e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002840:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002844:	6451      	str	r1, [r2, #68]	; 0x44
 8002846:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002848:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800284c:	9202      	str	r2, [sp, #8]
 800284e:	9a02      	ldr	r2, [sp, #8]
      }
    SAI2_client ++;
 8002850:	3301      	adds	r3, #1

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002856:	a903      	add	r1, sp, #12
    SAI2_client ++;
 8002858:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800285c:	480c      	ldr	r0, [pc, #48]	; (8002890 <HAL_SAI_MspInit+0xe8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002864:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002868:	230a      	movs	r3, #10
 800286a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800286c:	f002 fa3c 	bl	8004ce8 <HAL_GPIO_Init>

    }
}
 8002870:	b008      	add	sp, #32
 8002872:	bd70      	pop	{r4, r5, r6, pc}
 8002874:	40015c04 	.word	0x40015c04
 8002878:	20000acc 	.word	0x20000acc
 800287c:	40023800 	.word	0x40023800
 8002880:	20000364 	.word	0x20000364
 8002884:	40022000 	.word	0x40022000
 8002888:	40026470 	.word	0x40026470
 800288c:	40015c24 	.word	0x40015c24
 8002890:	40021800 	.word	0x40021800

08002894 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002894:	4b21      	ldr	r3, [pc, #132]	; (800291c <HAL_InitTick+0x88>)
 8002896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002898:	f042 0210 	orr.w	r2, r2, #16
{
 800289c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 800289e:	641a      	str	r2, [r3, #64]	; 0x40
{
 80028a0:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 80028a4:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028a6:	a901      	add	r1, sp, #4
 80028a8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028b2:	f003 feb9 	bl	8006628 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80028b6:	9b06      	ldr	r3, [sp, #24]
 80028b8:	bb4b      	cbnz	r3, 800290e <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80028ba:	f003 fe95 	bl	80065e8 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80028be:	4e18      	ldr	r6, [pc, #96]	; (8002920 <HAL_InitTick+0x8c>)
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_InitTick+0x90>)
 80028c2:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80028c4:	f240 33e7 	movw	r3, #999	; 0x3e7
 80028c8:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <HAL_InitTick+0x94>)
 80028cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d0:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 80028d2:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 80028d4:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028da:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028dc:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 80028de:	f005 fcaf 	bl	8008240 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80028e2:	4604      	mov	r4, r0
 80028e4:	b980      	cbnz	r0, 8002908 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80028e6:	4630      	mov	r0, r6
 80028e8:	f005 fb52 	bl	8007f90 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80028ec:	4604      	mov	r4, r0
 80028ee:	b958      	cbnz	r0, 8002908 <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028f0:	2036      	movs	r0, #54	; 0x36
 80028f2:	f001 fd6b 	bl	80043cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f6:	2d0f      	cmp	r5, #15
 80028f8:	d80d      	bhi.n	8002916 <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80028fa:	4622      	mov	r2, r4
 80028fc:	4629      	mov	r1, r5
 80028fe:	2036      	movs	r0, #54	; 0x36
 8002900:	f001 fd32 	bl	8004368 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002904:	4b09      	ldr	r3, [pc, #36]	; (800292c <HAL_InitTick+0x98>)
 8002906:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8002908:	4620      	mov	r0, r4
 800290a:	b008      	add	sp, #32
 800290c:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800290e:	f003 fe6b 	bl	80065e8 <HAL_RCC_GetPCLK1Freq>
 8002912:	0040      	lsls	r0, r0, #1
 8002914:	e7d3      	b.n	80028be <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8002916:	2401      	movs	r4, #1
 8002918:	e7f6      	b.n	8002908 <HAL_InitTick+0x74>
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	20000ad0 	.word	0x20000ad0
 8002924:	40001000 	.word	0x40001000
 8002928:	000f4240 	.word	0x000f4240
 800292c:	2000001c 	.word	0x2000001c

08002930 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002930:	e7fe      	b.n	8002930 <NMI_Handler>

08002932 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002932:	e7fe      	b.n	8002932 <HardFault_Handler>

08002934 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002934:	e7fe      	b.n	8002934 <MemManage_Handler>

08002936 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002936:	e7fe      	b.n	8002936 <BusFault_Handler>

08002938 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002938:	e7fe      	b.n	8002938 <UsageFault_Handler>

0800293a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800293a:	4770      	bx	lr

0800293c <DebugMon_Handler>:
 800293c:	4770      	bx	lr

0800293e <PendSV_Handler>:
 800293e:	4770      	bx	lr

08002940 <SysTick_Handler>:
 8002940:	4770      	bx	lr
	...

08002944 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002944:	4801      	ldr	r0, [pc, #4]	; (800294c <DMA1_Stream6_IRQHandler+0x8>)
 8002946:	f001 bf39 	b.w	80047bc <HAL_DMA_IRQHandler>
 800294a:	bf00      	nop
 800294c:	20000304 	.word	0x20000304

08002950 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	readWAV();
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002950:	4801      	ldr	r0, [pc, #4]	; (8002958 <TIM2_IRQHandler+0x8>)
 8002952:	f005 bb5f 	b.w	8008014 <HAL_TIM_IRQHandler>
 8002956:	bf00      	nop
 8002958:	20000888 	.word	0x20000888

0800295c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//	msecint();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800295c:	4801      	ldr	r0, [pc, #4]	; (8002964 <TIM3_IRQHandler+0x8>)
 800295e:	f005 bb59 	b.w	8008014 <HAL_TIM_IRQHandler>
 8002962:	bf00      	nop
 8002964:	200008d4 	.word	0x200008d4

08002968 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002968:	4801      	ldr	r0, [pc, #4]	; (8002970 <TIM6_DAC_IRQHandler+0x8>)
 800296a:	f005 bb53 	b.w	8008014 <HAL_TIM_IRQHandler>
 800296e:	bf00      	nop
 8002970:	20000ad0 	.word	0x20000ad0

08002974 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8002974:	4801      	ldr	r0, [pc, #4]	; (800297c <DMA2_Stream4_IRQHandler+0x8>)
 8002976:	f001 bf21 	b.w	80047bc <HAL_DMA_IRQHandler>
 800297a:	bf00      	nop
 800297c:	20000364 	.word	0x20000364

08002980 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002980:	4801      	ldr	r0, [pc, #4]	; (8002988 <LTDC_IRQHandler+0x8>)
 8002982:	f002 bfba 	b.w	80058fa <HAL_LTDC_IRQHandler>
 8002986:	bf00      	nop
 8002988:	2000046c 	.word	0x2000046c

0800298c <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800298c:	4801      	ldr	r0, [pc, #4]	; (8002994 <DMA2D_IRQHandler+0x8>)
 800298e:	f002 b8d9 	b.w	8004b44 <HAL_DMA2D_IRQHandler>
 8002992:	bf00      	nop
 8002994:	200002c4 	.word	0x200002c4

08002998 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002998:	2001      	movs	r0, #1
 800299a:	4770      	bx	lr

0800299c <_kill>:

int _kill(int pid, int sig)
{
 800299c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800299e:	f007 fc5d 	bl	800a25c <__errno>
 80029a2:	2316      	movs	r3, #22
 80029a4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80029a6:	f04f 30ff 	mov.w	r0, #4294967295
 80029aa:	bd08      	pop	{r3, pc}

080029ac <_exit>:

void _exit (int status)
{
 80029ac:	b508      	push	{r3, lr}
  errno = EINVAL;
 80029ae:	f007 fc55 	bl	800a25c <__errno>
 80029b2:	2316      	movs	r3, #22
 80029b4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80029b6:	e7fe      	b.n	80029b6 <_exit+0xa>

080029b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029b8:	b570      	push	{r4, r5, r6, lr}
 80029ba:	460d      	mov	r5, r1
 80029bc:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029be:	460e      	mov	r6, r1
 80029c0:	1b73      	subs	r3, r6, r5
 80029c2:	429c      	cmp	r4, r3
 80029c4:	dc01      	bgt.n	80029ca <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80029c6:	4620      	mov	r0, r4
 80029c8:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80029ca:	f3af 8000 	nop.w
 80029ce:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d2:	e7f5      	b.n	80029c0 <_read+0x8>

080029d4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295
 80029d8:	4770      	bx	lr

080029da <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80029da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 80029de:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80029e0:	604b      	str	r3, [r1, #4]
}
 80029e2:	4770      	bx	lr

080029e4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80029e4:	2001      	movs	r0, #1
 80029e6:	4770      	bx	lr

080029e8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80029e8:	2000      	movs	r0, #0
 80029ea:	4770      	bx	lr

080029ec <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029ec:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <_sbrk+0x30>)
{
 80029ee:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80029f0:	6811      	ldr	r1, [r2, #0]
{
 80029f2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80029f4:	b909      	cbnz	r1, 80029fa <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80029f6:	490a      	ldr	r1, [pc, #40]	; (8002a20 <_sbrk+0x34>)
 80029f8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029fa:	6810      	ldr	r0, [r2, #0]
 80029fc:	4909      	ldr	r1, [pc, #36]	; (8002a24 <_sbrk+0x38>)
 80029fe:	4c0a      	ldr	r4, [pc, #40]	; (8002a28 <_sbrk+0x3c>)
 8002a00:	4403      	add	r3, r0
 8002a02:	1b09      	subs	r1, r1, r4
 8002a04:	428b      	cmp	r3, r1
 8002a06:	d906      	bls.n	8002a16 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002a08:	f007 fc28 	bl	800a25c <__errno>
 8002a0c:	230c      	movs	r3, #12
 8002a0e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002a14:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002a16:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002a18:	e7fc      	b.n	8002a14 <_sbrk+0x28>
 8002a1a:	bf00      	nop
 8002a1c:	20000b1c 	.word	0x20000b1c
 8002a20:	200011c0 	.word	0x200011c0
 8002a24:	20050000 	.word	0x20050000
 8002a28:	00000400 	.word	0x00000400

08002a2c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a2c:	4a03      	ldr	r2, [pc, #12]	; (8002a3c <SystemInit+0x10>)
 8002a2e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a44:	480d      	ldr	r0, [pc, #52]	; (8002a7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a46:	490e      	ldr	r1, [pc, #56]	; (8002a80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a48:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a4c:	e002      	b.n	8002a54 <LoopCopyDataInit>

08002a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a52:	3304      	adds	r3, #4

08002a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a58:	d3f9      	bcc.n	8002a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a5a:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a5c:	4c0b      	ldr	r4, [pc, #44]	; (8002a8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a60:	e001      	b.n	8002a66 <LoopFillZerobss>

08002a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a64:	3204      	adds	r2, #4

08002a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a68:	d3fb      	bcc.n	8002a62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a6a:	f7ff ffdf 	bl	8002a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a6e:	f007 fbfb 	bl	800a268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a72:	f7fe fb17 	bl	80010a4 <main>
  bx  lr    
 8002a76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a78:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a80:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002a84:	0800c824 	.word	0x0800c824
  ldr r2, =_sbss
 8002a88:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002a8c:	200011c0 	.word	0x200011c0

08002a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a90:	e7fe      	b.n	8002a90 <ADC_IRQHandler>
	...

08002a94 <ov5640_Init>:
  * @param  resolution: Camera resolution
  * @retval None
  */
#include <stdio.h>
void ov5640_Init(uint16_t DeviceAddr, uint32_t resolution)
{
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a96:	4604      	mov	r4, r0
 8002a98:	4f22      	ldr	r7, [pc, #136]	; (8002b24 <ov5640_Init+0x90>)
  uint32_t index = 0;
  printf("START\r\n");
  for(index=0; index< (sizeof(OV5640_Init)/4) ; index++)
 8002a9a:	2600      	movs	r6, #0
  printf("START\r\n");
 8002a9c:	4822      	ldr	r0, [pc, #136]	; (8002b28 <ov5640_Init+0x94>)
  {
    CAMERA_IO_Write(DeviceAddr, OV5640_Init[index][0], OV5640_Init[index][1]);
 8002a9e:	b2e4      	uxtb	r4, r4
{
 8002aa0:	460d      	mov	r5, r1
  printf("START\r\n");
 8002aa2:	f007 faa9 	bl	8009ff8 <puts>
  for(index=0; index< (sizeof(OV5640_Init)/4) ; index++)
 8002aa6:	3601      	adds	r6, #1
    CAMERA_IO_Write(DeviceAddr, OV5640_Init[index][0], OV5640_Init[index][1]);
 8002aa8:	887a      	ldrh	r2, [r7, #2]
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f837 1b04 	ldrh.w	r1, [r7], #4
 8002ab0:	f000 fb3e 	bl	8003130 <CAMERA_IO_Write>
  for(index=0; index< (sizeof(OV5640_Init)/4) ; index++)
 8002ab4:	2efe      	cmp	r6, #254	; 0xfe
 8002ab6:	d1f6      	bne.n	8002aa6 <ov5640_Init+0x12>
  }

  /* Initialize OV5640 */
  switch (resolution)
 8002ab8:	2d03      	cmp	r5, #3
 8002aba:	d80d      	bhi.n	8002ad8 <ov5640_Init+0x44>
 8002abc:	e8df f005 	tbb	[pc, r5]
 8002ac0:	25190d02 	.word	0x25190d02
 8002ac4:	4e19      	ldr	r6, [pc, #100]	; (8002b2c <ov5640_Init+0x98>)
  {
  case CAMERA_R160x120:
    {
      for(index=0; index<(sizeof(OV5640_QQVGA)/4); index++)
 8002ac6:	3501      	adds	r5, #1
      {
        CAMERA_IO_Write(DeviceAddr, OV5640_QQVGA[index][0], OV5640_QQVGA[index][1]);
 8002ac8:	8872      	ldrh	r2, [r6, #2]
 8002aca:	4620      	mov	r0, r4
 8002acc:	f836 1b04 	ldrh.w	r1, [r6], #4
 8002ad0:	f000 fb2e 	bl	8003130 <CAMERA_IO_Write>
      for(index=0; index<(sizeof(OV5640_QQVGA)/4); index++)
 8002ad4:	2d07      	cmp	r5, #7
 8002ad6:	d1f6      	bne.n	8002ac6 <ov5640_Init+0x32>
  default:
    {
      break;
    }
  }
}
 8002ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ada:	4e15      	ldr	r6, [pc, #84]	; (8002b30 <ov5640_Init+0x9c>)
      for(index=0; index< (sizeof(OV5640_QVGA)/4); index++)
 8002adc:	2500      	movs	r5, #0
 8002ade:	3501      	adds	r5, #1
        CAMERA_IO_Write(DeviceAddr, OV5640_QVGA[index][0], OV5640_QVGA[index][1]);
 8002ae0:	8872      	ldrh	r2, [r6, #2]
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f836 1b04 	ldrh.w	r1, [r6], #4
 8002ae8:	f000 fb22 	bl	8003130 <CAMERA_IO_Write>
      for(index=0; index< (sizeof(OV5640_QVGA)/4); index++)
 8002aec:	2d07      	cmp	r5, #7
 8002aee:	d1f6      	bne.n	8002ade <ov5640_Init+0x4a>
 8002af0:	e7f2      	b.n	8002ad8 <ov5640_Init+0x44>
 8002af2:	4e10      	ldr	r6, [pc, #64]	; (8002b34 <ov5640_Init+0xa0>)
      for(index=0; index<(sizeof(OV5640_480x272)/4); index++)
 8002af4:	2500      	movs	r5, #0
 8002af6:	3501      	adds	r5, #1
        CAMERA_IO_Write(DeviceAddr, OV5640_480x272[index][0], OV5640_480x272[index][1]);
 8002af8:	8872      	ldrh	r2, [r6, #2]
 8002afa:	4620      	mov	r0, r4
 8002afc:	f836 1b04 	ldrh.w	r1, [r6], #4
 8002b00:	f000 fb16 	bl	8003130 <CAMERA_IO_Write>
      for(index=0; index<(sizeof(OV5640_480x272)/4); index++)
 8002b04:	2d07      	cmp	r5, #7
 8002b06:	d1f6      	bne.n	8002af6 <ov5640_Init+0x62>
 8002b08:	e7e6      	b.n	8002ad8 <ov5640_Init+0x44>
 8002b0a:	4e0b      	ldr	r6, [pc, #44]	; (8002b38 <ov5640_Init+0xa4>)
      for(index=0; index<(sizeof(OV5640_VGA)/4); index++)
 8002b0c:	2500      	movs	r5, #0
 8002b0e:	3501      	adds	r5, #1
        CAMERA_IO_Write(DeviceAddr, OV5640_VGA[index][0], OV5640_VGA[index][1]);
 8002b10:	8872      	ldrh	r2, [r6, #2]
 8002b12:	4620      	mov	r0, r4
 8002b14:	f836 1b04 	ldrh.w	r1, [r6], #4
 8002b18:	f000 fb0a 	bl	8003130 <CAMERA_IO_Write>
      for(index=0; index<(sizeof(OV5640_VGA)/4); index++)
 8002b1c:	2d07      	cmp	r5, #7
 8002b1e:	d1f6      	bne.n	8002b0e <ov5640_Init+0x7a>
 8002b20:	e7da      	b.n	8002ad8 <ov5640_Init+0x44>
 8002b22:	bf00      	nop
 8002b24:	0800c01e 	.word	0x0800c01e
 8002b28:	0800bfea 	.word	0x0800bfea
 8002b2c:	0800c416 	.word	0x0800c416
 8002b30:	0800c432 	.word	0x0800c432
 8002b34:	0800c002 	.word	0x0800c002
 8002b38:	0800c44e 	.word	0x0800c44e

08002b3c <ov5640_ReadID>:
  * @brief  Read the OV5640 Camera identity.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval the OV5640 ID
  */
uint16_t ov5640_ReadID(uint16_t DeviceAddr)
{
 8002b3c:	b538      	push	{r3, r4, r5, lr}
 8002b3e:	4605      	mov	r5, r0
  uint16_t read_val = 0;

  /* Initialize I2C */
  CAMERA_IO_Init();
 8002b40:	f000 faf0 	bl	8003124 <CAMERA_IO_Init>

  /* Prepare the camera to be configured */
  CAMERA_IO_Write(DeviceAddr, 0x3008, 0x80);
 8002b44:	2280      	movs	r2, #128	; 0x80
 8002b46:	f243 0108 	movw	r1, #12296	; 0x3008
 8002b4a:	b2ed      	uxtb	r5, r5
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	f000 faef 	bl	8003130 <CAMERA_IO_Write>
  CAMERA_Delay(500);
 8002b52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b56:	f000 fb13 	bl	8003180 <CAMERA_Delay>

  read_val = CAMERA_IO_Read(DeviceAddr, 0x300A);
 8002b5a:	f243 010a 	movw	r1, #12298	; 0x300a
 8002b5e:	4628      	mov	r0, r5
 8002b60:	f000 faf8 	bl	8003154 <CAMERA_IO_Read>
  read_val = read_val << 8;
  read_val |= CAMERA_IO_Read(DeviceAddr, 0x300B);
 8002b64:	f243 010b 	movw	r1, #12299	; 0x300b
  read_val = read_val << 8;
 8002b68:	0204      	lsls	r4, r0, #8
  read_val |= CAMERA_IO_Read(DeviceAddr, 0x300B);
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	f000 faf2 	bl	8003154 <CAMERA_IO_Read>
  read_val = read_val << 8;
 8002b70:	b2a4      	uxth	r4, r4
  read_val |= CAMERA_IO_Read(DeviceAddr, 0x300B);
 8002b72:	4320      	orrs	r0, r4
  /* Get the camera ID */
  return read_val;
}
 8002b74:	b280      	uxth	r0, r0
 8002b76:	bd38      	pop	{r3, r4, r5, pc}

08002b78 <OV5640_SetEffect>:
  switch(Effect)
 8002b78:	2910      	cmp	r1, #16
{
 8002b7a:	b513      	push	{r0, r1, r4, lr}
 8002b7c:	460c      	mov	r4, r1
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0x7F);
 8002b7e:	b2c0      	uxtb	r0, r0
  switch(Effect)
 8002b80:	f000 8094 	beq.w	8002cac <OV5640_SetEffect+0x134>
 8002b84:	d80a      	bhi.n	8002b9c <OV5640_SetEffect+0x24>
 8002b86:	1e4c      	subs	r4, r1, #1
 8002b88:	2c07      	cmp	r4, #7
 8002b8a:	d811      	bhi.n	8002bb0 <OV5640_SetEffect+0x38>
 8002b8c:	2c07      	cmp	r4, #7
 8002b8e:	d80f      	bhi.n	8002bb0 <OV5640_SetEffect+0x38>
 8002b90:	e8df f004 	tbb	[pc, r4]
 8002b94:	640e5035 	.word	0x640e5035
 8002b98:	780e0e0e 	.word	0x780e0e0e
 8002b9c:	2980      	cmp	r1, #128	; 0x80
 8002b9e:	f000 80b1 	beq.w	8002d04 <OV5640_SetEffect+0x18c>
 8002ba2:	d80d      	bhi.n	8002bc0 <OV5640_SetEffect+0x48>
 8002ba4:	2920      	cmp	r1, #32
 8002ba6:	f000 8095 	beq.w	8002cd4 <OV5640_SetEffect+0x15c>
 8002baa:	2940      	cmp	r1, #64	; 0x40
 8002bac:	f000 809c 	beq.w	8002ce8 <OV5640_SetEffect+0x170>
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0x7F);
 8002bb0:	227f      	movs	r2, #127	; 0x7f
 8002bb2:	f245 0101 	movw	r1, #20481	; 0x5001
 8002bb6:	9001      	str	r0, [sp, #4]
 8002bb8:	f000 faba 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x00);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	e090      	b.n	8002ce2 <OV5640_SetEffect+0x16a>
  switch(Effect)
 8002bc0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002bc4:	d1f4      	bne.n	8002bb0 <OV5640_SetEffect+0x38>
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002bc6:	22ff      	movs	r2, #255	; 0xff
 8002bc8:	f245 0101 	movw	r1, #20481	; 0x5001
 8002bcc:	9001      	str	r0, [sp, #4]
 8002bce:	f000 faaf 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x06);
 8002bd2:	2206      	movs	r2, #6
 8002bd4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002bd8:	9801      	ldr	r0, [sp, #4]
 8002bda:	f000 faa9 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x40);
 8002bde:	2240      	movs	r2, #64	; 0x40
 8002be0:	f245 5183 	movw	r1, #21891	; 0x5583
 8002be4:	9801      	ldr	r0, [sp, #4]
 8002be6:	f000 faa3 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0x10);
 8002bea:	2210      	movs	r2, #16
 8002bec:	f245 5184 	movw	r1, #21892	; 0x5584
 8002bf0:	9801      	ldr	r0, [sp, #4]
 8002bf2:	f000 fa9d 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5003, 0x09);
 8002bf6:	2209      	movs	r2, #9
 8002bf8:	f245 0103 	movw	r1, #20483	; 0x5003
 8002bfc:	e014      	b.n	8002c28 <OV5640_SetEffect+0xb0>
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002bfe:	22ff      	movs	r2, #255	; 0xff
 8002c00:	f245 0101 	movw	r1, #20481	; 0x5001
 8002c04:	9001      	str	r0, [sp, #4]
 8002c06:	f000 fa93 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 8002c0a:	2218      	movs	r2, #24
 8002c0c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002c10:	9801      	ldr	r0, [sp, #4]
 8002c12:	f000 fa8d 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0xA0);
 8002c16:	22a0      	movs	r2, #160	; 0xa0
 8002c18:	f245 5183 	movw	r1, #21891	; 0x5583
 8002c1c:	9801      	ldr	r0, [sp, #4]
 8002c1e:	f000 fa87 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0x40);
 8002c22:	2240      	movs	r2, #64	; 0x40
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0xF0);
 8002c24:	f245 5184 	movw	r1, #21892	; 0x5584
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x00);
 8002c28:	9801      	ldr	r0, [sp, #4]
}
 8002c2a:	b002      	add	sp, #8
 8002c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x00);
 8002c30:	f000 ba7e 	b.w	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002c34:	22ff      	movs	r2, #255	; 0xff
 8002c36:	f245 0101 	movw	r1, #20481	; 0x5001
 8002c3a:	9001      	str	r0, [sp, #4]
 8002c3c:	f000 fa78 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 8002c40:	2218      	movs	r2, #24
 8002c42:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002c46:	9801      	ldr	r0, [sp, #4]
 8002c48:	f000 fa72 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x80);
 8002c4c:	2280      	movs	r2, #128	; 0x80
 8002c4e:	f245 5183 	movw	r1, #21891	; 0x5583
 8002c52:	9801      	ldr	r0, [sp, #4]
 8002c54:	f000 fa6c 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0xC0);
 8002c58:	22c0      	movs	r2, #192	; 0xc0
 8002c5a:	e7e3      	b.n	8002c24 <OV5640_SetEffect+0xac>
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002c5c:	22ff      	movs	r2, #255	; 0xff
 8002c5e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002c62:	9001      	str	r0, [sp, #4]
 8002c64:	f000 fa64 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 8002c68:	2218      	movs	r2, #24
 8002c6a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002c6e:	9801      	ldr	r0, [sp, #4]
 8002c70:	f000 fa5e 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x60);
 8002c74:	2260      	movs	r2, #96	; 0x60
 8002c76:	f245 5183 	movw	r1, #21891	; 0x5583
 8002c7a:	9801      	ldr	r0, [sp, #4]
 8002c7c:	f000 fa58 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0x60);
 8002c80:	2260      	movs	r2, #96	; 0x60
 8002c82:	e7cf      	b.n	8002c24 <OV5640_SetEffect+0xac>
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002c84:	22ff      	movs	r2, #255	; 0xff
 8002c86:	f245 0101 	movw	r1, #20481	; 0x5001
 8002c8a:	9001      	str	r0, [sp, #4]
 8002c8c:	f000 fa50 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 8002c90:	2218      	movs	r2, #24
 8002c92:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002c96:	9801      	ldr	r0, [sp, #4]
 8002c98:	f000 fa4a 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x80);
 8002c9c:	2280      	movs	r2, #128	; 0x80
 8002c9e:	f245 5183 	movw	r1, #21891	; 0x5583
 8002ca2:	9801      	ldr	r0, [sp, #4]
 8002ca4:	f000 fa44 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0x80);
 8002ca8:	2280      	movs	r2, #128	; 0x80
 8002caa:	e7bb      	b.n	8002c24 <OV5640_SetEffect+0xac>
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002cac:	22ff      	movs	r2, #255	; 0xff
 8002cae:	f245 0101 	movw	r1, #20481	; 0x5001
 8002cb2:	9001      	str	r0, [sp, #4]
 8002cb4:	f000 fa3c 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 8002cb8:	2218      	movs	r2, #24
 8002cba:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002cbe:	9801      	ldr	r0, [sp, #4]
 8002cc0:	f000 fa36 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x40);
 8002cc4:	2240      	movs	r2, #64	; 0x40
 8002cc6:	f245 5183 	movw	r1, #21891	; 0x5583
 8002cca:	9801      	ldr	r0, [sp, #4]
 8002ccc:	f000 fa30 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0xA0);
 8002cd0:	22a0      	movs	r2, #160	; 0xa0
 8002cd2:	e7a7      	b.n	8002c24 <OV5640_SetEffect+0xac>
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002cd4:	22ff      	movs	r2, #255	; 0xff
 8002cd6:	f245 0101 	movw	r1, #20481	; 0x5001
 8002cda:	9001      	str	r0, [sp, #4]
 8002cdc:	f000 fa28 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x40);
 8002ce0:	2240      	movs	r2, #64	; 0x40
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x00);
 8002ce2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002ce6:	e79f      	b.n	8002c28 <OV5640_SetEffect+0xb0>
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002ce8:	22ff      	movs	r2, #255	; 0xff
 8002cea:	f245 0101 	movw	r1, #20481	; 0x5001
 8002cee:	9001      	str	r0, [sp, #4]
 8002cf0:	f000 fa1e 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x58);
 8002cf4:	2258      	movs	r2, #88	; 0x58
 8002cf6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002cfa:	9801      	ldr	r0, [sp, #4]
 8002cfc:	f000 fa18 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x40);
 8002d00:	4622      	mov	r2, r4
 8002d02:	e789      	b.n	8002c18 <OV5640_SetEffect+0xa0>
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002d04:	22ff      	movs	r2, #255	; 0xff
 8002d06:	f245 0101 	movw	r1, #20481	; 0x5001
 8002d0a:	9001      	str	r0, [sp, #4]
 8002d0c:	f000 fa10 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 8002d10:	2218      	movs	r2, #24
 8002d12:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002d16:	9801      	ldr	r0, [sp, #4]
 8002d18:	f000 fa0a 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0xF0);
 8002d1c:	22f0      	movs	r2, #240	; 0xf0
 8002d1e:	f245 5183 	movw	r1, #21891	; 0x5583
 8002d22:	9801      	ldr	r0, [sp, #4]
 8002d24:	f000 fa04 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0xF0);
 8002d28:	22f0      	movs	r2, #240	; 0xf0
 8002d2a:	e77b      	b.n	8002c24 <OV5640_SetEffect+0xac>

08002d2c <OV5640_SetBrightness>:
{
 8002d2c:	b513      	push	{r0, r1, r4, lr}
  CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002d2e:	b2c0      	uxtb	r0, r0
{
 8002d30:	460c      	mov	r4, r1
  CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002d32:	22ff      	movs	r2, #255	; 0xff
 8002d34:	f245 0101 	movw	r1, #20481	; 0x5001
 8002d38:	9001      	str	r0, [sp, #4]
 8002d3a:	f000 f9f9 	bl	8003130 <CAMERA_IO_Write>
  switch(Level)
 8002d3e:	2c10      	cmp	r4, #16
 8002d40:	9801      	ldr	r0, [sp, #4]
 8002d42:	d030      	beq.n	8002da6 <OV5640_SetBrightness+0x7a>
 8002d44:	d808      	bhi.n	8002d58 <OV5640_SetBrightness+0x2c>
 8002d46:	2c04      	cmp	r4, #4
 8002d48:	d80c      	bhi.n	8002d64 <OV5640_SetBrightness+0x38>
 8002d4a:	2c04      	cmp	r4, #4
 8002d4c:	d80a      	bhi.n	8002d64 <OV5640_SetBrightness+0x38>
 8002d4e:	e8df f004 	tbb	[pc, r4]
 8002d52:	2c2e      	.short	0x2c2e
 8002d54:	0911      	.short	0x0911
 8002d56:	2a          	.byte	0x2a
 8002d57:	00          	.byte	0x00
 8002d58:	2c40      	cmp	r4, #64	; 0x40
 8002d5a:	d026      	beq.n	8002daa <OV5640_SetBrightness+0x7e>
 8002d5c:	2c80      	cmp	r4, #128	; 0x80
 8002d5e:	d026      	beq.n	8002dae <OV5640_SetBrightness+0x82>
 8002d60:	2c20      	cmp	r4, #32
 8002d62:	d007      	beq.n	8002d74 <OV5640_SetBrightness+0x48>
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x00);
 8002d64:	2200      	movs	r2, #0
 8002d66:	f245 5187 	movw	r1, #21895	; 0x5587
 8002d6a:	9001      	str	r0, [sp, #4]
    Level = OV5640_BRIGHTNESS_LEVEL0;
 8002d6c:	2408      	movs	r4, #8
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x00);
 8002d6e:	f000 f9df 	bl	8003130 <CAMERA_IO_Write>
    break;
 8002d72:	e005      	b.n	8002d80 <OV5640_SetBrightness+0x54>
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x20);
 8002d74:	2220      	movs	r2, #32
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x40);
 8002d76:	f245 5187 	movw	r1, #21895	; 0x5587
 8002d7a:	9001      	str	r0, [sp, #4]
 8002d7c:	f000 f9d8 	bl	8003130 <CAMERA_IO_Write>
    Level = OV5640_BRIGHTNESS_LEVEL0;
 8002d80:	9801      	ldr	r0, [sp, #4]
  CAMERA_IO_Write(DeviceAddr, 0x5580, 0x04);
 8002d82:	2204      	movs	r2, #4
 8002d84:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002d88:	9001      	str	r0, [sp, #4]
 8002d8a:	f000 f9d1 	bl	8003130 <CAMERA_IO_Write>
  if(Level < OV5640_SATURATION_LEVEL1N)
 8002d8e:	2c0f      	cmp	r4, #15
 8002d90:	9801      	ldr	r0, [sp, #4]
    CAMERA_IO_Write(DeviceAddr, 0x5588, 0x09);
 8002d92:	f245 5188 	movw	r1, #21896	; 0x5588
    CAMERA_IO_Write(DeviceAddr, 0x5588, 0x01);
 8002d96:	bf94      	ite	ls
 8002d98:	2201      	movls	r2, #1
    CAMERA_IO_Write(DeviceAddr, 0x5588, 0x09);
 8002d9a:	2209      	movhi	r2, #9
}
 8002d9c:	b002      	add	sp, #8
 8002d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CAMERA_IO_Write(DeviceAddr, 0x5588, 0x09);
 8002da2:	f000 b9c5 	b.w	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x10);
 8002da6:	2210      	movs	r2, #16
 8002da8:	e7e5      	b.n	8002d76 <OV5640_SetBrightness+0x4a>
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x30);
 8002daa:	2230      	movs	r2, #48	; 0x30
 8002dac:	e7e3      	b.n	8002d76 <OV5640_SetBrightness+0x4a>
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x40);
 8002dae:	2240      	movs	r2, #64	; 0x40
 8002db0:	e7e1      	b.n	8002d76 <OV5640_SetBrightness+0x4a>

08002db2 <OV5640_SetContrast>:
{
 8002db2:	b538      	push	{r3, r4, r5, lr}
  CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002db4:	b2c4      	uxtb	r4, r0
{
 8002db6:	460d      	mov	r5, r1
  CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002db8:	22ff      	movs	r2, #255	; 0xff
 8002dba:	f245 0101 	movw	r1, #20481	; 0x5001
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f000 f9b6 	bl	8003130 <CAMERA_IO_Write>
  CAMERA_IO_Write(DeviceAddr, 0x5580, 0x04);
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f000 f9b0 	bl	8003130 <CAMERA_IO_Write>
  switch(Level)
 8002dd0:	2d10      	cmp	r5, #16
 8002dd2:	d043      	beq.n	8002e5c <OV5640_SetContrast+0xaa>
 8002dd4:	d808      	bhi.n	8002de8 <OV5640_SetContrast+0x36>
 8002dd6:	2d04      	cmp	r5, #4
 8002dd8:	d80c      	bhi.n	8002df4 <OV5640_SetContrast+0x42>
 8002dda:	2d04      	cmp	r5, #4
 8002ddc:	d80a      	bhi.n	8002df4 <OV5640_SetContrast+0x42>
 8002dde:	e8df f005 	tbb	[pc, r5]
 8002de2:	2511      	.short	0x2511
 8002de4:	092d      	.short	0x092d
 8002de6:	35          	.byte	0x35
 8002de7:	00          	.byte	0x00
 8002de8:	2d40      	cmp	r5, #64	; 0x40
 8002dea:	d047      	beq.n	8002e7c <OV5640_SetContrast+0xca>
 8002dec:	2d80      	cmp	r5, #128	; 0x80
 8002dee:	d04d      	beq.n	8002e8c <OV5640_SetContrast+0xda>
 8002df0:	2d20      	cmp	r5, #32
 8002df2:	d03b      	beq.n	8002e6c <OV5640_SetContrast+0xba>
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x20);
 8002df4:	2220      	movs	r2, #32
 8002df6:	f245 5186 	movw	r1, #21894	; 0x5586
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f000 f998 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x20);
 8002e00:	2220      	movs	r2, #32
 8002e02:	e006      	b.n	8002e12 <OV5640_SetContrast+0x60>
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x30);
 8002e04:	2230      	movs	r2, #48	; 0x30
 8002e06:	f245 5186 	movw	r1, #21894	; 0x5586
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f000 f990 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x30);
 8002e10:	2230      	movs	r2, #48	; 0x30
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x20);
 8002e12:	4620      	mov	r0, r4
 8002e14:	f245 5185 	movw	r1, #21893	; 0x5585
 8002e18:	f000 f98a 	bl	8003130 <CAMERA_IO_Write>
  CAMERA_IO_Write(DeviceAddr, 0x5588, 0x41);
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	2241      	movs	r2, #65	; 0x41
 8002e20:	f245 5188 	movw	r1, #21896	; 0x5588
}
 8002e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  CAMERA_IO_Write(DeviceAddr, 0x5588, 0x41);
 8002e28:	f000 b982 	b.w	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x2C);
 8002e2c:	222c      	movs	r2, #44	; 0x2c
 8002e2e:	f245 5186 	movw	r1, #21894	; 0x5586
 8002e32:	4620      	mov	r0, r4
 8002e34:	f000 f97c 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x2C);
 8002e38:	222c      	movs	r2, #44	; 0x2c
 8002e3a:	e7ea      	b.n	8002e12 <OV5640_SetContrast+0x60>
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x28);
 8002e3c:	2228      	movs	r2, #40	; 0x28
 8002e3e:	f245 5186 	movw	r1, #21894	; 0x5586
 8002e42:	4620      	mov	r0, r4
 8002e44:	f000 f974 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x28);
 8002e48:	2228      	movs	r2, #40	; 0x28
 8002e4a:	e7e2      	b.n	8002e12 <OV5640_SetContrast+0x60>
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x24);
 8002e4c:	2224      	movs	r2, #36	; 0x24
 8002e4e:	f245 5186 	movw	r1, #21894	; 0x5586
 8002e52:	4620      	mov	r0, r4
 8002e54:	f000 f96c 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x24);
 8002e58:	2224      	movs	r2, #36	; 0x24
 8002e5a:	e7da      	b.n	8002e12 <OV5640_SetContrast+0x60>
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x1C);
 8002e5c:	221c      	movs	r2, #28
 8002e5e:	f245 5186 	movw	r1, #21894	; 0x5586
 8002e62:	4620      	mov	r0, r4
 8002e64:	f000 f964 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x1C);
 8002e68:	221c      	movs	r2, #28
 8002e6a:	e7d2      	b.n	8002e12 <OV5640_SetContrast+0x60>
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x18);
 8002e6c:	2218      	movs	r2, #24
 8002e6e:	f245 5186 	movw	r1, #21894	; 0x5586
 8002e72:	4620      	mov	r0, r4
 8002e74:	f000 f95c 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x18);
 8002e78:	2218      	movs	r2, #24
 8002e7a:	e7ca      	b.n	8002e12 <OV5640_SetContrast+0x60>
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x14);
 8002e7c:	2214      	movs	r2, #20
 8002e7e:	f245 5186 	movw	r1, #21894	; 0x5586
 8002e82:	4620      	mov	r0, r4
 8002e84:	f000 f954 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x14);
 8002e88:	2214      	movs	r2, #20
 8002e8a:	e7c2      	b.n	8002e12 <OV5640_SetContrast+0x60>
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x10);
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	f245 5186 	movw	r1, #21894	; 0x5586
 8002e92:	4620      	mov	r0, r4
 8002e94:	f000 f94c 	bl	8003130 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x10);
 8002e98:	2210      	movs	r2, #16
 8002e9a:	e7ba      	b.n	8002e12 <OV5640_SetContrast+0x60>

08002e9c <ov5640_Config>:
  */
static uint32_t ov5640_ConvertValue(uint32_t feature, uint32_t value)
{
  uint32_t ret = 0;

  switch(feature)
 8002e9c:	2901      	cmp	r1, #1
{
 8002e9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ea0:	460c      	mov	r4, r1
  switch(feature)
 8002ea2:	d00a      	beq.n	8002eba <ov5640_Config+0x1e>
 8002ea4:	2903      	cmp	r1, #3
 8002ea6:	d00f      	beq.n	8002ec8 <ov5640_Config+0x2c>
 8002ea8:	b999      	cbnz	r1, 8002ed2 <ov5640_Config+0x36>
      }
      break;
    }
  case CAMERA_CONTRAST_BRIGHTNESS:
    {
      switch(value)
 8002eaa:	2a09      	cmp	r2, #9
 8002eac:	d82b      	bhi.n	8002f06 <ov5640_Config+0x6a>
 8002eae:	4919      	ldr	r1, [pc, #100]	; (8002f14 <ov5640_Config+0x78>)
 8002eb0:	5c89      	ldrb	r1, [r1, r2]
 8002eb2:	2b09      	cmp	r3, #9
 8002eb4:	d911      	bls.n	8002eda <ov5640_Config+0x3e>
        }
      }
      break;
    default:
      {
        ret = 0;
 8002eb6:	2508      	movs	r5, #8
 8002eb8:	e012      	b.n	8002ee0 <ov5640_Config+0x44>
      switch(value)
 8002eba:	2a02      	cmp	r2, #2
 8002ebc:	d825      	bhi.n	8002f0a <ov5640_Config+0x6e>
 8002ebe:	4916      	ldr	r1, [pc, #88]	; (8002f18 <ov5640_Config+0x7c>)
 8002ec0:	5c89      	ldrb	r1, [r1, r2]
      switch(value)
 8002ec2:	2b09      	cmp	r3, #9
 8002ec4:	d909      	bls.n	8002eda <ov5640_Config+0x3e>
 8002ec6:	e019      	b.n	8002efc <ov5640_Config+0x60>
      switch(value)
 8002ec8:	3a01      	subs	r2, #1
 8002eca:	2a03      	cmp	r2, #3
 8002ecc:	d81d      	bhi.n	8002f0a <ov5640_Config+0x6e>
 8002ece:	4913      	ldr	r1, [pc, #76]	; (8002f1c <ov5640_Config+0x80>)
 8002ed0:	e7f6      	b.n	8002ec0 <ov5640_Config+0x24>
      switch(value)
 8002ed2:	2b09      	cmp	r3, #9
        ret = 0;
 8002ed4:	f04f 0100 	mov.w	r1, #0
 8002ed8:	d80c      	bhi.n	8002ef4 <ov5640_Config+0x58>
 8002eda:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <ov5640_Config+0x78>)
 8002edc:	5cd5      	ldrb	r5, [r2, r3]
  switch(feature)
 8002ede:	b94c      	cbnz	r4, 8002ef4 <ov5640_Config+0x58>
      OV5640_SetContrast(DeviceAddr, value_tmp);
 8002ee0:	9001      	str	r0, [sp, #4]
 8002ee2:	f7ff ff66 	bl	8002db2 <OV5640_SetContrast>
      OV5640_SetBrightness(DeviceAddr, br_value);   
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	9801      	ldr	r0, [sp, #4]
}
 8002eea:	b003      	add	sp, #12
 8002eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      OV5640_SetBrightness(DeviceAddr, br_value);   
 8002ef0:	f7ff bf1c 	b.w	8002d2c <OV5640_SetBrightness>
  switch(feature)
 8002ef4:	f024 0402 	bic.w	r4, r4, #2
 8002ef8:	2c01      	cmp	r4, #1
 8002efa:	d108      	bne.n	8002f0e <ov5640_Config+0x72>
}
 8002efc:	b003      	add	sp, #12
 8002efe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      OV5640_SetEffect(DeviceAddr, value_tmp);
 8002f02:	f7ff be39 	b.w	8002b78 <OV5640_SetEffect>
  switch(feature)
 8002f06:	2108      	movs	r1, #8
 8002f08:	e7d3      	b.n	8002eb2 <ov5640_Config+0x16>
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	e7d9      	b.n	8002ec2 <ov5640_Config+0x26>
}
 8002f0e:	b003      	add	sp, #12
 8002f10:	bd30      	pop	{r4, r5, pc}
 8002f12:	bf00      	nop
 8002f14:	0800bff4 	.word	0x0800bff4
 8002f18:	0800bff1 	.word	0x0800bff1
 8002f1c:	0800bffe 	.word	0x0800bffe

08002f20 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002f20:	b570      	push	{r4, r5, r6, lr}
 8002f22:	b08a      	sub	sp, #40	; 0x28
 8002f24:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002f26:	f002 fba9 	bl	800567c <HAL_I2C_GetState>
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	f040 8096 	bne.w	800305c <I2Cx_Init+0x13c>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002f30:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <I2Cx_Init+0x140>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8002f32:	2600      	movs	r6, #0
 8002f34:	4c4b      	ldr	r4, [pc, #300]	; (8003064 <I2Cx_Init+0x144>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002f36:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 8002f38:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002f3a:	bf0c      	ite	eq
 8002f3c:	4a4a      	ldreq	r2, [pc, #296]	; (8003068 <I2Cx_Init+0x148>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002f3e:	4a4b      	ldrne	r2, [pc, #300]	; (800306c <I2Cx_Init+0x14c>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002f40:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002f42:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
 8002f44:	4a4a      	ldr	r2, [pc, #296]	; (8003070 <I2Cx_Init+0x150>)
 8002f46:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002f4a:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002f4e:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002f52:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002f56:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002f58:	d143      	bne.n	8002fe2 <I2Cx_Init+0xc2>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002f5e:	2080      	movs	r0, #128	; 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002f60:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f64:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002f66:	6323      	str	r3, [r4, #48]	; 0x30
 8002f68:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002f6a:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002f74:	2312      	movs	r3, #18
 8002f76:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002f7a:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f7c:	483d      	ldr	r0, [pc, #244]	; (8003074 <I2Cx_Init+0x154>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002f7e:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f82:	f001 feb1 	bl	8004ce8 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002f86:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f8a:	a905      	add	r1, sp, #20
 8002f8c:	4839      	ldr	r0, [pc, #228]	; (8003074 <I2Cx_Init+0x154>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002f8e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f90:	f001 feaa 	bl	8004ce8 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002f94:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002f96:	4632      	mov	r2, r6
 8002f98:	210f      	movs	r1, #15
 8002f9a:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002f9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fa0:	6423      	str	r3, [r4, #64]	; 0x40
 8002fa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fa8:	9302      	str	r3, [sp, #8]
 8002faa:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002fac:	6a23      	ldr	r3, [r4, #32]
 8002fae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fb2:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002fb4:	6a23      	ldr	r3, [r4, #32]
 8002fb6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002fba:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002fbc:	f001 f9d4 	bl	8004368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002fc0:	2048      	movs	r0, #72	; 0x48
 8002fc2:	f001 fa03 	bl	80043cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002fc6:	2049      	movs	r0, #73	; 0x49
 8002fc8:	4632      	mov	r2, r6
 8002fca:	210f      	movs	r1, #15
 8002fcc:	f001 f9cc 	bl	8004368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002fd0:	2049      	movs	r0, #73	; 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002fd2:	f001 f9fb 	bl	80043cc <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 8002fd6:	4628      	mov	r0, r5
  }
}
 8002fd8:	b00a      	add	sp, #40	; 0x28
 8002fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(i2c_handler);
 8002fde:	f002 b92b 	b.w	8005238 <HAL_I2C_Init>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002fe2:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002fea:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002fec:	4822      	ldr	r0, [pc, #136]	; (8003078 <I2Cx_Init+0x158>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002fee:	6323      	str	r3, [r4, #48]	; 0x30
 8002ff0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002ff2:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	9303      	str	r3, [sp, #12]
 8002ffa:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002ffc:	2312      	movs	r3, #18
 8002ffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003002:	2304      	movs	r3, #4
 8003004:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003008:	a905      	add	r1, sp, #20
 800300a:	f001 fe6d 	bl	8004ce8 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800300e:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003012:	a905      	add	r1, sp, #20
 8003014:	4818      	ldr	r0, [pc, #96]	; (8003078 <I2Cx_Init+0x158>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003016:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003018:	f001 fe66 	bl	8004ce8 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800301c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800301e:	4632      	mov	r2, r6
 8003020:	210f      	movs	r1, #15
 8003022:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003028:	6423      	str	r3, [r4, #64]	; 0x40
 800302a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800302c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003030:	9304      	str	r3, [sp, #16]
 8003032:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003034:	6a23      	ldr	r3, [r4, #32]
 8003036:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800303a:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800303c:	6a23      	ldr	r3, [r4, #32]
 800303e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003042:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003044:	f001 f990 	bl	8004368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003048:	201f      	movs	r0, #31
 800304a:	f001 f9bf 	bl	80043cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800304e:	2020      	movs	r0, #32
 8003050:	4632      	mov	r2, r6
 8003052:	210f      	movs	r1, #15
 8003054:	f001 f988 	bl	8004368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003058:	2020      	movs	r0, #32
 800305a:	e7ba      	b.n	8002fd2 <I2Cx_Init+0xb2>
}
 800305c:	b00a      	add	sp, #40	; 0x28
 800305e:	bd70      	pop	{r4, r5, r6, pc}
 8003060:	20000b20 	.word	0x20000b20
 8003064:	40023800 	.word	0x40023800
 8003068:	40005c00 	.word	0x40005c00
 800306c:	40005400 	.word	0x40005400
 8003070:	40912732 	.word	0x40912732
 8003074:	40021c00 	.word	0x40021c00
 8003078:	40020400 	.word	0x40020400

0800307c <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800307c:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800307e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8003082:	b085      	sub	sp, #20
 8003084:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003086:	9402      	str	r4, [sp, #8]
 8003088:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800308c:	9401      	str	r4, [sp, #4]
 800308e:	9c08      	ldr	r4, [sp, #32]
 8003090:	9400      	str	r4, [sp, #0]
 8003092:	f002 f93b 	bl	800530c <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003096:	4604      	mov	r4, r0
 8003098:	b128      	cbz	r0, 80030a6 <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800309a:	4628      	mov	r0, r5
 800309c:	f002 f91d 	bl	80052da <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80030a0:	4628      	mov	r0, r5
 80030a2:	f7ff ff3d 	bl	8002f20 <I2Cx_Init>
}
 80030a6:	4620      	mov	r0, r4
 80030a8:	b005      	add	sp, #20
 80030aa:	bd30      	pop	{r4, r5, pc}

080030ac <I2Cx_ReadMultiple>:
{
 80030ac:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80030ae:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 80030b2:	b085      	sub	sp, #20
 80030b4:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80030b6:	9402      	str	r4, [sp, #8]
 80030b8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80030bc:	9401      	str	r4, [sp, #4]
 80030be:	9c08      	ldr	r4, [sp, #32]
 80030c0:	9400      	str	r4, [sp, #0]
 80030c2:	f002 f9fd 	bl	80054c0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80030c6:	4604      	mov	r4, r0
 80030c8:	b128      	cbz	r0, 80030d6 <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 80030ca:	4628      	mov	r0, r5
 80030cc:	f002 f905 	bl	80052da <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80030d0:	4628      	mov	r0, r5
 80030d2:	f7ff ff25 	bl	8002f20 <I2Cx_Init>
}
 80030d6:	4620      	mov	r0, r4
 80030d8:	b005      	add	sp, #20
 80030da:	bd30      	pop	{r4, r5, pc}

080030dc <BSP_LED_Init>:
{
 80030dc:	b530      	push	{r4, r5, lr}
  if (Led == LED1)
 80030de:	4604      	mov	r4, r0
{
 80030e0:	b087      	sub	sp, #28
  if (Led == LED1)
 80030e2:	b9c8      	cbnz	r0, 8003118 <BSP_LED_Init+0x3c>
    LED1_GPIO_CLK_ENABLE();
 80030e4:	4b0d      	ldr	r3, [pc, #52]	; (800311c <BSP_LED_Init+0x40>)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80030e6:	2502      	movs	r5, #2
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 80030e8:	a901      	add	r1, sp, #4
 80030ea:	480d      	ldr	r0, [pc, #52]	; (8003120 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
 80030ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80030fe:	2301      	movs	r3, #1
 8003100:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8003104:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003106:	2303      	movs	r3, #3
 8003108:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 800310a:	f001 fded 	bl	8004ce8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 800310e:	4622      	mov	r2, r4
 8003110:	4629      	mov	r1, r5
 8003112:	4803      	ldr	r0, [pc, #12]	; (8003120 <BSP_LED_Init+0x44>)
 8003114:	f001 ff70 	bl	8004ff8 <HAL_GPIO_WritePin>
}
 8003118:	b007      	add	sp, #28
 800311a:	bd30      	pop	{r4, r5, pc}
 800311c:	40023800 	.word	0x40023800
 8003120:	40022000 	.word	0x40022000

08003124 <CAMERA_IO_Init>:
  * @brief  Initializes Camera low level.
  * @retval None
  */
void CAMERA_IO_Init(void) 
{
  I2Cx_Init(&hI2cExtHandler);
 8003124:	4801      	ldr	r0, [pc, #4]	; (800312c <CAMERA_IO_Init+0x8>)
 8003126:	f7ff befb 	b.w	8002f20 <I2Cx_Init>
 800312a:	bf00      	nop
 800312c:	20000b74 	.word	0x20000b74

08003130 <CAMERA_IO_Write>:
  * @param  Reg: Register address 
  * @param  Value: Data to be written
  * @retval None
  */
void CAMERA_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003132:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cExtHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003136:	f10d 020f 	add.w	r2, sp, #15
 800313a:	2301      	movs	r3, #1
 800313c:	9200      	str	r2, [sp, #0]
 800313e:	460a      	mov	r2, r1
 8003140:	4601      	mov	r1, r0
 8003142:	9301      	str	r3, [sp, #4]
 8003144:	4802      	ldr	r0, [pc, #8]	; (8003150 <CAMERA_IO_Write+0x20>)
 8003146:	f7ff ff99 	bl	800307c <I2Cx_WriteMultiple>
}
 800314a:	b005      	add	sp, #20
 800314c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003150:	20000b74 	.word	0x20000b74

08003154 <CAMERA_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address 
  * @retval Read data
  */
uint8_t CAMERA_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
 8003156:	2300      	movs	r3, #0
{
 8003158:	460a      	mov	r2, r1

  I2Cx_ReadMultiple(&hI2cExtHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800315a:	f10d 010f 	add.w	r1, sp, #15
  uint8_t read_value = 0;
 800315e:	f88d 300f 	strb.w	r3, [sp, #15]
  I2Cx_ReadMultiple(&hI2cExtHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003162:	2301      	movs	r3, #1
 8003164:	9100      	str	r1, [sp, #0]
 8003166:	4601      	mov	r1, r0
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	4804      	ldr	r0, [pc, #16]	; (800317c <CAMERA_IO_Read+0x28>)
 800316c:	f7ff ff9e 	bl	80030ac <I2Cx_ReadMultiple>

  return read_value;
}
 8003170:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8003174:	b005      	add	sp, #20
 8003176:	f85d fb04 	ldr.w	pc, [sp], #4
 800317a:	bf00      	nop
 800317c:	20000b74 	.word	0x20000b74

08003180 <CAMERA_Delay>:
 8003180:	f000 bf7c 	b.w	800407c <HAL_Delay>

08003184 <BSP_CAMERA_PwrUp>:
void BSP_CAMERA_PwrUp(void)
{
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003184:	4b11      	ldr	r3, [pc, #68]	; (80031cc <BSP_CAMERA_PwrUp+0x48>)
  /* Configure DCMI GPIO as alternate function */
  gpio_init_structure.Pin       = GPIO_PIN_13;
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8003186:	4812      	ldr	r0, [pc, #72]	; (80031d0 <BSP_CAMERA_PwrUp+0x4c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800318a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
 800318e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
{
 8003192:	b086      	sub	sp, #24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003196:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800319a:	2600      	movs	r6, #0
 800319c:	2403      	movs	r4, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800319e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80031a2:	a901      	add	r1, sp, #4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80031a8:	2301      	movs	r3, #1
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80031aa:	e9cd 6403 	strd	r6, r4, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80031ae:	e9cd 5301 	strd	r5, r3, [sp, #4]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80031b2:	f001 fd99 	bl	8004ce8 <HAL_GPIO_Init>

  /* De-assert the camera POWER_DOWN pin (active high) */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_13, GPIO_PIN_RESET);
 80031b6:	4632      	mov	r2, r6
 80031b8:	4629      	mov	r1, r5
 80031ba:	4805      	ldr	r0, [pc, #20]	; (80031d0 <BSP_CAMERA_PwrUp+0x4c>)
 80031bc:	f001 ff1c 	bl	8004ff8 <HAL_GPIO_WritePin>

  HAL_Delay(3);     /* POWER_DOWN de-asserted during 3ms */
 80031c0:	4620      	mov	r0, r4
 80031c2:	f000 ff5b 	bl	800407c <HAL_Delay>
}
 80031c6:	b006      	add	sp, #24
 80031c8:	bd70      	pop	{r4, r5, r6, pc}
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40021c00 	.word	0x40021c00

080031d4 <BSP_CAMERA_MspInit>:
  static DMA_HandleTypeDef hdma_handler;
  GPIO_InitTypeDef gpio_init_structure;
  
  /*** Enable peripherals and GPIO clocks ***/
  /* Enable DCMI clock */
  __HAL_RCC_DCMI_CLK_ENABLE();
 80031d4:	4b58      	ldr	r3, [pc, #352]	; (8003338 <BSP_CAMERA_MspInit+0x164>)
 80031d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d8:	f042 0201 	orr.w	r2, r2, #1
{
 80031dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_DCMI_CLK_ENABLE();
 80031e0:	635a      	str	r2, [r3, #52]	; 0x34
{
 80031e2:	b08c      	sub	sp, #48	; 0x30
  __HAL_RCC_DCMI_CLK_ENABLE();
 80031e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  /*** Configure the GPIO ***/
  /* Configure DCMI GPIO as alternate function */
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80031e6:	2503      	movs	r5, #3
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80031e8:	f04f 0802 	mov.w	r8, #2
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80031ec:	2701      	movs	r7, #1
  __HAL_RCC_DCMI_CLK_ENABLE();
 80031ee:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 80031f2:	240d      	movs	r4, #13
{
 80031f4:	4606      	mov	r6, r0
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 80031f6:	a907      	add	r1, sp, #28
  __HAL_RCC_DCMI_CLK_ENABLE();
 80031f8:	9200      	str	r2, [sp, #0]
 80031fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 80031fe:	484f      	ldr	r0, [pc, #316]	; (800333c <BSP_CAMERA_MspInit+0x168>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003200:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
 8003206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003208:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800320c:	9201      	str	r2, [sp, #4]
 800320e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
 8003218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800321a:	f002 0201 	and.w	r2, r2, #1
 800321e:	9202      	str	r2, [sp, #8]
 8003220:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003224:	f042 0208 	orr.w	r2, r2, #8
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
 800322a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322c:	f002 0208 	and.w	r2, r2, #8
 8003230:	9203      	str	r2, [sp, #12]
 8003232:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003236:	f042 0210 	orr.w	r2, r2, #16
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
 800323c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323e:	f002 0210 	and.w	r2, r2, #16
 8003242:	9204      	str	r2, [sp, #16]
 8003244:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
 800324e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003250:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003254:	9205      	str	r2, [sp, #20]
 8003256:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800325a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8003262:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003268:	9306      	str	r3, [sp, #24]
 800326a:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800326c:	2350      	movs	r3, #80	; 0x50
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800326e:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003272:	e9cd 3807 	strd	r3, r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8003276:	f001 fd37 	bl	8004ce8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_3;
 800327a:	2308      	movs	r3, #8
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800327c:	a907      	add	r1, sp, #28
 800327e:	4830      	ldr	r0, [pc, #192]	; (8003340 <BSP_CAMERA_MspInit+0x16c>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8003280:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003282:	e9cd 3807 	strd	r3, r8, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003286:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800328a:	f001 fd2d 	bl	8004ce8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_5 | GPIO_PIN_6;
 800328e:	2360      	movs	r3, #96	; 0x60
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003290:	a907      	add	r1, sp, #28
 8003292:	482c      	ldr	r0, [pc, #176]	; (8003344 <BSP_CAMERA_MspInit+0x170>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8003294:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003296:	e9cd 3807 	strd	r3, r8, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800329a:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800329e:	f001 fd23 	bl	8004ce8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_9;
 80032a2:	f44f 7300 	mov.w	r3, #512	; 0x200
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80032a6:	a907      	add	r1, sp, #28
 80032a8:	4827      	ldr	r0, [pc, #156]	; (8003348 <BSP_CAMERA_MspInit+0x174>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 80032aa:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032ac:	e9cd 3807 	strd	r3, r8, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80032b0:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80032b4:	f001 fd18 	bl	8004ce8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10  | GPIO_PIN_11  |\
 80032b8:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
                                  GPIO_PIN_12 | GPIO_PIN_14;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80032bc:	a907      	add	r1, sp, #28
 80032be:	4823      	ldr	r0, [pc, #140]	; (800334c <BSP_CAMERA_MspInit+0x178>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 80032c0:	940b      	str	r4, [sp, #44]	; 0x2c

  /*** Configure the DMA ***/
  /* Set the parameters to be configured */
  hdma_handler.Init.Channel             = DMA_CHANNEL_1;
  hdma_handler.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80032c2:	2400      	movs	r4, #0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032c4:	e9cd 3807 	strd	r3, r8, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80032c8:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80032cc:	f001 fd0c 	bl	8004ce8 <HAL_GPIO_Init>
  hdma_handler.Init.Channel             = DMA_CHANNEL_1;
 80032d0:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <BSP_CAMERA_MspInit+0x17c>)
  hdma_handler.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80032d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 80032da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE; 

  hdma_handler.Instance = DMA2_Stream1;

  /* Associate the initialized DMA handle to the DCMI handle */
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 80032de:	64b3      	str	r3, [r6, #72]	; 0x48
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 80032e0:	60dc      	str	r4, [r3, #12]
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80032e2:	631c      	str	r4, [r3, #48]	; 0x30
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 80032e4:	639e      	str	r6, [r3, #56]	; 0x38
  hdma_handler.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80032e6:	e9c3 2401 	strd	r2, r4, [r3, #4]
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032ee:	e9c3 1204 	strd	r1, r2, [r3, #16]
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 80032f2:	f44f 7280 	mov.w	r2, #256	; 0x100
  
  /*** Configure the NVIC for DCMI and DMA ***/
  /* NVIC configuration for DCMI transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMI_IRQn, 0x0F, 0);
 80032f6:	210f      	movs	r1, #15
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 80032f8:	e9c3 0206 	strd	r0, r2, [r3, #24]
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 80032fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  HAL_NVIC_SetPriority(DCMI_IRQn, 0x0F, 0);
 8003300:	204e      	movs	r0, #78	; 0x4e
  hdma_handler.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003302:	e9c3 2408 	strd	r2, r4, [r3, #32]
  hdma_handler.Instance = DMA2_Stream1;
 8003306:	4a13      	ldr	r2, [pc, #76]	; (8003354 <BSP_CAMERA_MspInit+0x180>)
 8003308:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(DCMI_IRQn, 0x0F, 0);
 800330a:	4622      	mov	r2, r4
  hdma_handler.Init.MemBurst            = DMA_MBURST_SINGLE;
 800330c:	e9c3 540a 	strd	r5, r4, [r3, #40]	; 0x28
  HAL_NVIC_SetPriority(DCMI_IRQn, 0x0F, 0);
 8003310:	f001 f82a 	bl	8004368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);  
 8003314:	204e      	movs	r0, #78	; 0x4e
 8003316:	f001 f859 	bl	80043cc <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0x0F, 0);
 800331a:	4622      	mov	r2, r4
 800331c:	210f      	movs	r1, #15
 800331e:	2039      	movs	r0, #57	; 0x39
 8003320:	f001 f822 	bl	8004368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003324:	2039      	movs	r0, #57	; 0x39
 8003326:	f001 f851 	bl	80043cc <HAL_NVIC_EnableIRQ>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(hdcmi->DMA_Handle);  
 800332a:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 800332c:	f001 f95e 	bl	80045ec <HAL_DMA_Init>
}
 8003330:	b00c      	add	sp, #48	; 0x30
 8003332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800
 800333c:	40020000 	.word	0x40020000
 8003340:	40020c00 	.word	0x40020c00
 8003344:	40021000 	.word	0x40021000
 8003348:	40021800 	.word	0x40021800
 800334c:	40021c00 	.word	0x40021c00
 8003350:	20000c24 	.word	0x20000c24
 8003354:	40026428 	.word	0x40026428

08003358 <BSP_CAMERA_Init>:
{ 
 8003358:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  phdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 800335c:	2380      	movs	r3, #128	; 0x80
  phdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 800335e:	4c23      	ldr	r4, [pc, #140]	; (80033ec <BSP_CAMERA_Init+0x94>)
 8003360:	2600      	movs	r6, #0
{ 
 8003362:	4605      	mov	r5, r0
  phdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 8003364:	60e3      	str	r3, [r4, #12]
  phdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 8003366:	2320      	movs	r3, #32
  phdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 8003368:	6066      	str	r6, [r4, #4]
  phdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 800336a:	60a3      	str	r3, [r4, #8]
  phdcmi->Instance              = DCMI;
 800336c:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <BSP_CAMERA_Init+0x98>)
  phdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800336e:	61a6      	str	r6, [r4, #24]
  phdcmi->Instance              = DCMI;
 8003370:	6023      	str	r3, [r4, #0]
  phdcmi->Init.HSPolarity       = DCMI_HSPOLARITY_LOW;
 8003372:	e9c4 6604 	strd	r6, r6, [r4, #16]
  BSP_CAMERA_PwrUp();
 8003376:	f7ff ff05 	bl	8003184 <BSP_CAMERA_PwrUp>
  if(ov5640_ReadID(CAMERA_I2C_ADDRESS) == OV5640_ID)
 800337a:	2078      	movs	r0, #120	; 0x78
 800337c:	f7ff fbde 	bl	8002b3c <ov5640_ReadID>
 8003380:	f245 6340 	movw	r3, #22080	; 0x5640
 8003384:	4298      	cmp	r0, r3
 8003386:	d12f      	bne.n	80033e8 <BSP_CAMERA_Init+0x90>
    camera_drv = &ov5640_drv;
 8003388:	4f1a      	ldr	r7, [pc, #104]	; (80033f4 <BSP_CAMERA_Init+0x9c>)
    BSP_CAMERA_MspInit(&hDcmiHandler, NULL);
 800338a:	4631      	mov	r1, r6
    camera_drv = &ov5640_drv;
 800338c:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <BSP_CAMERA_Init+0xa0>)
    BSP_CAMERA_MspInit(&hDcmiHandler, NULL);
 800338e:	4620      	mov	r0, r4
    CameraHwAddress = CAMERA_I2C_ADDRESS;
 8003390:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8003400 <BSP_CAMERA_Init+0xa8>
    camera_drv = &ov5640_drv;
 8003394:	603b      	str	r3, [r7, #0]
    CameraHwAddress = CAMERA_I2C_ADDRESS;
 8003396:	2378      	movs	r3, #120	; 0x78
 8003398:	f8c8 3000 	str.w	r3, [r8]
    BSP_CAMERA_MspInit(&hDcmiHandler, NULL);
 800339c:	f7ff ff1a 	bl	80031d4 <BSP_CAMERA_MspInit>
    HAL_DCMI_Init(phdcmi);
 80033a0:	4620      	mov	r0, r4
 80033a2:	f001 f87f 	bl	80044a4 <HAL_DCMI_Init>
      camera_drv->Init(CameraHwAddress, CAMERA_R640x480);
 80033a6:	683b      	ldr	r3, [r7, #0]
    if (Resolution == CAMERA_R480x272)
 80033a8:	2d02      	cmp	r5, #2
 80033aa:	f8b8 0000 	ldrh.w	r0, [r8]
      camera_drv->Init(CameraHwAddress, CAMERA_R640x480);
 80033ae:	681b      	ldr	r3, [r3, #0]
    if (Resolution == CAMERA_R480x272)
 80033b0:	d114      	bne.n	80033dc <BSP_CAMERA_Init+0x84>
      camera_drv->Init(CameraHwAddress, CAMERA_R640x480);
 80033b2:	2103      	movs	r1, #3
 80033b4:	4798      	blx	r3
      HAL_DCMI_ConfigCROP(phdcmi,           /* Crop in the middle of the VGA picture */
 80033b6:	f240 130f 	movw	r3, #271	; 0x10f
 80033ba:	2268      	movs	r2, #104	; 0x68
 80033bc:	2150      	movs	r1, #80	; 0x50
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	4620      	mov	r0, r4
 80033c2:	f240 33bf 	movw	r3, #959	; 0x3bf
 80033c6:	f001 f8b5 	bl	8004534 <HAL_DCMI_ConfigCrop>
      HAL_DCMI_EnableCROP(phdcmi);
 80033ca:	4620      	mov	r0, r4
 80033cc:	f001 f8e2 	bl	8004594 <HAL_DCMI_EnableCrop>
    CameraCurrentResolution = Resolution;
 80033d0:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <BSP_CAMERA_Init+0xa4>)
    status = CAMERA_OK;
 80033d2:	2000      	movs	r0, #0
    CameraCurrentResolution = Resolution;
 80033d4:	601d      	str	r5, [r3, #0]
}
 80033d6:	b002      	add	sp, #8
 80033d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      camera_drv->Init(CameraHwAddress, Resolution);
 80033dc:	4629      	mov	r1, r5
 80033de:	4798      	blx	r3
      HAL_DCMI_DisableCROP(phdcmi);
 80033e0:	4620      	mov	r0, r4
 80033e2:	f001 f8c2 	bl	800456a <HAL_DCMI_DisableCrop>
 80033e6:	e7f3      	b.n	80033d0 <BSP_CAMERA_Init+0x78>
    status = CAMERA_NOT_SUPPORTED;
 80033e8:	2004      	movs	r0, #4
 80033ea:	e7f4      	b.n	80033d6 <BSP_CAMERA_Init+0x7e>
 80033ec:	20000bd4 	.word	0x20000bd4
 80033f0:	50050000 	.word	0x50050000
 80033f4:	20000bd0 	.word	0x20000bd0
 80033f8:	2000000c 	.word	0x2000000c
 80033fc:	20000bc8 	.word	0x20000bc8
 8003400:	20000bcc 	.word	0x20000bcc

08003404 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003404:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003408:	4c1a      	ldr	r4, [pc, #104]	; (8003474 <LL_FillBuffer+0x70>)
{
 800340a:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800340c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 8003410:	460e      	mov	r6, r1
 8003412:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003414:	2134      	movs	r1, #52	; 0x34
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003416:	6063      	str	r3, [r4, #4]
{
 8003418:	4681      	mov	r9, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800341a:	4b17      	ldr	r3, [pc, #92]	; (8003478 <LL_FillBuffer+0x74>)
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800341c:	4620      	mov	r0, r4
{
 800341e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b15      	ldr	r3, [pc, #84]	; (800347c <LL_FillBuffer+0x78>)
 8003426:	fb01 3302 	mla	r3, r1, r2, r3
 800342a:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800342c:	1eab      	subs	r3, r5, #2
 800342e:	425d      	negs	r5, r3
 8003430:	415d      	adcs	r5, r3
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003434:	006d      	lsls	r5, r5, #1
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003436:	60e3      	str	r3, [r4, #12]
  hDma2dHandler.Instance = DMA2D;
 8003438:	4b11      	ldr	r3, [pc, #68]	; (8003480 <LL_FillBuffer+0x7c>)
 800343a:	60a5      	str	r5, [r4, #8]
 800343c:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800343e:	f001 fabd 	bl	80049bc <HAL_DMA2D_Init>
 8003442:	b9a0      	cbnz	r0, 800346e <LL_FillBuffer+0x6a>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003444:	4649      	mov	r1, r9
 8003446:	4620      	mov	r0, r4
 8003448:	f001 fc06 	bl	8004c58 <HAL_DMA2D_ConfigLayer>
 800344c:	b978      	cbnz	r0, 800346e <LL_FillBuffer+0x6a>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800344e:	463b      	mov	r3, r7
 8003450:	4632      	mov	r2, r6
 8003452:	4651      	mov	r1, sl
 8003454:	4620      	mov	r0, r4
 8003456:	f8cd 8000 	str.w	r8, [sp]
 800345a:	f001 fadb 	bl	8004a14 <HAL_DMA2D_Start>
 800345e:	b930      	cbnz	r0, 800346e <LL_FillBuffer+0x6a>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003460:	210a      	movs	r1, #10
 8003462:	4620      	mov	r0, r4
      }
    }
  } 
}
 8003464:	b002      	add	sp, #8
 8003466:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800346a:	f001 baed 	b.w	8004a48 <HAL_DMA2D_PollForTransfer>
}
 800346e:	b002      	add	sp, #8
 8003470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003474:	20000ca0 	.word	0x20000ca0
 8003478:	20000c84 	.word	0x20000c84
 800347c:	20000ce0 	.word	0x20000ce0
 8003480:	4002b000 	.word	0x4002b000

08003484 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <BSP_LCD_GetXSize+0x10>)
 8003486:	2134      	movs	r1, #52	; 0x34
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4b03      	ldr	r3, [pc, #12]	; (8003498 <BSP_LCD_GetXSize+0x14>)
 800348c:	fb01 3302 	mla	r3, r1, r2, r3
}
 8003490:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8003492:	4770      	bx	lr
 8003494:	20000c84 	.word	0x20000c84
 8003498:	20000ce0 	.word	0x20000ce0

0800349c <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800349c:	4b03      	ldr	r3, [pc, #12]	; (80034ac <BSP_LCD_GetYSize+0x10>)
 800349e:	2134      	movs	r1, #52	; 0x34
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <BSP_LCD_GetYSize+0x14>)
 80034a4:	fb01 3302 	mla	r3, r1, r2, r3
}
 80034a8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80034aa:	4770      	bx	lr
 80034ac:	20000c84 	.word	0x20000c84
 80034b0:	20000ce0 	.word	0x20000ce0

080034b4 <BSP_LCD_LayerRgb565Init>:
{     
 80034b4:	b570      	push	{r4, r5, r6, lr}
  layer_cfg.WindowX0 = 0;
 80034b6:	2500      	movs	r5, #0
{     
 80034b8:	b08e      	sub	sp, #56	; 0x38
 80034ba:	460e      	mov	r6, r1
 80034bc:	4604      	mov	r4, r0
  layer_cfg.WindowX0 = 0;
 80034be:	9501      	str	r5, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80034c0:	f7ff ffe0 	bl	8003484 <BSP_LCD_GetXSize>
  layer_cfg.WindowY0 = 0;
 80034c4:	e9cd 0502 	strd	r0, r5, [sp, #8]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80034c8:	f7ff ffe8 	bl	800349c <BSP_LCD_GetYSize>
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80034cc:	2302      	movs	r3, #2
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80034ce:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80034d2:	9004      	str	r0, [sp, #16]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80034d4:	9305      	str	r3, [sp, #20]
  layer_cfg.Alpha = 255;
 80034d6:	23ff      	movs	r3, #255	; 0xff
  layer_cfg.FBStartAdress = FB_Address;
 80034d8:	960a      	str	r6, [sp, #40]	; 0x28
  layer_cfg.Backcolor.Blue = 0;
 80034da:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
 80034de:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  layer_cfg.Alpha0 = 0;
 80034e2:	e9cd 3506 	strd	r3, r5, [sp, #24]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80034e6:	2307      	movs	r3, #7
 80034e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80034ec:	f7ff ffca 	bl	8003484 <BSP_LCD_GetXSize>
 80034f0:	900b      	str	r0, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80034f2:	f7ff ffd3 	bl	800349c <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80034f6:	4622      	mov	r2, r4
 80034f8:	a901      	add	r1, sp, #4
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80034fa:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80034fc:	4808      	ldr	r0, [pc, #32]	; (8003520 <BSP_LCD_LayerRgb565Init+0x6c>)
 80034fe:	f002 fa59 	bl	80059b4 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003502:	220c      	movs	r2, #12
 8003504:	4b07      	ldr	r3, [pc, #28]	; (8003524 <BSP_LCD_LayerRgb565Init+0x70>)
 8003506:	f04f 31ff 	mov.w	r1, #4294967295
 800350a:	4354      	muls	r4, r2
 800350c:	191a      	adds	r2, r3, r4
 800350e:	6051      	str	r1, [r2, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003510:	4905      	ldr	r1, [pc, #20]	; (8003528 <BSP_LCD_LayerRgb565Init+0x74>)
 8003512:	6091      	str	r1, [r2, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003514:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003518:	511a      	str	r2, [r3, r4]
}
 800351a:	b00e      	add	sp, #56	; 0x38
 800351c:	bd70      	pop	{r4, r5, r6, pc}
 800351e:	bf00      	nop
 8003520:	20000ce0 	.word	0x20000ce0
 8003524:	20000c88 	.word	0x20000c88
 8003528:	20000000 	.word	0x20000000

0800352c <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 800352c:	4b01      	ldr	r3, [pc, #4]	; (8003534 <BSP_LCD_SelectLayer+0x8>)
 800352e:	6018      	str	r0, [r3, #0]
} 
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000c84 	.word	0x20000c84

08003538 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <BSP_LCD_SetFont+0x10>)
 800353a:	210c      	movs	r1, #12
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b03      	ldr	r3, [pc, #12]	; (800354c <BSP_LCD_SetFont+0x14>)
 8003540:	fb01 3302 	mla	r3, r1, r2, r3
 8003544:	6098      	str	r0, [r3, #8]
}
 8003546:	4770      	bx	lr
 8003548:	20000c84 	.word	0x20000c84
 800354c:	20000c88 	.word	0x20000c88

08003550 <BSP_LCD_Clear>:
{ 
 8003550:	b530      	push	{r4, r5, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003552:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <BSP_LCD_Clear+0x34>)
{ 
 8003554:	b085      	sub	sp, #20
 8003556:	4604      	mov	r4, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003558:	681d      	ldr	r5, [r3, #0]
 800355a:	f7ff ff93 	bl	8003484 <BSP_LCD_GetXSize>
 800355e:	9003      	str	r0, [sp, #12]
 8003560:	f7ff ff9c 	bl	800349c <BSP_LCD_GetYSize>
 8003564:	4908      	ldr	r1, [pc, #32]	; (8003588 <BSP_LCD_Clear+0x38>)
 8003566:	4603      	mov	r3, r0
 8003568:	2034      	movs	r0, #52	; 0x34
 800356a:	9401      	str	r4, [sp, #4]
 800356c:	9a03      	ldr	r2, [sp, #12]
 800356e:	fb00 1105 	mla	r1, r0, r5, r1
 8003572:	2000      	movs	r0, #0
 8003574:	9000      	str	r0, [sp, #0]
 8003576:	4628      	mov	r0, r5
 8003578:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 800357a:	f7ff ff43 	bl	8003404 <LL_FillBuffer>
}
 800357e:	b005      	add	sp, #20
 8003580:	bd30      	pop	{r4, r5, pc}
 8003582:	bf00      	nop
 8003584:	20000c84 	.word	0x20000c84
 8003588:	20000ce0 	.word	0x20000ce0

0800358c <BSP_LCD_DisplayOn>:
{
 800358c:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003594:	4808      	ldr	r0, [pc, #32]	; (80035b8 <BSP_LCD_DisplayOn+0x2c>)
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	6993      	ldr	r3, [r2, #24]
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80035a0:	2201      	movs	r2, #1
 80035a2:	f001 fd29 	bl	8004ff8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80035a6:	2201      	movs	r2, #1
 80035a8:	2108      	movs	r1, #8
 80035aa:	4804      	ldr	r0, [pc, #16]	; (80035bc <BSP_LCD_DisplayOn+0x30>)
}
 80035ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80035b0:	f001 bd22 	b.w	8004ff8 <HAL_GPIO_WritePin>
 80035b4:	20000ce0 	.word	0x20000ce0
 80035b8:	40022000 	.word	0x40022000
 80035bc:	40022800 	.word	0x40022800

080035c0 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 80035c0:	4b4b      	ldr	r3, [pc, #300]	; (80036f0 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80035c2:	484c      	ldr	r0, [pc, #304]	; (80036f4 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80035c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 80035ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
{
 80035ce:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 80035d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80035d2:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80035d4:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80035d6:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 80035d8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80035dc:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80035e0:	4e45      	ldr	r6, [pc, #276]	; (80036f8 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80035e2:	9200      	str	r2, [sp, #0]
 80035e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80035e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
 80035ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f0:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80035f4:	9201      	str	r2, [sp, #4]
 80035f6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035fa:	f042 0210 	orr.w	r2, r2, #16
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003602:	f002 0210 	and.w	r2, r2, #16
 8003606:	9202      	str	r2, [sp, #8]
 8003608:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800360a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800360c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003610:	631a      	str	r2, [r3, #48]	; 0x30
 8003612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003614:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003618:	9203      	str	r2, [sp, #12]
 800361a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800361c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800361e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
 8003624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003626:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800362a:	9204      	str	r2, [sp, #16]
 800362c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800362e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
 8003636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003638:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800363c:	9205      	str	r2, [sp, #20]
 800363e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003642:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
 8003648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800364e:	9206      	str	r2, [sp, #24]
 8003650:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003658:	631a      	str	r2, [r3, #48]	; 0x30
 800365a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800365c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003660:	9207      	str	r2, [sp, #28]
 8003662:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003666:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800366e:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003674:	9308      	str	r3, [sp, #32]
 8003676:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003678:	2310      	movs	r3, #16
 800367a:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003680:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003684:	f001 fb30 	bl	8004ce8 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003688:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800368a:	a909      	add	r1, sp, #36	; 0x24
 800368c:	481b      	ldr	r0, [pc, #108]	; (80036fc <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800368e:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003690:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003694:	f001 fb28 	bl	8004ce8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003698:	f44f 4366 	mov.w	r3, #58880	; 0xe600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800369c:	a909      	add	r1, sp, #36	; 0x24
 800369e:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80036a0:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80036a2:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80036a6:	f001 fb1f 	bl	8004ce8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80036aa:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80036ae:	a909      	add	r1, sp, #36	; 0x24
 80036b0:	4813      	ldr	r0, [pc, #76]	; (8003700 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80036b2:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80036b4:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80036b8:	f001 fb16 	bl	8004ce8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80036bc:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80036be:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80036c0:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80036c2:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80036c4:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80036c8:	4c0e      	ldr	r4, [pc, #56]	; (8003704 <BSP_LCD_MspInit+0x144>)
 80036ca:	4620      	mov	r0, r4
 80036cc:	f001 fb0c 	bl	8004ce8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80036d0:	a909      	add	r1, sp, #36	; 0x24
 80036d2:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80036d4:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80036d6:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80036d8:	f001 fb06 	bl	8004ce8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80036dc:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80036de:	a909      	add	r1, sp, #36	; 0x24
 80036e0:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80036e2:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80036e6:	f001 faff 	bl	8004ce8 <HAL_GPIO_Init>
}
 80036ea:	b00f      	add	sp, #60	; 0x3c
 80036ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40021000 	.word	0x40021000
 80036f8:	40022000 	.word	0x40022000
 80036fc:	40021800 	.word	0x40021800
 8003700:	40022400 	.word	0x40022400
 8003704:	40022800 	.word	0x40022800

08003708 <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003708:	4805      	ldr	r0, [pc, #20]	; (8003720 <BSP_LCD_ClockConfig+0x18>)
 800370a:	2308      	movs	r3, #8
 800370c:	6003      	str	r3, [r0, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800370e:	23c0      	movs	r3, #192	; 0xc0
 8003710:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003712:	2305      	movs	r3, #5
 8003714:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800371a:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800371c:	f002 bfa2 	b.w	8006664 <HAL_RCCEx_PeriphCLKConfig>
 8003720:	20000d88 	.word	0x20000d88

08003724 <BSP_LCD_Init>:
{    
 8003724:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003726:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003728:	4c22      	ldr	r4, [pc, #136]	; (80037b4 <BSP_LCD_Init+0x90>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800372a:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800372c:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800372e:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003732:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003736:	e9c4 2305 	strd	r2, r3, [r4, #20]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800373a:	230b      	movs	r3, #11
 800373c:	e9c4 1307 	strd	r1, r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003740:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003744:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003746:	e9c4 3009 	strd	r3, r0, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800374a:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800374e:	4620      	mov	r0, r4
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003750:	e9c4 3c0b 	strd	r3, ip, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003754:	f7ff ffd8 	bl	8003708 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003758:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
 800375c:	f44f 7388 	mov.w	r3, #272	; 0x110
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003760:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003762:	e9c4 e318 	strd	lr, r3, [r4, #96]	; 0x60
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Red = 0;
 800376a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800376e:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003772:	e9c4 3303 	strd	r3, r3, [r4, #12]
  hLtdcHandler.Instance = LTDC;
 8003776:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <BSP_LCD_Init+0x94>)
 8003778:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800377a:	f002 f948 	bl	8005a0e <HAL_LTDC_GetState>
 800377e:	4601      	mov	r1, r0
 8003780:	b910      	cbnz	r0, 8003788 <BSP_LCD_Init+0x64>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003782:	4620      	mov	r0, r4
 8003784:	f7ff ff1c 	bl	80035c0 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8003788:	480a      	ldr	r0, [pc, #40]	; (80037b4 <BSP_LCD_Init+0x90>)
 800378a:	f002 f847 	bl	800581c <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800378e:	2201      	movs	r2, #1
 8003790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003794:	4809      	ldr	r0, [pc, #36]	; (80037bc <BSP_LCD_Init+0x98>)
 8003796:	f001 fc2f 	bl	8004ff8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800379a:	2201      	movs	r2, #1
 800379c:	2108      	movs	r1, #8
 800379e:	4808      	ldr	r0, [pc, #32]	; (80037c0 <BSP_LCD_Init+0x9c>)
 80037a0:	f001 fc2a 	bl	8004ff8 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 80037a4:	f000 fc10 	bl	8003fc8 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80037a8:	4806      	ldr	r0, [pc, #24]	; (80037c4 <BSP_LCD_Init+0xa0>)
 80037aa:	f7ff fec5 	bl	8003538 <BSP_LCD_SetFont>
}
 80037ae:	2000      	movs	r0, #0
 80037b0:	bd10      	pop	{r4, pc}
 80037b2:	bf00      	nop
 80037b4:	20000ce0 	.word	0x20000ce0
 80037b8:	40016800 	.word	0x40016800
 80037bc:	40022000 	.word	0x40022000
 80037c0:	40022800 	.word	0x40022800
 80037c4:	20000000 	.word	0x20000000

080037c8 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80037c8:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80037ca:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80037ce:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80037d0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80037d4:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80037d6:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80037d8:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80037da:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 80037dc:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80037de:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80037e0:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 80037e2:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 80037e4:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80037e6:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 80037e8:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80037ea:	480b      	ldr	r0, [pc, #44]	; (8003818 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 80037ec:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80037f0:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80037f4:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 80037f8:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80037fa:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 80037fc:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80037fe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003802:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003804:	466a      	mov	r2, sp
 8003806:	f002 fad1 	bl	8005dac <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 800380a:	3800      	subs	r0, #0
 800380c:	bf18      	it	ne
 800380e:	2001      	movne	r0, #1
 8003810:	b015      	add	sp, #84	; 0x54
 8003812:	f85d fb04 	ldr.w	pc, [sp], #4
 8003816:	bf00      	nop
 8003818:	20000e0c 	.word	0x20000e0c

0800381c <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 800381c:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800381e:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003822:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003824:	f241 3288 	movw	r2, #5000	; 0x1388
 8003828:	4817      	ldr	r0, [pc, #92]	; (8003888 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800382a:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800382c:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800382e:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003830:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003832:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003834:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8003838:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 800383a:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800383c:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800383e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003842:	f002 fa70 	bl	8005d26 <HAL_QSPI_Command>
 8003846:	b9e0      	cbnz	r0, 8003882 <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8003848:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 800384a:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800384c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003850:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003852:	480d      	ldr	r0, [pc, #52]	; (8003888 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 8003854:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8003858:	2310      	movs	r3, #16
 800385a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800385e:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003860:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003862:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003866:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800386a:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800386c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800386e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003872:	f002 fa9b 	bl	8005dac <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8003876:	3800      	subs	r0, #0
 8003878:	bf18      	it	ne
 800387a:	2001      	movne	r0, #1
}
 800387c:	b015      	add	sp, #84	; 0x54
 800387e:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8003882:	2001      	movs	r0, #1
 8003884:	e7fa      	b.n	800387c <QSPI_WriteEnable.constprop.0+0x60>
 8003886:	bf00      	nop
 8003888:	20000e0c 	.word	0x20000e0c

0800388c <BSP_QSPI_EnableMemoryMappedMode>:
{
 800388c:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800388e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8003892:	b091      	sub	sp, #68	; 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003894:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003898:	480e      	ldr	r0, [pc, #56]	; (80038d4 <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800389a:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800389c:	23eb      	movs	r3, #235	; 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800389e:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80038a0:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80038a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80038a6:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80038a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038ac:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80038b4:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80038b6:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80038b8:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80038ba:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80038bc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80038c0:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80038c4:	f002 fac2 	bl	8005e4c <HAL_QSPI_MemoryMapped>
}
 80038c8:	3800      	subs	r0, #0
 80038ca:	bf18      	it	ne
 80038cc:	2001      	movne	r0, #1
 80038ce:	b011      	add	sp, #68	; 0x44
 80038d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80038d4:	20000e0c 	.word	0x20000e0c

080038d8 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 80038d8:	4b45      	ldr	r3, [pc, #276]	; (80039f0 <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80038da:	2101      	movs	r1, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80038dc:	4845      	ldr	r0, [pc, #276]	; (80039f4 <BSP_QSPI_MspInit+0x11c>)
  QSPI_CLK_ENABLE();
 80038de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e0:	f042 0202 	orr.w	r2, r2, #2
{
 80038e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38
{
 80038e8:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 80038ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80038ec:	2409      	movs	r4, #9
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80038ee:	2704      	movs	r7, #4
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80038f0:	2600      	movs	r6, #0
  QSPI_CLK_ENABLE();
 80038f2:	f002 0202 	and.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80038f6:	4d40      	ldr	r5, [pc, #256]	; (80039f8 <BSP_QSPI_MspInit+0x120>)
  QSPI_CLK_ENABLE();
 80038f8:	9200      	str	r2, [sp, #0]
 80038fa:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	f042 0202 	orr.w	r2, r2, #2
 8003902:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	f022 0202 	bic.w	r2, r2, #2
 800390a:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 800390c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800390e:	f042 0202 	orr.w	r2, r2, #2
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
 8003914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003916:	f002 0202 	and.w	r2, r2, #2
 800391a:	9201      	str	r2, [sp, #4]
 800391c:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 800391e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003920:	f042 0202 	orr.w	r2, r2, #2
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
 8003926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003928:	f002 0202 	and.w	r2, r2, #2
 800392c:	9202      	str	r2, [sp, #8]
 800392e:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 8003930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003932:	f042 0208 	orr.w	r2, r2, #8
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
 8003938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800393a:	f002 0208 	and.w	r2, r2, #8
 800393e:	9203      	str	r2, [sp, #12]
 8003940:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 8003942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003944:	f042 0208 	orr.w	r2, r2, #8
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
 800394a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800394c:	f002 0208 	and.w	r2, r2, #8
 8003950:	9204      	str	r2, [sp, #16]
 8003952:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8003954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003956:	f042 0210 	orr.w	r2, r2, #16
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
 800395c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800395e:	f002 0210 	and.w	r2, r2, #16
 8003962:	9205      	str	r2, [sp, #20]
 8003964:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 8003966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003968:	f042 0208 	orr.w	r2, r2, #8
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800396e:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	9306      	str	r3, [sp, #24]
 8003978:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800397a:	2302      	movs	r3, #2
 800397c:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003980:	2303      	movs	r3, #3
 8003982:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8003986:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8003988:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800398a:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 800398c:	f001 f9ac 	bl	8004ce8 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8003990:	a907      	add	r1, sp, #28
 8003992:	4818      	ldr	r0, [pc, #96]	; (80039f4 <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8003994:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003996:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003998:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800399a:	f001 f9a5 	bl	8004ce8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 800399e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80039a2:	a907      	add	r1, sp, #28
 80039a4:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80039a6:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 80039a8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80039aa:	f001 f99d 	bl	8004ce8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 80039ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 80039b2:	a907      	add	r1, sp, #28
 80039b4:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80039b6:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 80039b8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 80039ba:	f001 f995 	bl	8004ce8 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 80039be:	a907      	add	r1, sp, #28
 80039c0:	480e      	ldr	r0, [pc, #56]	; (80039fc <BSP_QSPI_MspInit+0x124>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 80039c2:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80039c4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 80039c6:	f001 f98f 	bl	8004ce8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 80039ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 80039ce:	a907      	add	r1, sp, #28
 80039d0:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80039d2:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 80039d4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 80039d6:	f001 f987 	bl	8004ce8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80039da:	4632      	mov	r2, r6
 80039dc:	210f      	movs	r1, #15
 80039de:	205c      	movs	r0, #92	; 0x5c
 80039e0:	f000 fcc2 	bl	8004368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80039e4:	205c      	movs	r0, #92	; 0x5c
 80039e6:	f000 fcf1 	bl	80043cc <HAL_NVIC_EnableIRQ>
}
 80039ea:	b00d      	add	sp, #52	; 0x34
 80039ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40020400 	.word	0x40020400
 80039f8:	40020c00 	.word	0x40020c00
 80039fc:	40021000 	.word	0x40021000

08003a00 <BSP_QSPI_Init>:
{ 
 8003a00:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 8003a02:	4c49      	ldr	r4, [pc, #292]	; (8003b28 <BSP_QSPI_Init+0x128>)
{ 
 8003a04:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 8003a06:	4b49      	ldr	r3, [pc, #292]	; (8003b2c <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8003a08:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 8003a0a:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8003a0c:	f002 f978 	bl	8005d00 <HAL_QSPI_DeInit>
 8003a10:	4605      	mov	r5, r0
 8003a12:	b110      	cbz	r0, 8003a1a <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 8003a14:	2001      	movs	r0, #1
}
 8003a16:	b011      	add	sp, #68	; 0x44
 8003a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8003a1a:	4601      	mov	r1, r0
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	f7ff ff5b 	bl	80038d8 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 8003a22:	2601      	movs	r6, #1
 8003a24:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8003a2a:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003a2e:	2310      	movs	r3, #16
 8003a30:	60e3      	str	r3, [r4, #12]
 8003a32:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8003a36:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003a3a:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8003a40:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8003a44:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8003a48:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003a4c:	f002 f904 	bl	8005c58 <HAL_QSPI_Init>
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d1df      	bne.n	8003a14 <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003a54:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003a58:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 8003a5a:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 8003a60:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a62:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003a64:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003a66:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003a68:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003a6a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003a6e:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a72:	4620      	mov	r0, r4
 8003a74:	f002 f957 	bl	8005d26 <HAL_QSPI_Command>
 8003a78:	b108      	cbz	r0, 8003a7e <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 8003a7a:	2004      	movs	r0, #4
 8003a7c:	e7cb      	b.n	8003a16 <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 8003a7e:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a84:	a902      	add	r1, sp, #8
 8003a86:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8003a88:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a8a:	f002 f94c 	bl	8005d26 <HAL_QSPI_Command>
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d1f3      	bne.n	8003a7a <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003a92:	f241 3088 	movw	r0, #5000	; 0x1388
 8003a96:	f7ff fe97 	bl	80037c8 <QSPI_AutoPollingMemReady.constprop.0>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d1ed      	bne.n	8003a7a <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003a9e:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 8003aa0:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa6:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003aa8:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003aaa:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003aac:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003aae:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003ab2:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003ab6:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003aba:	4620      	mov	r0, r4
 8003abc:	f002 f933 	bl	8005d26 <HAL_QSPI_Command>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d1da      	bne.n	8003a7a <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac8:	f10d 0107 	add.w	r1, sp, #7
 8003acc:	4620      	mov	r0, r4
 8003ace:	f002 faa3 	bl	8006018 <HAL_QSPI_Receive>
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	d1d1      	bne.n	8003a7a <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003ad6:	f7ff fea1 	bl	800381c <QSPI_WriteEnable.constprop.0>
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d1cd      	bne.n	8003a7a <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003ade:	2381      	movs	r3, #129	; 0x81
 8003ae0:	22f0      	movs	r2, #240	; 0xf0
 8003ae2:	9302      	str	r3, [sp, #8]
 8003ae4:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003ae8:	210a      	movs	r1, #10
 8003aea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003aee:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003af2:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003afc:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003afe:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b00:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003b04:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b08:	f002 f90d 	bl	8005d26 <HAL_QSPI_Command>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d1b4      	bne.n	8003a7a <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b14:	f10d 0107 	add.w	r1, sp, #7
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f002 fa21 	bl	8005f60 <HAL_QSPI_Transmit>
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	f43f af79 	beq.w	8003a16 <BSP_QSPI_Init+0x16>
 8003b24:	e7a9      	b.n	8003a7a <BSP_QSPI_Init+0x7a>
 8003b26:	bf00      	nop
 8003b28:	20000e0c 	.word	0x20000e0c
 8003b2c:	a0001000 	.word	0xa0001000

08003b30 <BSP_SD_IsDetected>:
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t      status = SD_PRESENT;
 8003b30:	2301      	movs	r3, #1
{
 8003b32:	b507      	push	{r0, r1, r2, lr}
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8003b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b38:	4807      	ldr	r0, [pc, #28]	; (8003b58 <BSP_SD_IsDetected+0x28>)
  __IO uint8_t      status = SD_PRESENT;
 8003b3a:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8003b3e:	f001 fa55 	bl	8004fec <HAL_GPIO_ReadPin>
 8003b42:	2801      	cmp	r0, #1
 8003b44:	d102      	bne.n	8003b4c <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 8003b46:	2300      	movs	r3, #0
 8003b48:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8003b4c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003b50:	b003      	add	sp, #12
 8003b52:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b56:	bf00      	nop
 8003b58:	40020800 	.word	0x40020800

08003b5c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003b5c:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	460a      	mov	r2, r1
 8003b64:	4601      	mov	r1, r0
 8003b66:	4804      	ldr	r0, [pc, #16]	; (8003b78 <BSP_SD_ReadBlocks+0x1c>)
 8003b68:	f003 fbe4 	bl	8007334 <HAL_SD_ReadBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 8003b6c:	3800      	subs	r0, #0
 8003b6e:	bf18      	it	ne
 8003b70:	2001      	movne	r0, #1
 8003b72:	b003      	add	sp, #12
 8003b74:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b78:	20000f18 	.word	0x20000f18

08003b7c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003b7c:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	460a      	mov	r2, r1
 8003b84:	4601      	mov	r1, r0
 8003b86:	4804      	ldr	r0, [pc, #16]	; (8003b98 <BSP_SD_WriteBlocks+0x1c>)
 8003b88:	f003 fcd0 	bl	800752c <HAL_SD_WriteBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 8003b8c:	3800      	subs	r0, #0
 8003b8e:	bf18      	it	ne
 8003b90:	2001      	movne	r0, #1
 8003b92:	b003      	add	sp, #12
 8003b94:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b98:	20000f18 	.word	0x20000f18

08003b9c <BSP_SD_MspInit>:
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003b9c:	4b52      	ldr	r3, [pc, #328]	; (8003ce8 <BSP_SD_MspInit+0x14c>)
 8003b9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
{
 8003ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003ba8:	645a      	str	r2, [r3, #68]	; 0x44
{
 8003baa:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8003bae:	2703      	movs	r7, #3
{
 8003bb0:	4605      	mov	r5, r0
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 8003bb2:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003bb6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003bba:	a905      	add	r1, sp, #20
 8003bbc:	484b      	ldr	r0, [pc, #300]	; (8003cec <BSP_SD_MspInit+0x150>)
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003bbe:	2600      	movs	r6, #0
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003bc0:	9201      	str	r2, [sp, #4]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8003bc2:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003bc6:	9a01      	ldr	r2, [sp, #4]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8003bc8:	f04f 0a20 	mov.w	sl, #32
  __DMAx_TxRx_CLK_ENABLE();
 8003bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8003bce:	f44f 3940 	mov.w	r9, #196608	; 0x30000
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8003bd2:	4c47      	ldr	r4, [pc, #284]	; (8003cf0 <BSP_SD_MspInit+0x154>)
  __DMAx_TxRx_CLK_ENABLE();
 8003bd4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30
 8003bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bdc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003be0:	9202      	str	r2, [sp, #8]
 8003be2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be6:	f042 0204 	orr.w	r2, r2, #4
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
 8003bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bee:	f002 0204 	and.w	r2, r2, #4
 8003bf2:	9203      	str	r2, [sp, #12]
 8003bf4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf8:	f042 0208 	orr.w	r2, r2, #8
 8003bfc:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003bfe:	2202      	movs	r2, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	9304      	str	r3, [sp, #16]
 8003c08:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8003c10:	230c      	movs	r3, #12
 8003c12:	e9cd 7308 	strd	r7, r3, [sp, #32]
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8003c16:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003c1a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003c1c:	f001 f864 	bl	8004ce8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003c20:	a905      	add	r1, sp, #20
 8003c22:	4834      	ldr	r0, [pc, #208]	; (8003cf4 <BSP_SD_MspInit+0x158>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 8003c24:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003c28:	f001 f85e 	bl	8004ce8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	210e      	movs	r1, #14
 8003c30:	2031      	movs	r0, #49	; 0x31
 8003c32:	f000 fb99 	bl	8004368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003c36:	2031      	movs	r0, #49	; 0x31
 8003c38:	f000 fbc8 	bl	80043cc <HAL_NVIC_EnableIRQ>
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003c40:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8003c48:	482b      	ldr	r0, [pc, #172]	; (8003cf8 <BSP_SD_MspInit+0x15c>)
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8003c4a:	642c      	str	r4, [r5, #64]	; 0x40
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8003c4c:	6020      	str	r0, [r4, #0]
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 8003c4e:	4620      	mov	r0, r4
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003c50:	60e6      	str	r6, [r4, #12]
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003c52:	62a7      	str	r7, [r4, #40]	; 0x28
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8003c54:	63a5      	str	r5, [r4, #56]	; 0x38
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c56:	e9c4 2304 	strd	r2, r3, [r4, #16]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003c5a:	e9c4 1601 	strd	r1, r6, [r4, #4]
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003c5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c62:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8003c66:	e9c4 ba06 	strd	fp, sl, [r4, #24]
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003c6a:	e9c4 130b 	strd	r1, r3, [r4, #44]	; 0x2c
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8003c6e:	e9c4 9808 	strd	r9, r8, [r4, #32]
  HAL_DMA_DeInit(&dma_rx_handle);
 8003c72:	f000 fd39 	bl	80046e8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 8003c76:	4620      	mov	r0, r4
 8003c78:	f000 fcb8 	bl	80045ec <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 8003c7c:	4c1f      	ldr	r4, [pc, #124]	; (8003cfc <BSP_SD_MspInit+0x160>)
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003c86:	62a7      	str	r7, [r4, #40]	; 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003c88:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003c8c:	2140      	movs	r1, #64	; 0x40
 8003c8e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8003c92:	63ec      	str	r4, [r5, #60]	; 0x3c
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003c94:	60e6      	str	r6, [r4, #12]
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8003c96:	63a5      	str	r5, [r4, #56]	; 0x38
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c98:	e9c4 2304 	strd	r2, r3, [r4, #16]
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003c9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ca0:	e9c4 730b 	strd	r7, r3, [r4, #44]	; 0x2c
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8003ca4:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <BSP_SD_MspInit+0x164>)
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003ca6:	e9c4 0101 	strd	r0, r1, [r4, #4]
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 8003caa:	4620      	mov	r0, r4
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8003cac:	6023      	str	r3, [r4, #0]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8003cae:	e9c4 ba06 	strd	fp, sl, [r4, #24]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8003cb2:	e9c4 9808 	strd	r9, r8, [r4, #32]
  HAL_DMA_DeInit(&dma_tx_handle);
 8003cb6:	f000 fd17 	bl	80046e8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f000 fc96 	bl	80045ec <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8003cc0:	4632      	mov	r2, r6
 8003cc2:	210f      	movs	r1, #15
 8003cc4:	203b      	movs	r0, #59	; 0x3b
 8003cc6:	f000 fb4f 	bl	8004368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8003cca:	203b      	movs	r0, #59	; 0x3b
 8003ccc:	f000 fb7e 	bl	80043cc <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8003cd0:	4632      	mov	r2, r6
 8003cd2:	210f      	movs	r1, #15
 8003cd4:	2045      	movs	r0, #69	; 0x45
 8003cd6:	f000 fb47 	bl	8004368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8003cda:	2045      	movs	r0, #69	; 0x45
 8003cdc:	f000 fb76 	bl	80043cc <HAL_NVIC_EnableIRQ>
}
 8003ce0:	b00b      	add	sp, #44	; 0x2c
 8003ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40020800 	.word	0x40020800
 8003cf0:	20000e58 	.word	0x20000e58
 8003cf4:	40020c00 	.word	0x40020c00
 8003cf8:	40026458 	.word	0x40026458
 8003cfc:	20000eb8 	.word	0x20000eb8
 8003d00:	400264a0 	.word	0x400264a0

08003d04 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8003d04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 8003d06:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <BSP_SD_Detect_MspInit+0x38>)

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003d08:	2101      	movs	r1, #1
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8003d0a:	480d      	ldr	r0, [pc, #52]	; (8003d40 <BSP_SD_Detect_MspInit+0x3c>)
  SD_DETECT_GPIO_CLK_ENABLE();
 8003d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0e:	f042 0204 	orr.w	r2, r2, #4
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003d14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  SD_DETECT_GPIO_CLK_ENABLE();
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8003d2e:	a901      	add	r1, sp, #4
 8003d30:	f000 ffda 	bl	8004ce8 <HAL_GPIO_Init>
}
 8003d34:	b007      	add	sp, #28
 8003d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40020800 	.word	0x40020800

08003d44 <BSP_SD_Init>:
{ 
 8003d44:	b570      	push	{r4, r5, r6, lr}
  uSdHandle.Instance = SDMMC1;
 8003d46:	4c13      	ldr	r4, [pc, #76]	; (8003d94 <BSP_SD_Init+0x50>)
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003d48:	2600      	movs	r6, #0
 8003d4a:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <BSP_SD_Init+0x54>)
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8003d4c:	4631      	mov	r1, r6
 8003d4e:	4620      	mov	r0, r4
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 8003d50:	61a6      	str	r6, [r4, #24]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003d52:	e9c4 3600 	strd	r3, r6, [r4]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003d56:	e9c4 6602 	strd	r6, r6, [r4, #8]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003d5a:	e9c4 6604 	strd	r6, r6, [r4, #16]
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8003d5e:	f7ff ffd1 	bl	8003d04 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 8003d62:	f7ff fee5 	bl	8003b30 <BSP_SD_IsDetected>
 8003d66:	2801      	cmp	r0, #1
 8003d68:	4605      	mov	r5, r0
 8003d6a:	d111      	bne.n	8003d90 <BSP_SD_Init+0x4c>
  BSP_SD_MspInit(&uSdHandle, NULL);
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	4631      	mov	r1, r6
 8003d70:	f7ff ff14 	bl	8003b9c <BSP_SD_MspInit>
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 8003d74:	4620      	mov	r0, r4
 8003d76:	f003 fe5f 	bl	8007a38 <HAL_SD_Init>
 8003d7a:	b938      	cbnz	r0, 8003d8c <BSP_SD_Init+0x48>
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8003d7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d80:	4620      	mov	r0, r4
 8003d82:	f003 fe87 	bl	8007a94 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8003d86:	1b85      	subs	r5, r0, r6
 8003d88:	bf18      	it	ne
 8003d8a:	2501      	movne	r5, #1
}
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	bd70      	pop	{r4, r5, r6, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 8003d90:	2502      	movs	r5, #2
 8003d92:	e7fb      	b.n	8003d8c <BSP_SD_Init+0x48>
 8003d94:	20000f18 	.word	0x20000f18
 8003d98:	40012c00 	.word	0x40012c00

08003d9c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8003d9c:	b508      	push	{r3, lr}
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003d9e:	4803      	ldr	r0, [pc, #12]	; (8003dac <BSP_SD_GetCardState+0x10>)
 8003da0:	f003 ff02 	bl	8007ba8 <HAL_SD_GetCardState>
}
 8003da4:	3804      	subs	r0, #4
 8003da6:	bf18      	it	ne
 8003da8:	2001      	movne	r0, #1
 8003daa:	bd08      	pop	{r3, pc}
 8003dac:	20000f18 	.word	0x20000f18

08003db0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003db0:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8003db2:	4801      	ldr	r0, [pc, #4]	; (8003db8 <BSP_SD_GetCardInfo+0x8>)
 8003db4:	f003 be5b 	b.w	8007a6e <HAL_SD_GetCardInfo>
 8003db8:	20000f18 	.word	0x20000f18

08003dbc <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003dbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003dc0:	4c21      	ldr	r4, [pc, #132]	; (8003e48 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003dc2:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003dc4:	4d21      	ldr	r5, [pc, #132]	; (8003e4c <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
 8003dc6:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003dca:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003dcc:	4621      	mov	r1, r4
{
 8003dce:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dd4:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8003dd6:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003dda:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8003dde:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003de2:	f003 ff15 	bl	8007c10 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003de6:	4630      	mov	r0, r6
 8003de8:	f000 f948 	bl	800407c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003dec:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003dee:	4621      	mov	r1, r4
 8003df0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003df4:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003df6:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8003dfa:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003dfe:	f003 ff07 	bl	8007c10 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003e02:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e04:	4621      	mov	r1, r4
 8003e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e0a:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e0c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8003e10:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8003e12:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e16:	f003 fefb 	bl	8007c10 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003e1a:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e1e:	4621      	mov	r1, r4
 8003e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003e24:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003e26:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e28:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8003e2a:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e2c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8003e30:	9b01      	ldr	r3, [sp, #4]
 8003e32:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e34:	f003 feec 	bl	8007c10 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003e38:	4649      	mov	r1, r9
 8003e3a:	4628      	mov	r0, r5
}
 8003e3c:	b003      	add	sp, #12
 8003e3e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003e42:	f003 bf04 	b.w	8007c4e <HAL_SDRAM_ProgramRefreshRate>
 8003e46:	bf00      	nop
 8003e48:	20000f9c 	.word	0x20000f9c
 8003e4c:	20001028 	.word	0x20001028

08003e50 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003e50:	4b54      	ldr	r3, [pc, #336]	; (8003fa4 <BSP_SDRAM_MspInit+0x154>)
 8003e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e54:	f042 0201 	orr.w	r2, r2, #1
{  
 8003e58:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8003e5a:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8003e5c:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8003e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 8003e60:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003e62:	a909      	add	r1, sp, #36	; 0x24
 8003e64:	4850      	ldr	r0, [pc, #320]	; (8003fa8 <BSP_SDRAM_MspInit+0x158>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8003e66:	f002 0201 	and.w	r2, r2, #1
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003e6a:	4c50      	ldr	r4, [pc, #320]	; (8003fac <BSP_SDRAM_MspInit+0x15c>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003e6c:	2500      	movs	r5, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 8003e6e:	9201      	str	r2, [sp, #4]
 8003e70:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8003e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e74:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
 8003e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003e80:	9202      	str	r2, [sp, #8]
 8003e82:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e86:	f042 0204 	orr.w	r2, r2, #4
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30
 8003e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e8e:	f002 0204 	and.w	r2, r2, #4
 8003e92:	9203      	str	r2, [sp, #12]
 8003e94:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e98:	f042 0208 	orr.w	r2, r2, #8
 8003e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea0:	f002 0208 	and.w	r2, r2, #8
 8003ea4:	9204      	str	r2, [sp, #16]
 8003ea6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eaa:	f042 0210 	orr.w	r2, r2, #16
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
 8003eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb2:	f002 0210 	and.w	r2, r2, #16
 8003eb6:	9205      	str	r2, [sp, #20]
 8003eb8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ebc:	f042 0220 	orr.w	r2, r2, #32
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec4:	f002 0220 	and.w	r2, r2, #32
 8003ec8:	9206      	str	r2, [sp, #24]
 8003eca:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ed6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003eda:	9207      	str	r2, [sp, #28]
 8003edc:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ee4:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003ee6:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	9308      	str	r3, [sp, #32]
 8003ef0:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003ef8:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003efa:	230c      	movs	r3, #12
 8003efc:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003efe:	2308      	movs	r3, #8
 8003f00:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003f02:	f000 fef1 	bl	8004ce8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003f06:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003f0a:	a909      	add	r1, sp, #36	; 0x24
 8003f0c:	4828      	ldr	r0, [pc, #160]	; (8003fb0 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003f0e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003f10:	f000 feea 	bl	8004ce8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003f14:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003f18:	a909      	add	r1, sp, #36	; 0x24
 8003f1a:	4826      	ldr	r0, [pc, #152]	; (8003fb4 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003f1c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003f1e:	f000 fee3 	bl	8004ce8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003f22:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003f26:	a909      	add	r1, sp, #36	; 0x24
 8003f28:	4823      	ldr	r0, [pc, #140]	; (8003fb8 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003f2a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003f2c:	f000 fedc 	bl	8004ce8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003f30:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003f34:	a909      	add	r1, sp, #36	; 0x24
 8003f36:	4821      	ldr	r0, [pc, #132]	; (8003fbc <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003f38:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003f3a:	f000 fed5 	bl	8004ce8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003f3e:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003f40:	a909      	add	r1, sp, #36	; 0x24
 8003f42:	481f      	ldr	r0, [pc, #124]	; (8003fc0 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003f44:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003f46:	f000 fecf 	bl	8004ce8 <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003f4a:	2380      	movs	r3, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003f4c:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003f50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003f54:	6325      	str	r5, [r4, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003f56:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003f58:	61e5      	str	r5, [r4, #28]
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003f5a:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003f5c:	e9c4 5301 	strd	r5, r3, [r4, #4]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f64:	e9c4 1303 	strd	r1, r3, [r4, #12]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003f68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f6c:	e9c4 0305 	strd	r0, r3, [r4, #20]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003f74:	4620      	mov	r0, r4
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003f76:	e9c4 3508 	strd	r3, r5, [r4, #32]
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003f7a:	2303      	movs	r3, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003f7c:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003f80:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <BSP_SDRAM_MspInit+0x174>)
 8003f82:	6023      	str	r3, [r4, #0]
  HAL_DMA_DeInit(&dma_handle);
 8003f84:	f000 fbb0 	bl	80046e8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003f88:	4620      	mov	r0, r4
 8003f8a:	f000 fb2f 	bl	80045ec <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003f8e:	462a      	mov	r2, r5
 8003f90:	210f      	movs	r1, #15
 8003f92:	2038      	movs	r0, #56	; 0x38
 8003f94:	f000 f9e8 	bl	8004368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003f98:	2038      	movs	r0, #56	; 0x38
 8003f9a:	f000 fa17 	bl	80043cc <HAL_NVIC_EnableIRQ>
}
 8003f9e:	b00e      	add	sp, #56	; 0x38
 8003fa0:	bd70      	pop	{r4, r5, r6, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40020800 	.word	0x40020800
 8003fac:	20000fc8 	.word	0x20000fc8
 8003fb0:	40020c00 	.word	0x40020c00
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	40021400 	.word	0x40021400
 8003fbc:	40021800 	.word	0x40021800
 8003fc0:	40021c00 	.word	0x40021c00
 8003fc4:	40026410 	.word	0x40026410

08003fc8 <BSP_SDRAM_Init>:
{ 
 8003fc8:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003fca:	4c19      	ldr	r4, [pc, #100]	; (8004030 <BSP_SDRAM_Init+0x68>)
  Timing.ExitSelfRefreshDelay = 7;
 8003fcc:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003fce:	4b19      	ldr	r3, [pc, #100]	; (8004034 <BSP_SDRAM_Init+0x6c>)
  Timing.SelfRefreshTime      = 4;
 8003fd0:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 8003fd2:	4d19      	ldr	r5, [pc, #100]	; (8004038 <BSP_SDRAM_Init+0x70>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003fd4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003fd8:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003fda:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003fdc:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
 8003fde:	61ab      	str	r3, [r5, #24]
  Timing.ExitSelfRefreshDelay = 7;
 8003fe0:	e9c5 3100 	strd	r3, r1, [r5]
  Timing.RowCycleDelay        = 7;
 8003fe4:	e9c5 2102 	strd	r2, r1, [r5, #8]
  Timing.RPDelay              = 2;
 8003fe8:	e9c5 3304 	strd	r3, r3, [r5, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003fec:	2210      	movs	r2, #16
 8003fee:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003ff0:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003ff2:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003ffa:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003ffc:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004004:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004008:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800400a:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800400e:	f7ff ff1f 	bl	8003e50 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004012:	4629      	mov	r1, r5
 8004014:	4620      	mov	r0, r4
 8004016:	4c09      	ldr	r4, [pc, #36]	; (800403c <BSP_SDRAM_Init+0x74>)
 8004018:	f003 fdda 	bl	8007bd0 <HAL_SDRAM_Init>
 800401c:	3800      	subs	r0, #0
 800401e:	bf18      	it	ne
 8004020:	2001      	movne	r0, #1
 8004022:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004024:	f240 6003 	movw	r0, #1539	; 0x603
 8004028:	f7ff fec8 	bl	8003dbc <BSP_SDRAM_Initialization_sequence>
}
 800402c:	7820      	ldrb	r0, [r4, #0]
 800402e:	bd38      	pop	{r3, r4, r5, pc}
 8004030:	20001028 	.word	0x20001028
 8004034:	a0000140 	.word	0xa0000140
 8004038:	20000fac 	.word	0x20000fac
 800403c:	20000018 	.word	0x20000018

08004040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004040:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004042:	2003      	movs	r0, #3
 8004044:	f000 f97e 	bl	8004344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004048:	2000      	movs	r0, #0
 800404a:	f7fe fc23 	bl	8002894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800404e:	f7fd fda5 	bl	8001b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004052:	2000      	movs	r0, #0
 8004054:	bd08      	pop	{r3, pc}
	...

08004058 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004058:	4a03      	ldr	r2, [pc, #12]	; (8004068 <HAL_IncTick+0x10>)
 800405a:	4b04      	ldr	r3, [pc, #16]	; (800406c <HAL_IncTick+0x14>)
 800405c:	6811      	ldr	r1, [r2, #0]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	440b      	add	r3, r1
 8004062:	6013      	str	r3, [r2, #0]
}
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	2000105c 	.word	0x2000105c
 800406c:	20000019 	.word	0x20000019

08004070 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004070:	4b01      	ldr	r3, [pc, #4]	; (8004078 <HAL_GetTick+0x8>)
 8004072:	6818      	ldr	r0, [r3, #0]
}
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	2000105c 	.word	0x2000105c

0800407c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004080:	f7ff fff6 	bl	8004070 <HAL_GetTick>
 8004084:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004086:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004088:	bf1e      	ittt	ne
 800408a:	4b04      	ldrne	r3, [pc, #16]	; (800409c <HAL_Delay+0x20>)
 800408c:	781b      	ldrbne	r3, [r3, #0]
 800408e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004090:	f7ff ffee 	bl	8004070 <HAL_GetTick>
 8004094:	1b43      	subs	r3, r0, r5
 8004096:	42a3      	cmp	r3, r4
 8004098:	d3fa      	bcc.n	8004090 <HAL_Delay+0x14>
  {
  }
}
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	20000019 	.word	0x20000019

080040a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040a0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80040a2:	4604      	mov	r4, r0
 80040a4:	2800      	cmp	r0, #0
 80040a6:	f000 809b 	beq.w	80041e0 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80040aa:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80040ac:	b925      	cbnz	r5, 80040b8 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040ae:	f7fd fd93 	bl	8001bd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040b2:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040b4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040ba:	06db      	lsls	r3, r3, #27
 80040bc:	f100 808e 	bmi.w	80041dc <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040c6:	f023 0302 	bic.w	r3, r3, #2
 80040ca:	f043 0302 	orr.w	r3, r3, #2
 80040ce:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80040d0:	4b44      	ldr	r3, [pc, #272]	; (80041e4 <HAL_ADC_Init+0x144>)
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80040d8:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	6861      	ldr	r1, [r4, #4]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040e2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040e4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040f4:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040f6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80040fe:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004104:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004106:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800410e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004114:	4934      	ldr	r1, [pc, #208]	; (80041e8 <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004116:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004118:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800411a:	428a      	cmp	r2, r1
 800411c:	d052      	beq.n	80041c4 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800411e:	6899      	ldr	r1, [r3, #8]
 8004120:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8004124:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004126:	6899      	ldr	r1, [r3, #8]
 8004128:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800412a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800412c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800413a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800413c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800413e:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004140:	f022 0202 	bic.w	r2, r2, #2
 8004144:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800414c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800414e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004152:	2a00      	cmp	r2, #0
 8004154:	d03e      	beq.n	80041d4 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004156:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004158:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800415a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800415e:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004160:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004168:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004170:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8004172:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004176:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004178:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800417c:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800417e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004182:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004186:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800418e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8004196:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800419a:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800419c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80041ac:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80041ae:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80041b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041b2:	f023 0303 	bic.w	r3, r3, #3
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80041bc:	2300      	movs	r3, #0
 80041be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80041c2:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041d2:	e7b2      	b.n	800413a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041da:	e7c9      	b.n	8004170 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80041dc:	2001      	movs	r0, #1
 80041de:	e7ed      	b.n	80041bc <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80041e0:	2001      	movs	r0, #1
 80041e2:	e7ee      	b.n	80041c2 <HAL_ADC_Init+0x122>
 80041e4:	40012300 	.word	0x40012300
 80041e8:	0f000001 	.word	0x0f000001

080041ec <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 80041ec:	2300      	movs	r3, #0
{
 80041ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80041f0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80041f2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d077      	beq.n	80042ea <HAL_ADC_ConfigChannel+0xfe>
 80041fa:	2301      	movs	r3, #1
 80041fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004200:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004202:	6803      	ldr	r3, [r0, #0]
 8004204:	b2a5      	uxth	r5, r4
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004206:	2c09      	cmp	r4, #9
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004208:	688e      	ldr	r6, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800420a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800420e:	d93a      	bls.n	8004286 <HAL_ADC_ConfigChannel+0x9a>
 8004210:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8004214:	d037      	beq.n	8004286 <HAL_ADC_ConfigChannel+0x9a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004216:	3a1e      	subs	r2, #30
 8004218:	f04f 0c07 	mov.w	ip, #7
 800421c:	68df      	ldr	r7, [r3, #12]
 800421e:	fa0c fc02 	lsl.w	ip, ip, r2
 8004222:	ea27 070c 	bic.w	r7, r7, ip
 8004226:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004228:	4f41      	ldr	r7, [pc, #260]	; (8004330 <HAL_ADC_ConfigChannel+0x144>)
 800422a:	42bc      	cmp	r4, r7
 800422c:	d126      	bne.n	800427c <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004234:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7)
 8004236:	6849      	ldr	r1, [r1, #4]
 8004238:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800423a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7)
 800423e:	d82f      	bhi.n	80042a0 <HAL_ADC_ConfigChannel+0xb4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004240:	3a05      	subs	r2, #5
 8004242:	261f      	movs	r6, #31
 8004244:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004246:	4096      	lsls	r6, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004248:	fa05 f202 	lsl.w	r2, r5, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800424c:	ea21 0106 	bic.w	r1, r1, r6
 8004250:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004252:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004254:	430a      	orrs	r2, r1
 8004256:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004258:	4a36      	ldr	r2, [pc, #216]	; (8004334 <HAL_ADC_ConfigChannel+0x148>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d108      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x84>
 800425e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8004262:	d144      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x102>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004264:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8004268:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800426c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 8004270:	2300      	movs	r3, #0
 8004272:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004276:	4618      	mov	r0, r3
}
 8004278:	b003      	add	sp, #12
 800427a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800427c:	68df      	ldr	r7, [r3, #12]
 800427e:	fa06 f202 	lsl.w	r2, r6, r2
 8004282:	433a      	orrs	r2, r7
 8004284:	e7d6      	b.n	8004234 <HAL_ADC_ConfigChannel+0x48>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004286:	f04f 0c07 	mov.w	ip, #7
 800428a:	691f      	ldr	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800428c:	4096      	lsls	r6, r2
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800428e:	fa0c fc02 	lsl.w	ip, ip, r2
 8004292:	ea27 070c 	bic.w	r7, r7, ip
 8004296:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004298:	691f      	ldr	r7, [r3, #16]
 800429a:	433e      	orrs	r6, r7
 800429c:	611e      	str	r6, [r3, #16]
 800429e:	e7ca      	b.n	8004236 <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Rank < 13)
 80042a0:	290c      	cmp	r1, #12
 80042a2:	f04f 011f 	mov.w	r1, #31
 80042a6:	d80b      	bhi.n	80042c0 <HAL_ADC_ConfigChannel+0xd4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042a8:	3a23      	subs	r2, #35	; 0x23
 80042aa:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80042ac:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042ae:	fa05 f202 	lsl.w	r2, r5, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042b2:	ea26 0101 	bic.w	r1, r6, r1
 80042b6:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042ba:	430a      	orrs	r2, r1
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30
 80042be:	e7cb      	b.n	8004258 <HAL_ADC_ConfigChannel+0x6c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042c0:	3a41      	subs	r2, #65	; 0x41
 80042c2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80042c4:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80042c6:	4095      	lsls	r5, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042c8:	ea26 0101 	bic.w	r1, r6, r1
 80042cc:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80042ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042d0:	430d      	orrs	r5, r1
 80042d2:	62dd      	str	r5, [r3, #44]	; 0x2c
 80042d4:	e7c0      	b.n	8004258 <HAL_ADC_ConfigChannel+0x6c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80042d6:	4b18      	ldr	r3, [pc, #96]	; (8004338 <HAL_ADC_ConfigChannel+0x14c>)
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80042de:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80042e6:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042e8:	e7c2      	b.n	8004270 <HAL_ADC_ConfigChannel+0x84>
  __HAL_LOCK(hadc);
 80042ea:	2002      	movs	r0, #2
 80042ec:	e7c4      	b.n	8004278 <HAL_ADC_ConfigChannel+0x8c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80042ee:	2c12      	cmp	r4, #18
 80042f0:	d0f1      	beq.n	80042d6 <HAL_ADC_ConfigChannel+0xea>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042f2:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <HAL_ADC_ConfigChannel+0x144>)
 80042f4:	429c      	cmp	r4, r3
 80042f6:	d001      	beq.n	80042fc <HAL_ADC_ConfigChannel+0x110>
 80042f8:	2c11      	cmp	r4, #17
 80042fa:	d1b9      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x84>
    ADC->CCR &= ~ADC_CCR_VBATE;
 80042fc:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <HAL_ADC_ConfigChannel+0x14c>)
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8004304:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800430c:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800430e:	4b08      	ldr	r3, [pc, #32]	; (8004330 <HAL_ADC_ConfigChannel+0x144>)
 8004310:	429c      	cmp	r4, r3
 8004312:	d1ad      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x84>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <HAL_ADC_ConfigChannel+0x150>)
 8004316:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <HAL_ADC_ConfigChannel+0x154>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	fbb3 f3f2 	udiv	r3, r3, r2
 800431e:	220a      	movs	r2, #10
 8004320:	4353      	muls	r3, r2
        counter--;
 8004322:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8004324:	9b01      	ldr	r3, [sp, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0a2      	beq.n	8004270 <HAL_ADC_ConfigChannel+0x84>
        counter--;
 800432a:	9b01      	ldr	r3, [sp, #4]
 800432c:	3b01      	subs	r3, #1
 800432e:	e7f8      	b.n	8004322 <HAL_ADC_ConfigChannel+0x136>
 8004330:	10000012 	.word	0x10000012
 8004334:	40012000 	.word	0x40012000
 8004338:	40012300 	.word	0x40012300
 800433c:	20000008 	.word	0x20000008
 8004340:	000f4240 	.word	0x000f4240

08004344 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004344:	4907      	ldr	r1, [pc, #28]	; (8004364 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004346:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004348:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800434a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800434e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004352:	0412      	lsls	r2, r2, #16
 8004354:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800435c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004360:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004362:	4770      	bx	lr
 8004364:	e000ed00 	.word	0xe000ed00

08004368 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004368:	4b16      	ldr	r3, [pc, #88]	; (80043c4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800436a:	b530      	push	{r4, r5, lr}
 800436c:	68dc      	ldr	r4, [r3, #12]
 800436e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004372:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004376:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004378:	2b04      	cmp	r3, #4
 800437a:	bf28      	it	cs
 800437c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800437e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004380:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004384:	bf8c      	ite	hi
 8004386:	3c03      	subhi	r4, #3
 8004388:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800438a:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800438e:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004390:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004394:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004398:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800439c:	fa03 f304 	lsl.w	r3, r3, r4
 80043a0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80043a8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80043aa:	db06      	blt.n	80043ba <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80043b0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80043b4:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80043b8:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ba:	f000 000f 	and.w	r0, r0, #15
 80043be:	4a02      	ldr	r2, [pc, #8]	; (80043c8 <HAL_NVIC_SetPriority+0x60>)
 80043c0:	5413      	strb	r3, [r2, r0]
 80043c2:	e7f9      	b.n	80043b8 <HAL_NVIC_SetPriority+0x50>
 80043c4:	e000ed00 	.word	0xe000ed00
 80043c8:	e000ed14 	.word	0xe000ed14

080043cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80043cc:	2800      	cmp	r0, #0
 80043ce:	db07      	blt.n	80043e0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043d0:	0941      	lsrs	r1, r0, #5
 80043d2:	2301      	movs	r3, #1
 80043d4:	f000 001f 	and.w	r0, r0, #31
 80043d8:	4a02      	ldr	r2, [pc, #8]	; (80043e4 <HAL_NVIC_EnableIRQ+0x18>)
 80043da:	4083      	lsls	r3, r0
 80043dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	e000e100 	.word	0xe000e100

080043e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80043e8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80043ea:	4604      	mov	r4, r0
 80043ec:	b908      	cbnz	r0, 80043f2 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80043ee:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80043f0:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80043f2:	7f43      	ldrb	r3, [r0, #29]
 80043f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80043f8:	b913      	cbnz	r3, 8004400 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80043fa:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80043fc:	f7fd fc30 	bl	8001c60 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004400:	2302      	movs	r3, #2
 8004402:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004404:	7923      	ldrb	r3, [r4, #4]
 8004406:	b9e3      	cbnz	r3, 8004442 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	4a13      	ldr	r2, [pc, #76]	; (8004458 <HAL_CRC_Init+0x70>)
 800440c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	f022 0218 	bic.w	r2, r2, #24
 8004414:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004416:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004418:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800441a:	b9d2      	cbnz	r2, 8004452 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800441c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004420:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8004422:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	6961      	ldr	r1, [r4, #20]
 8004428:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800442c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800442e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004430:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004438:	430a      	orrs	r2, r1
 800443a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800443c:	2301      	movs	r3, #1
 800443e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8004440:	e7d6      	b.n	80043f0 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004442:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004446:	4620      	mov	r0, r4
 8004448:	f000 f808 	bl	800445c <HAL_CRCEx_Polynomial_Set>
 800444c:	2800      	cmp	r0, #0
 800444e:	d0e2      	beq.n	8004416 <HAL_CRC_Init+0x2e>
 8004450:	e7cd      	b.n	80043ee <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004452:	6922      	ldr	r2, [r4, #16]
 8004454:	e7e4      	b.n	8004420 <HAL_CRC_Init+0x38>
 8004456:	bf00      	nop
 8004458:	04c11db7 	.word	0x04c11db7

0800445c <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800445c:	231f      	movs	r3, #31
{
 800445e:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004460:	3b01      	subs	r3, #1
 8004462:	d31c      	bcc.n	800449e <HAL_CRCEx_Polynomial_Set+0x42>
 8004464:	fa21 f403 	lsr.w	r4, r1, r3
 8004468:	07e4      	lsls	r4, r4, #31
 800446a:	d5f9      	bpl.n	8004460 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800446c:	2a10      	cmp	r2, #16
 800446e:	d012      	beq.n	8004496 <HAL_CRCEx_Polynomial_Set+0x3a>
 8004470:	d804      	bhi.n	800447c <HAL_CRCEx_Polynomial_Set+0x20>
 8004472:	b13a      	cbz	r2, 8004484 <HAL_CRCEx_Polynomial_Set+0x28>
 8004474:	2a08      	cmp	r2, #8
 8004476:	d010      	beq.n	800449a <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8004478:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800447a:	e00b      	b.n	8004494 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 800447c:	2a18      	cmp	r2, #24
 800447e:	d1fb      	bne.n	8004478 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8004480:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8004482:	d8f9      	bhi.n	8004478 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004484:	6800      	ldr	r0, [r0, #0]
 8004486:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004488:	6883      	ldr	r3, [r0, #8]
 800448a:	f023 0318 	bic.w	r3, r3, #24
 800448e:	4313      	orrs	r3, r2
 8004490:	6083      	str	r3, [r0, #8]
 8004492:	2000      	movs	r0, #0
}
 8004494:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8004496:	2b07      	cmp	r3, #7
 8004498:	e7f3      	b.n	8004482 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800449a:	2b0f      	cmp	r3, #15
 800449c:	e7f1      	b.n	8004482 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 800449e:	2a00      	cmp	r2, #0
 80044a0:	d1ea      	bne.n	8004478 <HAL_CRCEx_Polynomial_Set+0x1c>
 80044a2:	e7ef      	b.n	8004484 <HAL_CRCEx_Polynomial_Set+0x28>

080044a4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80044a4:	b538      	push	{r3, r4, r5, lr}
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80044a6:	4604      	mov	r4, r0
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d03f      	beq.n	800452c <HAL_DCMI_Init+0x88>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80044ac:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80044b0:	b90b      	cbnz	r3, 80044b6 <HAL_DCMI_Init+0x12>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80044b2:	f7fd fbeb 	bl	8001c8c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80044b6:	2302      	movs	r3, #2
 80044b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80044bc:	69a3      	ldr	r3, [r4, #24]
 80044be:	b10b      	cbz	r3, 80044c4 <HAL_DCMI_Init+0x20>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80044c0:	2200      	movs	r2, #0
 80044c2:	6262      	str	r2, [r4, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80044c4:	6822      	ldr	r2, [r4, #0]
 80044c6:	491a      	ldr	r1, [pc, #104]	; (8004530 <HAL_DCMI_Init+0x8c>)
 80044c8:	6810      	ldr	r0, [r2, #0]
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80044ca:	6965      	ldr	r5, [r4, #20]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80044cc:	4001      	ands	r1, r0
 80044ce:	6011      	str	r1, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80044d0:	6861      	ldr	r1, [r4, #4]
 80044d2:	6810      	ldr	r0, [r2, #0]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80044d4:	430b      	orrs	r3, r1
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80044d6:	2910      	cmp	r1, #16
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80044d8:	ea43 0305 	orr.w	r3, r3, r5
 80044dc:	68e5      	ldr	r5, [r4, #12]
 80044de:	ea43 0305 	orr.w	r3, r3, r5
 80044e2:	6925      	ldr	r5, [r4, #16]
 80044e4:	ea43 0305 	orr.w	r3, r3, r5
 80044e8:	68a5      	ldr	r5, [r4, #8]
 80044ea:	ea43 0305 	orr.w	r3, r3, r5
 80044ee:	6a25      	ldr	r5, [r4, #32]
 80044f0:	ea43 0305 	orr.w	r3, r3, r5
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80044f4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80044f6:	ea43 0305 	orr.w	r3, r3, r5
 80044fa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80044fc:	ea43 0305 	orr.w	r3, r3, r5
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004500:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8004502:	ea43 0305 	orr.w	r3, r3, r5
 8004506:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004508:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800450c:	ea43 0300 	orr.w	r3, r3, r0
 8004510:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004512:	d101      	bne.n	8004518 <HAL_DCMI_Init+0x74>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004514:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004516:	6193      	str	r3, [r2, #24]
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004518:	68d3      	ldr	r3, [r2, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800451a:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800451c:	f043 031e 	orr.w	r3, r3, #30
 8004520:	60d3      	str	r3, [r2, #12]

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004522:	2301      	movs	r3, #1
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004524:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004526:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
}
 800452a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800452c:	2001      	movs	r0, #1
 800452e:	e7fc      	b.n	800452a <HAL_DCMI_Init+0x86>
 8004530:	ffe0f007 	.word	0xffe0f007

08004534 <HAL_DCMI_ConfigCrop>:
  * @param  X0    DCMI window X offset
  * @param  Y0    DCMI window Y offset
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_ConfigCrop(DCMI_HandleTypeDef *hdcmi, uint32_t X0, uint32_t Y0, uint32_t XSize, uint32_t YSize)
{
 8004534:	b530      	push	{r4, r5, lr}
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004536:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800453a:	2c01      	cmp	r4, #1
 800453c:	f04f 0402 	mov.w	r4, #2
 8004540:	d011      	beq.n	8004566 <HAL_DCMI_ConfigCrop+0x32>
  assert_param(IS_DCMI_WINDOW_HEIGHT(Y0));
  assert_param(IS_DCMI_WINDOW_COORDINATE(XSize));
  assert_param(IS_DCMI_WINDOW_COORDINATE(YSize));

  /* Configure CROP */
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 8004542:	9d03      	ldr	r5, [sp, #12]
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 8004544:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004548:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800454c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004550:	6804      	ldr	r4, [r0, #0]
 8004552:	6263      	str	r3, [r4, #36]	; 0x24

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004554:	2301      	movs	r3, #1
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 8004556:	6222      	str	r2, [r4, #32]
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004558:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800455c:	2300      	movs	r3, #0
 800455e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

  return HAL_OK;
 8004562:	4618      	mov	r0, r3
}
 8004564:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdcmi);
 8004566:	4620      	mov	r0, r4
 8004568:	e7fc      	b.n	8004564 <HAL_DCMI_ConfigCrop+0x30>

0800456a <HAL_DCMI_DisableCrop>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800456a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800456e:	2b01      	cmp	r3, #1
 8004570:	f04f 0302 	mov.w	r3, #2
 8004574:	d00c      	beq.n	8004590 <HAL_DCMI_DisableCrop+0x26>

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;

  /* Disable DCMI Crop feature */
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 8004576:	6802      	ldr	r2, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004578:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 800457c:	6813      	ldr	r3, [r2, #0]
 800457e:	f023 0304 	bic.w	r3, r3, #4
 8004582:	6013      	str	r3, [r2, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8004584:	2301      	movs	r3, #1
 8004586:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800458a:	2300      	movs	r3, #0
 800458c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(hdcmi);
 8004590:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004592:	4770      	bx	lr

08004594 <HAL_DCMI_EnableCrop>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_EnableCrop(DCMI_HandleTypeDef *hdcmi)
{
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004594:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8004598:	2b01      	cmp	r3, #1
 800459a:	f04f 0302 	mov.w	r3, #2
 800459e:	d00c      	beq.n	80045ba <HAL_DCMI_EnableCrop+0x26>

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;

  /* Enable DCMI Crop feature */
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 80045a0:	6802      	ldr	r2, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80045a2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 80045a6:	6813      	ldr	r3, [r2, #0]
 80045a8:	f043 0304 	orr.w	r3, r3, #4
 80045ac:	6013      	str	r3, [r2, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 80045ae:	2301      	movs	r3, #1
 80045b0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80045b4:	2300      	movs	r3, #0
 80045b6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(hdcmi);
 80045ba:	4618      	mov	r0, r3

  return HAL_OK;
}
 80045bc:	4770      	bx	lr
	...

080045c0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045c0:	6803      	ldr	r3, [r0, #0]
 80045c2:	2118      	movs	r1, #24
 80045c4:	b2da      	uxtb	r2, r3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045ca:	3a10      	subs	r2, #16
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045cc:	f023 0303 	bic.w	r3, r3, #3
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045d0:	fbb2 f1f1 	udiv	r1, r2, r1
{
 80045d4:	b510      	push	{r4, lr}
  if (stream_number > 3U)
 80045d6:	2a5f      	cmp	r2, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045d8:	4c03      	ldr	r4, [pc, #12]	; (80045e8 <DMA_CalcBaseAndBitshift+0x28>)
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045da:	bf88      	it	hi
 80045dc:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045de:	5c61      	ldrb	r1, [r4, r1]
 80045e0:	6583      	str	r3, [r0, #88]	; 0x58
 80045e2:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	bd10      	pop	{r4, pc}
 80045e8:	0800c46a 	.word	0x0800c46a

080045ec <HAL_DMA_Init>:
{
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80045f0:	f7ff fd3e 	bl	8004070 <HAL_GetTick>
 80045f4:	4605      	mov	r5, r0
  if(hdma == NULL)
 80045f6:	2c00      	cmp	r4, #0
 80045f8:	d071      	beq.n	80046de <HAL_DMA_Init+0xf2>
  hdma->State = HAL_DMA_STATE_BUSY;
 80045fa:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 80045fc:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80045fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8004602:	2300      	movs	r3, #0
 8004604:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8004608:	6813      	ldr	r3, [r2, #0]
 800460a:	f023 0301 	bic.w	r3, r3, #1
 800460e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004610:	6822      	ldr	r2, [r4, #0]
 8004612:	6813      	ldr	r3, [r2, #0]
 8004614:	07d8      	lsls	r0, r3, #31
 8004616:	d42e      	bmi.n	8004676 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8004618:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800461a:	4832      	ldr	r0, [pc, #200]	; (80046e4 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800461c:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800461e:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004620:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8004624:	432b      	orrs	r3, r5
 8004626:	68e5      	ldr	r5, [r4, #12]
 8004628:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800462a:	6925      	ldr	r5, [r4, #16]
 800462c:	432b      	orrs	r3, r5
 800462e:	6965      	ldr	r5, [r4, #20]
 8004630:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004632:	69e5      	ldr	r5, [r4, #28]
 8004634:	430b      	orrs	r3, r1
 8004636:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004638:	6a25      	ldr	r5, [r4, #32]
 800463a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800463c:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800463e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004640:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004642:	bf02      	ittt	eq
 8004644:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8004648:	4335      	orreq	r5, r6
 800464a:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800464c:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 800464e:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8004650:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004652:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8004656:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800465a:	d132      	bne.n	80046c2 <HAL_DMA_Init+0xd6>
    tmp |= hdma->Init.FIFOThreshold;
 800465c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800465e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8004660:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004662:	b375      	cbz	r5, 80046c2 <HAL_DMA_Init+0xd6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004664:	b991      	cbnz	r1, 800468c <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8004666:	2801      	cmp	r0, #1
 8004668:	d020      	beq.n	80046ac <HAL_DMA_Init+0xc0>
 800466a:	f030 0102 	bics.w	r1, r0, #2
 800466e:	d128      	bne.n	80046c2 <HAL_DMA_Init+0xd6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004670:	01e9      	lsls	r1, r5, #7
 8004672:	d526      	bpl.n	80046c2 <HAL_DMA_Init+0xd6>
 8004674:	e01d      	b.n	80046b2 <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004676:	f7ff fcfb 	bl	8004070 <HAL_GetTick>
 800467a:	1b40      	subs	r0, r0, r5
 800467c:	2805      	cmp	r0, #5
 800467e:	d9c7      	bls.n	8004610 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004680:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004682:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004684:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004686:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800468a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800468c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004690:	d113      	bne.n	80046ba <HAL_DMA_Init+0xce>
    switch (tmp)
 8004692:	2803      	cmp	r0, #3
 8004694:	d815      	bhi.n	80046c2 <HAL_DMA_Init+0xd6>
 8004696:	a101      	add	r1, pc, #4	; (adr r1, 800469c <HAL_DMA_Init+0xb0>)
 8004698:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 800469c:	080046b3 	.word	0x080046b3
 80046a0:	08004671 	.word	0x08004671
 80046a4:	080046b3 	.word	0x080046b3
 80046a8:	080046ad 	.word	0x080046ad
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046ac:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80046b0:	d107      	bne.n	80046c2 <HAL_DMA_Init+0xd6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046b2:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80046b4:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046b6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80046b8:	e7e5      	b.n	8004686 <HAL_DMA_Init+0x9a>
    switch (tmp)
 80046ba:	2802      	cmp	r0, #2
 80046bc:	d9f9      	bls.n	80046b2 <HAL_DMA_Init+0xc6>
 80046be:	2803      	cmp	r0, #3
 80046c0:	d0d6      	beq.n	8004670 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 80046c2:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046c4:	4620      	mov	r0, r4
 80046c6:	f7ff ff7b 	bl	80045c0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80046cc:	233f      	movs	r3, #63	; 0x3f
 80046ce:	4093      	lsls	r3, r2
 80046d0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046d2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80046d4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046d6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80046d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80046dc:	e7d5      	b.n	800468a <HAL_DMA_Init+0x9e>
    return HAL_ERROR;
 80046de:	2001      	movs	r0, #1
 80046e0:	e7d3      	b.n	800468a <HAL_DMA_Init+0x9e>
 80046e2:	bf00      	nop
 80046e4:	f010803f 	.word	0xf010803f

080046e8 <HAL_DMA_DeInit>:
{
 80046e8:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80046ea:	4605      	mov	r5, r0
 80046ec:	b320      	cbz	r0, 8004738 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80046ee:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	b2dc      	uxtb	r4, r3
 80046f6:	d01d      	beq.n	8004734 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80046f8:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 80046fa:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004704:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8004706:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8004708:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800470a:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 800470c:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800470e:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004710:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004712:	f7ff ff55 	bl	80045c0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004716:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004718:	233f      	movs	r3, #63	; 0x3f
 800471a:	4093      	lsls	r3, r2
 800471c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800471e:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8004720:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8004724:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8004728:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800472c:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8004730:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 8004734:	4620      	mov	r0, r4
 8004736:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004738:	2401      	movs	r4, #1
 800473a:	e7fb      	b.n	8004734 <HAL_DMA_DeInit+0x4c>

0800473c <HAL_DMA_Abort>:
{
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004740:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8004742:	f7ff fc95 	bl	8004070 <HAL_GetTick>
 8004746:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004748:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800474c:	2b02      	cmp	r3, #2
 800474e:	d006      	beq.n	800475e <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004750:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
 8004752:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004754:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004756:	2300      	movs	r3, #0
 8004758:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800475c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	f022 0216 	bic.w	r2, r2, #22
 8004766:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800476e:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004770:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004772:	b90a      	cbnz	r2, 8004778 <HAL_DMA_Abort+0x3c>
 8004774:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004776:	b11a      	cbz	r2, 8004780 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	f022 0208 	bic.w	r2, r2, #8
 800477e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	f022 0201 	bic.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f013 0301 	ands.w	r3, r3, #1
 8004790:	d108      	bne.n	80047a4 <HAL_DMA_Abort+0x68>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004792:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004794:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8004796:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004798:	408a      	lsls	r2, r1
 800479a:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800479c:	2201      	movs	r2, #1
 800479e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 80047a2:	e7d8      	b.n	8004756 <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047a4:	f7ff fc64 	bl	8004070 <HAL_GetTick>
 80047a8:	1b40      	subs	r0, r0, r5
 80047aa:	2805      	cmp	r0, #5
 80047ac:	d9ec      	bls.n	8004788 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047ae:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047b0:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047b2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047b4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80047b8:	e7cd      	b.n	8004756 <HAL_DMA_Abort+0x1a>
	...

080047bc <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 80047bc:	2300      	movs	r3, #0
{
 80047be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 80047c0:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047c2:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 80047c4:	4b5b      	ldr	r3, [pc, #364]	; (8004934 <HAL_DMA_IRQHandler+0x178>)
{
 80047c6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047c8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 80047ca:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047cc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80047ce:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047d0:	409a      	lsls	r2, r3
 80047d2:	4232      	tst	r2, r6
 80047d4:	d00c      	beq.n	80047f0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047d6:	6801      	ldr	r1, [r0, #0]
 80047d8:	6808      	ldr	r0, [r1, #0]
 80047da:	0740      	lsls	r0, r0, #29
 80047dc:	d508      	bpl.n	80047f0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047de:	6808      	ldr	r0, [r1, #0]
 80047e0:	f020 0004 	bic.w	r0, r0, #4
 80047e4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047e6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047f0:	2201      	movs	r2, #1
 80047f2:	409a      	lsls	r2, r3
 80047f4:	4232      	tst	r2, r6
 80047f6:	d008      	beq.n	800480a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047f8:	6821      	ldr	r1, [r4, #0]
 80047fa:	6949      	ldr	r1, [r1, #20]
 80047fc:	0609      	lsls	r1, r1, #24
 80047fe:	d504      	bpl.n	800480a <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004800:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004802:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004804:	f042 0202 	orr.w	r2, r2, #2
 8004808:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800480a:	2204      	movs	r2, #4
 800480c:	409a      	lsls	r2, r3
 800480e:	4232      	tst	r2, r6
 8004810:	d008      	beq.n	8004824 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004812:	6821      	ldr	r1, [r4, #0]
 8004814:	6809      	ldr	r1, [r1, #0]
 8004816:	0788      	lsls	r0, r1, #30
 8004818:	d504      	bpl.n	8004824 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800481a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800481c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800481e:	f042 0204 	orr.w	r2, r2, #4
 8004822:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004824:	2210      	movs	r2, #16
 8004826:	409a      	lsls	r2, r3
 8004828:	4232      	tst	r2, r6
 800482a:	d010      	beq.n	800484e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	6819      	ldr	r1, [r3, #0]
 8004830:	0709      	lsls	r1, r1, #28
 8004832:	d50c      	bpl.n	800484e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004834:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	0350      	lsls	r0, r2, #13
 800483a:	d537      	bpl.n	80048ac <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	0319      	lsls	r1, r3, #12
 8004840:	d401      	bmi.n	8004846 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8004842:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004844:	e000      	b.n	8004848 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004846:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8004848:	b10b      	cbz	r3, 800484e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800484a:	4620      	mov	r0, r4
 800484c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800484e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004850:	2220      	movs	r2, #32
 8004852:	408a      	lsls	r2, r1
 8004854:	4232      	tst	r2, r6
 8004856:	d03a      	beq.n	80048ce <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	06c6      	lsls	r6, r0, #27
 800485e:	d536      	bpl.n	80048ce <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004860:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004862:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8004866:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004868:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800486a:	d127      	bne.n	80048bc <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800486c:	f022 0216 	bic.w	r2, r2, #22
 8004870:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004878:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800487a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800487c:	b90a      	cbnz	r2, 8004882 <HAL_DMA_IRQHandler+0xc6>
 800487e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004880:	b11a      	cbz	r2, 800488a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	f022 0208 	bic.w	r2, r2, #8
 8004888:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800488a:	233f      	movs	r3, #63	; 0x3f
 800488c:	408b      	lsls	r3, r1
 800488e:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8004890:	2301      	movs	r3, #1
 8004892:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004896:	2300      	movs	r3, #0
 8004898:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 800489c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d045      	beq.n	800492e <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80048a2:	4620      	mov	r0, r4
}
 80048a4:	b003      	add	sp, #12
 80048a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80048aa:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	05d2      	lsls	r2, r2, #23
 80048b0:	d4c7      	bmi.n	8004842 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	f022 0208 	bic.w	r2, r2, #8
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	e7c2      	b.n	8004842 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048bc:	0350      	lsls	r0, r2, #13
 80048be:	d527      	bpl.n	8004910 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	0319      	lsls	r1, r3, #12
 80048c4:	d431      	bmi.n	800492a <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80048c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80048c8:	b10b      	cbz	r3, 80048ce <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80048ca:	4620      	mov	r0, r4
 80048cc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80048d0:	b36b      	cbz	r3, 800492e <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80048d4:	07da      	lsls	r2, r3, #31
 80048d6:	d519      	bpl.n	800490c <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 80048d8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 80048dc:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 80048de:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 80048e2:	2305      	movs	r3, #5
 80048e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80048e8:	6813      	ldr	r3, [r2, #0]
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80048f0:	9b01      	ldr	r3, [sp, #4]
 80048f2:	3301      	adds	r3, #1
 80048f4:	42bb      	cmp	r3, r7
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	d802      	bhi.n	8004900 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048fa:	6813      	ldr	r3, [r2, #0]
 80048fc:	07db      	lsls	r3, r3, #31
 80048fe:	d4f7      	bmi.n	80048f0 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8004900:	2301      	movs	r3, #1
 8004902:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8004906:	2300      	movs	r3, #0
 8004908:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 800490c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800490e:	e7c6      	b.n	800489e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8004916:	d108      	bne.n	800492a <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004918:	6819      	ldr	r1, [r3, #0]
 800491a:	f021 0110 	bic.w	r1, r1, #16
 800491e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004920:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8004922:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004926:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800492a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800492c:	e7cc      	b.n	80048c8 <HAL_DMA_IRQHandler+0x10c>
}
 800492e:	b003      	add	sp, #12
 8004930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004932:	bf00      	nop
 8004934:	20000008 	.word	0x20000008

08004938 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004938:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800493a:	6804      	ldr	r4, [r0, #0]
 800493c:	9d04      	ldr	r5, [sp, #16]
 800493e:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8004940:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8004944:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8004948:	4333      	orrs	r3, r6
 800494a:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800494c:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800494e:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004950:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004954:	d130      	bne.n	80049b8 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004956:	6885      	ldr	r5, [r0, #8]
 8004958:	b11d      	cbz	r5, 8004962 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800495a:	2d01      	cmp	r5, #1
 800495c:	d103      	bne.n	8004966 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800495e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004962:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004964:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004966:	2d02      	cmp	r5, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004968:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800496c:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004970:	b2ca      	uxtb	r2, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004972:	d107      	bne.n	8004984 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8004974:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8004976:	0a80      	lsrs	r0, r0, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004978:	02c9      	lsls	r1, r1, #11
 800497a:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
 800497e:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8004982:	e7ee      	b.n	8004962 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004984:	2d03      	cmp	r5, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004986:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800498a:	d10a      	bne.n	80049a2 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 800498c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 800498e:	0ac0      	lsrs	r0, r0, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004990:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8004992:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004994:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
 8004998:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 800499c:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 80049a0:	e7df      	b.n	8004962 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 80049a2:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 80049a4:	0b00      	lsrs	r0, r0, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80049a6:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 80049a8:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80049aa:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80049ae:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 80049b2:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 80049b6:	e7d4      	b.n	8004962 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80049b8:	60e1      	str	r1, [r4, #12]
}
 80049ba:	e7d3      	b.n	8004964 <DMA2D_SetConfig+0x2c>

080049bc <HAL_DMA2D_Init>:
{
 80049bc:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 80049be:	4604      	mov	r4, r0
 80049c0:	b330      	cbz	r0, 8004a10 <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80049c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80049c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049ca:	b91b      	cbnz	r3, 80049d4 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 80049cc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 80049d0:	f7fd f9e4 	bl	8001d9c <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80049d4:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80049d6:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80049d8:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80049da:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80049dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80049e0:	6813      	ldr	r3, [r2, #0]
 80049e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80049e6:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80049e8:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80049ea:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80049ec:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80049ee:	f023 0307 	bic.w	r3, r3, #7
 80049f2:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80049f4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80049f6:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80049f8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80049fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80049fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a02:	430b      	orrs	r3, r1
 8004a04:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004a06:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004a08:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004a0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8004a0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004a10:	2001      	movs	r0, #1
 8004a12:	e7fc      	b.n	8004a0e <HAL_DMA2D_Init+0x52>

08004a14 <HAL_DMA2D_Start>:
{
 8004a14:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8004a16:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
 8004a1a:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8004a1c:	2d01      	cmp	r5, #1
 8004a1e:	f04f 0502 	mov.w	r5, #2
 8004a22:	d00f      	beq.n	8004a44 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a24:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8004a28:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004a2a:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8004a2c:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004a30:	9500      	str	r5, [sp, #0]
 8004a32:	f7ff ff81 	bl	8004938 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8004a36:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8004a38:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8004a3a:	6813      	ldr	r3, [r2, #0]
 8004a3c:	4333      	orrs	r3, r6
 8004a3e:	6013      	str	r3, [r2, #0]
}
 8004a40:	b002      	add	sp, #8
 8004a42:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8004a44:	4628      	mov	r0, r5
 8004a46:	e7fb      	b.n	8004a40 <HAL_DMA2D_Start+0x2c>

08004a48 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 8004a48:	2300      	movs	r3, #0
{
 8004a4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8004a4c:	9301      	str	r3, [sp, #4]
{
 8004a4e:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004a50:	6803      	ldr	r3, [r0, #0]
{
 8004a52:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	07db      	lsls	r3, r3, #31
 8004a58:	d418      	bmi.n	8004a8c <HAL_DMA2D_PollForTransfer+0x44>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004a5a:	6822      	ldr	r2, [r4, #0]
 8004a5c:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004a5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a60:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8004a62:	069e      	lsls	r6, r3, #26
 8004a64:	d506      	bpl.n	8004a74 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8004a66:	f7ff fb03 	bl	8004070 <HAL_GetTick>
 8004a6a:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	06d2      	lsls	r2, r2, #27
 8004a72:	d53e      	bpl.n	8004af2 <HAL_DMA2D_PollForTransfer+0xaa>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	2212      	movs	r2, #18
  return HAL_OK;
 8004a78:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004a7a:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8004a82:	2300      	movs	r3, #0
 8004a84:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8004a88:	b002      	add	sp, #8
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8004a8c:	f7ff faf0 	bl	8004070 <HAL_GetTick>
 8004a90:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	0792      	lsls	r2, r2, #30
 8004a98:	d4df      	bmi.n	8004a5a <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004a9e:	9a01      	ldr	r2, [sp, #4]
 8004aa0:	f012 0f21 	tst.w	r2, #33	; 0x21
 8004aa4:	d014      	beq.n	8004ad0 <HAL_DMA2D_PollForTransfer+0x88>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004aa6:	9a01      	ldr	r2, [sp, #4]
 8004aa8:	0695      	lsls	r5, r2, #26
 8004aaa:	d503      	bpl.n	8004ab4 <HAL_DMA2D_PollForTransfer+0x6c>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004aac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004aae:	f042 0202 	orr.w	r2, r2, #2
 8004ab2:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004ab4:	9a01      	ldr	r2, [sp, #4]
 8004ab6:	07d0      	lsls	r0, r2, #31
 8004ab8:	d503      	bpl.n	8004ac2 <HAL_DMA2D_PollForTransfer+0x7a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004aba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004abc:	f042 0201 	orr.w	r2, r2, #1
 8004ac0:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004ac2:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004ac4:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ac6:	2304      	movs	r3, #4
        return HAL_ERROR;
 8004ac8:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004aca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        return HAL_ERROR;
 8004ace:	e7d8      	b.n	8004a82 <HAL_DMA2D_PollForTransfer+0x3a>
      if (Timeout != HAL_MAX_DELAY)
 8004ad0:	1c69      	adds	r1, r5, #1
 8004ad2:	d0df      	beq.n	8004a94 <HAL_DMA2D_PollForTransfer+0x4c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ad4:	f7ff facc 	bl	8004070 <HAL_GetTick>
 8004ad8:	1b80      	subs	r0, r0, r6
 8004ada:	42a8      	cmp	r0, r5
 8004adc:	d801      	bhi.n	8004ae2 <HAL_DMA2D_PollForTransfer+0x9a>
 8004ade:	2d00      	cmp	r5, #0
 8004ae0:	d1d7      	bne.n	8004a92 <HAL_DMA2D_PollForTransfer+0x4a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004ae2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004ae4:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004ae6:	f043 0320 	orr.w	r3, r3, #32
 8004aea:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004aec:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
 8004af0:	e7c7      	b.n	8004a82 <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004af6:	9a01      	ldr	r2, [sp, #4]
 8004af8:	f012 0f29 	tst.w	r2, #41	; 0x29
 8004afc:	d016      	beq.n	8004b2c <HAL_DMA2D_PollForTransfer+0xe4>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004afe:	9a01      	ldr	r2, [sp, #4]
 8004b00:	0716      	lsls	r6, r2, #28
 8004b02:	d503      	bpl.n	8004b0c <HAL_DMA2D_PollForTransfer+0xc4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004b04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004b06:	f042 0204 	orr.w	r2, r2, #4
 8004b0a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b0c:	9a01      	ldr	r2, [sp, #4]
 8004b0e:	0695      	lsls	r5, r2, #26
 8004b10:	d503      	bpl.n	8004b1a <HAL_DMA2D_PollForTransfer+0xd2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b12:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004b14:	f042 0202 	orr.w	r2, r2, #2
 8004b18:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b1a:	9a01      	ldr	r2, [sp, #4]
 8004b1c:	07d0      	lsls	r0, r2, #31
 8004b1e:	d503      	bpl.n	8004b28 <HAL_DMA2D_PollForTransfer+0xe0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b20:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004b28:	2229      	movs	r2, #41	; 0x29
 8004b2a:	e7cb      	b.n	8004ac4 <HAL_DMA2D_PollForTransfer+0x7c>
      if (Timeout != HAL_MAX_DELAY)
 8004b2c:	1c69      	adds	r1, r5, #1
 8004b2e:	d09e      	beq.n	8004a6e <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b30:	f7ff fa9e 	bl	8004070 <HAL_GetTick>
 8004b34:	1b80      	subs	r0, r0, r6
 8004b36:	42a8      	cmp	r0, r5
 8004b38:	d8d3      	bhi.n	8004ae2 <HAL_DMA2D_PollForTransfer+0x9a>
 8004b3a:	2d00      	cmp	r5, #0
 8004b3c:	d196      	bne.n	8004a6c <HAL_DMA2D_PollForTransfer+0x24>
 8004b3e:	e7d0      	b.n	8004ae2 <HAL_DMA2D_PollForTransfer+0x9a>

08004b40 <HAL_DMA2D_LineEventCallback>:
 8004b40:	4770      	bx	lr

08004b42 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8004b42:	4770      	bx	lr

08004b44 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b44:	6803      	ldr	r3, [r0, #0]
{
 8004b46:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b48:	685e      	ldr	r6, [r3, #4]
{
 8004b4a:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004b4c:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b4e:	07f2      	lsls	r2, r6, #31
 8004b50:	d514      	bpl.n	8004b7c <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004b52:	05e9      	lsls	r1, r5, #23
 8004b54:	d512      	bpl.n	8004b7c <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b5c:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b5e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004b60:	f042 0201 	orr.w	r2, r2, #1
 8004b64:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004b66:	2201      	movs	r2, #1
 8004b68:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b6a:	2304      	movs	r3, #4
 8004b6c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004b70:	2300      	movs	r3, #0
 8004b72:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004b76:	6943      	ldr	r3, [r0, #20]
 8004b78:	b103      	cbz	r3, 8004b7c <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8004b7a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b7c:	06b2      	lsls	r2, r6, #26
 8004b7e:	d516      	bpl.n	8004bae <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004b80:	04ab      	lsls	r3, r5, #18
 8004b82:	d514      	bpl.n	8004bae <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b8c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004b8e:	2220      	movs	r2, #32
 8004b90:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b94:	f043 0302 	orr.w	r3, r3, #2
 8004b98:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b9a:	2304      	movs	r3, #4
 8004b9c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004ba6:	6963      	ldr	r3, [r4, #20]
 8004ba8:	b10b      	cbz	r3, 8004bae <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8004baa:	4620      	mov	r0, r4
 8004bac:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004bae:	0730      	lsls	r0, r6, #28
 8004bb0:	d516      	bpl.n	8004be0 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004bb2:	0529      	lsls	r1, r5, #20
 8004bb4:	d514      	bpl.n	8004be0 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004bc0:	2208      	movs	r2, #8
 8004bc2:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004bc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bc6:	f043 0304 	orr.w	r3, r3, #4
 8004bca:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004bcc:	2304      	movs	r3, #4
 8004bce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004bd8:	6963      	ldr	r3, [r4, #20]
 8004bda:	b10b      	cbz	r3, 8004be0 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8004bdc:	4620      	mov	r0, r4
 8004bde:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004be0:	0772      	lsls	r2, r6, #29
 8004be2:	d50b      	bpl.n	8004bfc <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004be4:	056b      	lsls	r3, r5, #21
 8004be6:	d509      	bpl.n	8004bfc <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004be8:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004bea:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004bf8:	f7ff ffa2 	bl	8004b40 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004bfc:	07b0      	lsls	r0, r6, #30
 8004bfe:	d514      	bpl.n	8004c2a <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004c00:	05a9      	lsls	r1, r5, #22
 8004c02:	d512      	bpl.n	8004c2a <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c0c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004c0e:	2202      	movs	r2, #2
 8004c10:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004c12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c14:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8004c22:	6923      	ldr	r3, [r4, #16]
 8004c24:	b10b      	cbz	r3, 8004c2a <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8004c26:	4620      	mov	r0, r4
 8004c28:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004c2a:	06f2      	lsls	r2, r6, #27
 8004c2c:	d513      	bpl.n	8004c56 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004c2e:	04eb      	lsls	r3, r5, #19
 8004c30:	d511      	bpl.n	8004c56 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004c32:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004c34:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c3c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004c3e:	2210      	movs	r2, #16
 8004c40:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004c42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c44:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004c52:	f7ff ff76 	bl	8004b42 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8004c56:	bd70      	pop	{r4, r5, r6, pc}

08004c58 <HAL_DMA2D_ConfigLayer>:
{
 8004c58:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8004c5a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	f04f 0302 	mov.w	r3, #2
 8004c64:	d02b      	beq.n	8004cbe <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c66:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8004c6a:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004c6c:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8004c70:	4f1c      	ldr	r7, [pc, #112]	; (8004ce4 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 8004c72:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004c76:	010e      	lsls	r6, r1, #4
 8004c78:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8004c7a:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8004c7e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c82:	3c09      	subs	r4, #9
 8004c84:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004c86:	bf96      	itet	ls
 8004c88:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004c8c:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004c90:	431a      	orrls	r2, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004c92:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004c94:	b9a9      	cbnz	r1, 8004cc2 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004c96:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c98:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004c9a:	ea01 0107 	and.w	r1, r1, r7
 8004c9e:	ea42 0201 	orr.w	r2, r2, r1
 8004ca2:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004ca4:	6982      	ldr	r2, [r0, #24]
 8004ca6:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ca8:	d803      	bhi.n	8004cb2 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004caa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004cac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004cb0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8004cbe:	4618      	mov	r0, r3
}
 8004cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004cc2:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004cc4:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004cc6:	ea01 0107 	and.w	r1, r1, r7
 8004cca:	ea42 0201 	orr.w	r2, r2, r1
 8004cce:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004cd0:	eb00 0206 	add.w	r2, r0, r6
 8004cd4:	6992      	ldr	r2, [r2, #24]
 8004cd6:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004cd8:	d8eb      	bhi.n	8004cb2 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004cda:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8004cde:	621d      	str	r5, [r3, #32]
 8004ce0:	e7e7      	b.n	8004cb2 <HAL_DMA2D_ConfigLayer+0x5a>
 8004ce2:	bf00      	nop
 8004ce4:	00fcfff0 	.word	0x00fcfff0

08004ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004cec:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cee:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8004ea8 <HAL_GPIO_Init+0x1c0>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cf2:	4a6b      	ldr	r2, [pc, #428]	; (8004ea0 <HAL_GPIO_Init+0x1b8>)
    ioposition = ((uint32_t)0x01) << position;
 8004cf4:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cf6:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8004cf8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cfa:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8004cfe:	43ac      	bics	r4, r5
 8004d00:	f040 80b4 	bne.w	8004e6c <HAL_GPIO_Init+0x184>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d04:	684d      	ldr	r5, [r1, #4]
 8004d06:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d0a:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d0c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d10:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d14:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d16:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d18:	2f01      	cmp	r7, #1
 8004d1a:	d834      	bhi.n	8004d86 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8004d1c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d1e:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d22:	68cf      	ldr	r7, [r1, #12]
 8004d24:	fa07 f708 	lsl.w	r7, r7, r8
 8004d28:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004d2c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004d2e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d30:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d34:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004d38:	409f      	lsls	r7, r3
 8004d3a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004d3e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004d40:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d42:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004d44:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004d48:	688f      	ldr	r7, [r1, #8]
 8004d4a:	fa07 f708 	lsl.w	r7, r7, r8
 8004d4e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8004d52:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d54:	d119      	bne.n	8004d8a <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8004d56:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004d5a:	f003 0b07 	and.w	fp, r3, #7
 8004d5e:	f04f 0e0f 	mov.w	lr, #15
 8004d62:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8004d66:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8004d6a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004d6e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004d72:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004d76:	690f      	ldr	r7, [r1, #16]
 8004d78:	fa07 f70b 	lsl.w	r7, r7, fp
 8004d7c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8004d80:	f8ca 7020 	str.w	r7, [sl, #32]
 8004d84:	e001      	b.n	8004d8a <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d86:	2c03      	cmp	r4, #3
 8004d88:	d1da      	bne.n	8004d40 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8004d8a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004d8c:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d90:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004d94:	ea07 0706 	and.w	r7, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004d98:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8004d9c:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d9e:	d065      	beq.n	8004e6c <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004da0:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004da4:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004da8:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dac:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004db0:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004db4:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db6:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8004dba:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8004dbe:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004dc2:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8004dc6:	9401      	str	r4, [sp, #4]
 8004dc8:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004dca:	240f      	movs	r4, #15
        temp = SYSCFG->EXTICR[position >> 2];
 8004dcc:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004dd0:	40bc      	lsls	r4, r7
 8004dd2:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004dd6:	4c33      	ldr	r4, [pc, #204]	; (8004ea4 <HAL_GPIO_Init+0x1bc>)
 8004dd8:	42a0      	cmp	r0, r4
 8004dda:	d04e      	beq.n	8004e7a <HAL_GPIO_Init+0x192>
 8004ddc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004de0:	42a0      	cmp	r0, r4
 8004de2:	d04c      	beq.n	8004e7e <HAL_GPIO_Init+0x196>
 8004de4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004de8:	42a0      	cmp	r0, r4
 8004dea:	d04a      	beq.n	8004e82 <HAL_GPIO_Init+0x19a>
 8004dec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004df0:	42a0      	cmp	r0, r4
 8004df2:	d048      	beq.n	8004e86 <HAL_GPIO_Init+0x19e>
 8004df4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004df8:	42a0      	cmp	r0, r4
 8004dfa:	d046      	beq.n	8004e8a <HAL_GPIO_Init+0x1a2>
 8004dfc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e00:	42a0      	cmp	r0, r4
 8004e02:	d044      	beq.n	8004e8e <HAL_GPIO_Init+0x1a6>
 8004e04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e08:	42a0      	cmp	r0, r4
 8004e0a:	d042      	beq.n	8004e92 <HAL_GPIO_Init+0x1aa>
 8004e0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e10:	42a0      	cmp	r0, r4
 8004e12:	d040      	beq.n	8004e96 <HAL_GPIO_Init+0x1ae>
 8004e14:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e18:	42a0      	cmp	r0, r4
 8004e1a:	d03e      	beq.n	8004e9a <HAL_GPIO_Init+0x1b2>
 8004e1c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e20:	42a0      	cmp	r0, r4
 8004e22:	bf0c      	ite	eq
 8004e24:	2409      	moveq	r4, #9
 8004e26:	240a      	movne	r4, #10
 8004e28:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e2a:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e2c:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8004e30:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8004e32:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8004e36:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004e38:	bf54      	ite	pl
 8004e3a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004e3c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e40:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8004e42:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8004e44:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8004e46:	bf54      	ite	pl
 8004e48:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004e4a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e4e:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8004e50:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8004e52:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004e54:	bf54      	ite	pl
 8004e56:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004e58:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e5c:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8004e5e:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8004e60:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004e62:	bf54      	ite	pl
 8004e64:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004e66:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8004e6a:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	2b10      	cmp	r3, #16
 8004e70:	f47f af40 	bne.w	8004cf4 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004e74:	b003      	add	sp, #12
 8004e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e7a:	2400      	movs	r4, #0
 8004e7c:	e7d4      	b.n	8004e28 <HAL_GPIO_Init+0x140>
 8004e7e:	2401      	movs	r4, #1
 8004e80:	e7d2      	b.n	8004e28 <HAL_GPIO_Init+0x140>
 8004e82:	2402      	movs	r4, #2
 8004e84:	e7d0      	b.n	8004e28 <HAL_GPIO_Init+0x140>
 8004e86:	2403      	movs	r4, #3
 8004e88:	e7ce      	b.n	8004e28 <HAL_GPIO_Init+0x140>
 8004e8a:	2404      	movs	r4, #4
 8004e8c:	e7cc      	b.n	8004e28 <HAL_GPIO_Init+0x140>
 8004e8e:	2405      	movs	r4, #5
 8004e90:	e7ca      	b.n	8004e28 <HAL_GPIO_Init+0x140>
 8004e92:	2406      	movs	r4, #6
 8004e94:	e7c8      	b.n	8004e28 <HAL_GPIO_Init+0x140>
 8004e96:	2407      	movs	r4, #7
 8004e98:	e7c6      	b.n	8004e28 <HAL_GPIO_Init+0x140>
 8004e9a:	2408      	movs	r4, #8
 8004e9c:	e7c4      	b.n	8004e28 <HAL_GPIO_Init+0x140>
 8004e9e:	bf00      	nop
 8004ea0:	40013c00 	.word	0x40013c00
 8004ea4:	40020000 	.word	0x40020000
 8004ea8:	40023800 	.word	0x40023800

08004eac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004eb0:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004eb2:	4c49      	ldr	r4, [pc, #292]	; (8004fd8 <HAL_GPIO_DeInit+0x12c>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004eb4:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004fe0 <HAL_GPIO_DeInit+0x134>
 8004eb8:	f8df a128 	ldr.w	sl, [pc, #296]	; 8004fe4 <HAL_GPIO_DeInit+0x138>
 8004ebc:	f8df b128 	ldr.w	fp, [pc, #296]	; 8004fe8 <HAL_GPIO_DeInit+0x13c>
    ioposition = ((uint32_t)0x01) << position;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 8004ec6:	ea3e 0501 	bics.w	r5, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8004eca:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8004ece:	d16c      	bne.n	8004faa <HAL_GPIO_DeInit+0xfe>
      tmp = SYSCFG->EXTICR[position >> 2];
 8004ed0:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ed4:	f002 0c03 	and.w	ip, r2, #3
 8004ed8:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004eda:	4b40      	ldr	r3, [pc, #256]	; (8004fdc <HAL_GPIO_DeInit+0x130>)
 8004edc:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ee0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004ee4:	4298      	cmp	r0, r3
 8004ee6:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004eea:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8004eee:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ef2:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004ef6:	d05d      	beq.n	8004fb4 <HAL_GPIO_DeInit+0x108>
 8004ef8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004efc:	4298      	cmp	r0, r3
 8004efe:	d05b      	beq.n	8004fb8 <HAL_GPIO_DeInit+0x10c>
 8004f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f04:	4298      	cmp	r0, r3
 8004f06:	d059      	beq.n	8004fbc <HAL_GPIO_DeInit+0x110>
 8004f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f0c:	4298      	cmp	r0, r3
 8004f0e:	d057      	beq.n	8004fc0 <HAL_GPIO_DeInit+0x114>
 8004f10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f14:	4298      	cmp	r0, r3
 8004f16:	d055      	beq.n	8004fc4 <HAL_GPIO_DeInit+0x118>
 8004f18:	4548      	cmp	r0, r9
 8004f1a:	d055      	beq.n	8004fc8 <HAL_GPIO_DeInit+0x11c>
 8004f1c:	4550      	cmp	r0, sl
 8004f1e:	d055      	beq.n	8004fcc <HAL_GPIO_DeInit+0x120>
 8004f20:	4558      	cmp	r0, fp
 8004f22:	d055      	beq.n	8004fd0 <HAL_GPIO_DeInit+0x124>
 8004f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f28:	4298      	cmp	r0, r3
 8004f2a:	d053      	beq.n	8004fd4 <HAL_GPIO_DeInit+0x128>
 8004f2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f30:	4298      	cmp	r0, r3
 8004f32:	bf0c      	ite	eq
 8004f34:	2309      	moveq	r3, #9
 8004f36:	230a      	movne	r3, #10
 8004f38:	fa03 f30c 	lsl.w	r3, r3, ip
 8004f3c:	4543      	cmp	r3, r8
 8004f3e:	d113      	bne.n	8004f68 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	ea23 0307 	bic.w	r3, r3, r7
 8004f46:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004f48:	6863      	ldr	r3, [r4, #4]
 8004f4a:	ea23 0307 	bic.w	r3, r3, r7
 8004f4e:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004f50:	68e3      	ldr	r3, [r4, #12]
 8004f52:	ea23 0307 	bic.w	r3, r3, r7
 8004f56:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004f58:	68a3      	ldr	r3, [r4, #8]
 8004f5a:	ea23 0307 	bic.w	r3, r3, r7
 8004f5e:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004f60:	68ab      	ldr	r3, [r5, #8]
 8004f62:	ea23 0306 	bic.w	r3, r3, r6
 8004f66:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f68:	0056      	lsls	r6, r2, #1
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f6e:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f72:	40b3      	lsls	r3, r6
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f74:	270f      	movs	r7, #15
 8004f76:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f7a:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f7e:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f82:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f84:	08d5      	lsrs	r5, r2, #3
 8004f86:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8004f8a:	6a2e      	ldr	r6, [r5, #32]
 8004f8c:	ea26 0607 	bic.w	r6, r6, r7
 8004f90:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004f92:	68c5      	ldr	r5, [r0, #12]
 8004f94:	ea25 0503 	bic.w	r5, r5, r3
 8004f98:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f9a:	6845      	ldr	r5, [r0, #4]
 8004f9c:	ea25 050e 	bic.w	r5, r5, lr
 8004fa0:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004fa2:	6885      	ldr	r5, [r0, #8]
 8004fa4:	ea25 0303 	bic.w	r3, r5, r3
 8004fa8:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004faa:	3201      	adds	r2, #1
 8004fac:	2a10      	cmp	r2, #16
 8004fae:	d187      	bne.n	8004ec0 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8004fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e7bf      	b.n	8004f38 <HAL_GPIO_DeInit+0x8c>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e7bd      	b.n	8004f38 <HAL_GPIO_DeInit+0x8c>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e7bb      	b.n	8004f38 <HAL_GPIO_DeInit+0x8c>
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e7b9      	b.n	8004f38 <HAL_GPIO_DeInit+0x8c>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	e7b7      	b.n	8004f38 <HAL_GPIO_DeInit+0x8c>
 8004fc8:	2305      	movs	r3, #5
 8004fca:	e7b5      	b.n	8004f38 <HAL_GPIO_DeInit+0x8c>
 8004fcc:	2306      	movs	r3, #6
 8004fce:	e7b3      	b.n	8004f38 <HAL_GPIO_DeInit+0x8c>
 8004fd0:	2307      	movs	r3, #7
 8004fd2:	e7b1      	b.n	8004f38 <HAL_GPIO_DeInit+0x8c>
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	e7af      	b.n	8004f38 <HAL_GPIO_DeInit+0x8c>
 8004fd8:	40013c00 	.word	0x40013c00
 8004fdc:	40020000 	.word	0x40020000
 8004fe0:	40021400 	.word	0x40021400
 8004fe4:	40021800 	.word	0x40021800
 8004fe8:	40021c00 	.word	0x40021c00

08004fec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fec:	6903      	ldr	r3, [r0, #16]
 8004fee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004ff0:	bf14      	ite	ne
 8004ff2:	2001      	movne	r0, #1
 8004ff4:	2000      	moveq	r0, #0
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ff8:	b10a      	cbz	r2, 8004ffe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004ffa:	6181      	str	r1, [r0, #24]
  }
}
 8004ffc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004ffe:	0409      	lsls	r1, r1, #16
 8005000:	e7fb      	b.n	8004ffa <HAL_GPIO_WritePin+0x2>

08005002 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005002:	6803      	ldr	r3, [r0, #0]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	0791      	lsls	r1, r2, #30
 8005008:	d501      	bpl.n	800500e <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800500a:	2200      	movs	r2, #0
 800500c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800500e:	699a      	ldr	r2, [r3, #24]
 8005010:	07d2      	lsls	r2, r2, #31
 8005012:	d403      	bmi.n	800501c <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	f042 0201 	orr.w	r2, r2, #1
 800501a:	619a      	str	r2, [r3, #24]
  }
}
 800501c:	4770      	bx	lr
	...

08005020 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005020:	b530      	push	{r4, r5, lr}
 8005022:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005024:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005028:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800502a:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800502c:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800502e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8005032:	4a05      	ldr	r2, [pc, #20]	; (8005048 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005034:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005036:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800503a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800503e:	ea20 0002 	bic.w	r0, r0, r2
 8005042:	4303      	orrs	r3, r0
 8005044:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005046:	bd30      	pop	{r4, r5, pc}
 8005048:	03ff63ff 	.word	0x03ff63ff

0800504c <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800504c:	6803      	ldr	r3, [r0, #0]
{
 800504e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8005052:	699c      	ldr	r4, [r3, #24]
{
 8005054:	4605      	mov	r5, r0
 8005056:	460f      	mov	r7, r1
 8005058:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800505a:	f014 0410 	ands.w	r4, r4, #16
 800505e:	d06f      	beq.n	8005140 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8005060:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005062:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8005064:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005066:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	699a      	ldr	r2, [r3, #24]
 800506c:	0690      	lsls	r0, r2, #26
 800506e:	d461      	bmi.n	8005134 <I2C_IsErrorOccurred+0xe8>
 8005070:	f1b8 0f00 	cmp.w	r8, #0
 8005074:	d035      	beq.n	80050e2 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8005076:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800507a:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800507c:	682e      	ldr	r6, [r5, #0]
 800507e:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005080:	05d9      	lsls	r1, r3, #23
 8005082:	d505      	bpl.n	8005090 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005084:	f44f 7280 	mov.w	r2, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8005088:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800508c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800508e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005090:	055a      	lsls	r2, r3, #21
 8005092:	d505      	bpl.n	80050a0 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005094:	f44f 6280 	mov.w	r2, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8005098:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800509c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800509e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80050a0:	059b      	lsls	r3, r3, #22
 80050a2:	d54f      	bpl.n	8005144 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050a4:	f44f 7300 	mov.w	r3, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80050a8:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050ac:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 80050ae:	4628      	mov	r0, r5
 80050b0:	f7ff ffa7 	bl	8005002 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80050b4:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 80050b6:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80050b8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80050bc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80050c0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80050c4:	f023 0301 	bic.w	r3, r3, #1
 80050c8:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 80050ca:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80050cc:	4323      	orrs	r3, r4
 80050ce:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80050d0:	2320      	movs	r3, #32
 80050d2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d6:	2300      	movs	r3, #0
 80050d8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80050dc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 80050e0:	e032      	b.n	8005148 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 80050e2:	1c7a      	adds	r2, r7, #1
 80050e4:	d0c1      	beq.n	800506a <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050e6:	f7fe ffc3 	bl	8004070 <HAL_GetTick>
 80050ea:	1b80      	subs	r0, r0, r6
 80050ec:	42b8      	cmp	r0, r7
 80050ee:	d801      	bhi.n	80050f4 <I2C_IsErrorOccurred+0xa8>
 80050f0:	2f00      	cmp	r7, #0
 80050f2:	d1b9      	bne.n	8005068 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80050f8:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80050fc:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80050fe:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005100:	0400      	lsls	r0, r0, #16
 8005102:	d50a      	bpl.n	800511a <I2C_IsErrorOccurred+0xce>
 8005104:	0449      	lsls	r1, r1, #17
 8005106:	d408      	bmi.n	800511a <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8005108:	2a20      	cmp	r2, #32
 800510a:	d006      	beq.n	800511a <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005112:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8005114:	f7fe ffac 	bl	8004070 <HAL_GetTick>
 8005118:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800511a:	682b      	ldr	r3, [r5, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	069b      	lsls	r3, r3, #26
 8005120:	d4a2      	bmi.n	8005068 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005122:	f7fe ffa5 	bl	8004070 <HAL_GetTick>
 8005126:	1b80      	subs	r0, r0, r6
 8005128:	2819      	cmp	r0, #25
 800512a:	d9f6      	bls.n	800511a <I2C_IsErrorOccurred+0xce>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800512c:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800512e:	f04f 0801 	mov.w	r8, #1
 8005132:	e799      	b.n	8005068 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8005134:	f1b8 0f00 	cmp.w	r8, #0
 8005138:	d19d      	bne.n	8005076 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800513a:	2220      	movs	r2, #32
 800513c:	61da      	str	r2, [r3, #28]
 800513e:	e79a      	b.n	8005076 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8005140:	4620      	mov	r0, r4
 8005142:	e79b      	b.n	800507c <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8005144:	2800      	cmp	r0, #0
 8005146:	d1b2      	bne.n	80050ae <I2C_IsErrorOccurred+0x62>
}
 8005148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800514c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	4604      	mov	r4, r0
 8005150:	460d      	mov	r5, r1
 8005152:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	079b      	lsls	r3, r3, #30
 800515a:	d501      	bpl.n	8005160 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800515c:	2000      	movs	r0, #0
}
 800515e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005160:	4632      	mov	r2, r6
 8005162:	4629      	mov	r1, r5
 8005164:	4620      	mov	r0, r4
 8005166:	f7ff ff71 	bl	800504c <I2C_IsErrorOccurred>
 800516a:	b9a0      	cbnz	r0, 8005196 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800516c:	1c6a      	adds	r2, r5, #1
 800516e:	d0f1      	beq.n	8005154 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005170:	f7fe ff7e 	bl	8004070 <HAL_GetTick>
 8005174:	1b80      	subs	r0, r0, r6
 8005176:	42a8      	cmp	r0, r5
 8005178:	d801      	bhi.n	800517e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800517a:	2d00      	cmp	r5, #0
 800517c:	d1ea      	bne.n	8005154 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800517e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005180:	f043 0320 	orr.w	r3, r3, #32
 8005184:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005186:	2320      	movs	r3, #32
 8005188:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800518c:	2300      	movs	r3, #0
 800518e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005192:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005196:	2001      	movs	r0, #1
 8005198:	e7e1      	b.n	800515e <I2C_WaitOnTXISFlagUntilTimeout+0x12>

0800519a <I2C_WaitOnFlagUntilTimeout>:
{
 800519a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800519e:	9f06      	ldr	r7, [sp, #24]
 80051a0:	4604      	mov	r4, r0
 80051a2:	4688      	mov	r8, r1
 80051a4:	4616      	mov	r6, r2
 80051a6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051a8:	6822      	ldr	r2, [r4, #0]
 80051aa:	6993      	ldr	r3, [r2, #24]
 80051ac:	ea38 0303 	bics.w	r3, r8, r3
 80051b0:	bf0c      	ite	eq
 80051b2:	2301      	moveq	r3, #1
 80051b4:	2300      	movne	r3, #0
 80051b6:	42b3      	cmp	r3, r6
 80051b8:	d001      	beq.n	80051be <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80051ba:	2000      	movs	r0, #0
 80051bc:	e015      	b.n	80051ea <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80051be:	1c6b      	adds	r3, r5, #1
 80051c0:	d0f3      	beq.n	80051aa <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c2:	f7fe ff55 	bl	8004070 <HAL_GetTick>
 80051c6:	1bc0      	subs	r0, r0, r7
 80051c8:	42a8      	cmp	r0, r5
 80051ca:	d801      	bhi.n	80051d0 <I2C_WaitOnFlagUntilTimeout+0x36>
 80051cc:	2d00      	cmp	r5, #0
 80051ce:	d1eb      	bne.n	80051a8 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80051d2:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051d4:	f043 0320 	orr.w	r3, r3, #32
 80051d8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051da:	2320      	movs	r3, #32
 80051dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e0:	2300      	movs	r3, #0
 80051e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80051e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80051ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080051ee <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80051ee:	b570      	push	{r4, r5, r6, lr}
 80051f0:	4604      	mov	r4, r0
 80051f2:	460d      	mov	r5, r1
 80051f4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	069b      	lsls	r3, r3, #26
 80051fc:	d501      	bpl.n	8005202 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80051fe:	2000      	movs	r0, #0
}
 8005200:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005202:	4632      	mov	r2, r6
 8005204:	4629      	mov	r1, r5
 8005206:	4620      	mov	r0, r4
 8005208:	f7ff ff20 	bl	800504c <I2C_IsErrorOccurred>
 800520c:	b990      	cbnz	r0, 8005234 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520e:	f7fe ff2f 	bl	8004070 <HAL_GetTick>
 8005212:	1b80      	subs	r0, r0, r6
 8005214:	42a8      	cmp	r0, r5
 8005216:	d801      	bhi.n	800521c <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8005218:	2d00      	cmp	r5, #0
 800521a:	d1ec      	bne.n	80051f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800521c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800521e:	f043 0320 	orr.w	r3, r3, #32
 8005222:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005224:	2320      	movs	r3, #32
 8005226:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800522a:	2300      	movs	r3, #0
 800522c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005230:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005234:	2001      	movs	r0, #1
 8005236:	e7e3      	b.n	8005200 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08005238 <HAL_I2C_Init>:
{
 8005238:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800523a:	4604      	mov	r4, r0
 800523c:	2800      	cmp	r0, #0
 800523e:	d04a      	beq.n	80052d6 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005240:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005244:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005248:	b91b      	cbnz	r3, 8005252 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800524a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800524e:	f7fc fdc5 	bl	8001ddc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005252:	2324      	movs	r3, #36	; 0x24
 8005254:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005262:	6862      	ldr	r2, [r4, #4]
 8005264:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005268:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005270:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005272:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005276:	2901      	cmp	r1, #1
 8005278:	d124      	bne.n	80052c4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800527a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800527e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005280:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005282:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005284:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005288:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800528c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005294:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005296:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800529a:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800529c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800529e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80052a2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052a4:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80052b4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052b6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052bc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052be:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80052c2:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052c4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052c8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052ca:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052cc:	d1d8      	bne.n	8005280 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80052ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052d2:	605a      	str	r2, [r3, #4]
 80052d4:	e7d4      	b.n	8005280 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80052d6:	2001      	movs	r0, #1
 80052d8:	e7f3      	b.n	80052c2 <HAL_I2C_Init+0x8a>

080052da <HAL_I2C_DeInit>:
{
 80052da:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80052dc:	4604      	mov	r4, r0
 80052de:	b198      	cbz	r0, 8005308 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80052e0:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80052e2:	2324      	movs	r3, #36	; 0x24
 80052e4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80052e8:	6813      	ldr	r3, [r2, #0]
 80052ea:	f023 0301 	bic.w	r3, r3, #1
 80052ee:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80052f0:	f7fc fe0c 	bl	8001f0c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f4:	2000      	movs	r0, #0
 80052f6:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 80052f8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80052fc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005300:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005302:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005306:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005308:	2001      	movs	r0, #1
 800530a:	e7fc      	b.n	8005306 <HAL_I2C_DeInit+0x2c>

0800530c <HAL_I2C_Mem_Write>:
{
 800530c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005310:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005312:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8005316:	4604      	mov	r4, r0
 8005318:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800531a:	2b20      	cmp	r3, #32
{
 800531c:	4616      	mov	r6, r2
 800531e:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005322:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005326:	f040 80c6 	bne.w	80054b6 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800532a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800532c:	b113      	cbz	r3, 8005334 <HAL_I2C_Mem_Write+0x28>
 800532e:	f1ba 0f00 	cmp.w	sl, #0
 8005332:	d106      	bne.n	8005342 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005338:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800533a:	2001      	movs	r0, #1
}
 800533c:	b003      	add	sp, #12
 800533e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005342:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005346:	2b01      	cmp	r3, #1
 8005348:	f000 80b5 	beq.w	80054b6 <HAL_I2C_Mem_Write+0x1aa>
 800534c:	f04f 0b01 	mov.w	fp, #1
 8005350:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005354:	f7fe fe8c 	bl	8004070 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005358:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800535a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800535c:	9000      	str	r0, [sp, #0]
 800535e:	465a      	mov	r2, fp
 8005360:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005364:	4620      	mov	r0, r4
 8005366:	f7ff ff18 	bl	800519a <I2C_WaitOnFlagUntilTimeout>
 800536a:	2800      	cmp	r0, #0
 800536c:	d1e5      	bne.n	800533a <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800536e:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005370:	fa5f f289 	uxtb.w	r2, r9
 8005374:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8005376:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005378:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800537c:	2340      	movs	r3, #64	; 0x40
 800537e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005384:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005386:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005388:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800538a:	4b4c      	ldr	r3, [pc, #304]	; (80054bc <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800538c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005396:	f7ff fe43 	bl	8005020 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800539a:	462a      	mov	r2, r5
 800539c:	4641      	mov	r1, r8
 800539e:	4620      	mov	r0, r4
 80053a0:	f7ff fed4 	bl	800514c <I2C_WaitOnTXISFlagUntilTimeout>
 80053a4:	bb18      	cbnz	r0, 80053ee <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053a6:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053aa:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053ac:	d115      	bne.n	80053da <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053ae:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80053b0:	2200      	movs	r2, #0
 80053b2:	2180      	movs	r1, #128	; 0x80
 80053b4:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053b6:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80053b8:	4643      	mov	r3, r8
 80053ba:	9500      	str	r5, [sp, #0]
 80053bc:	f7ff feed 	bl	800519a <I2C_WaitOnFlagUntilTimeout>
 80053c0:	b9a8      	cbnz	r0, 80053ee <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2bff      	cmp	r3, #255	; 0xff
 80053c8:	d815      	bhi.n	80053f6 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80053ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053d0:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80053d2:	b292      	uxth	r2, r2
 80053d4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	e012      	b.n	8005400 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80053da:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053dc:	4641      	mov	r1, r8
 80053de:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80053e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e2:	462a      	mov	r2, r5
 80053e4:	f7ff feb2 	bl	800514c <I2C_WaitOnTXISFlagUntilTimeout>
 80053e8:	b908      	cbnz	r0, 80053ee <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	e7df      	b.n	80053ae <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 80053ee:	2300      	movs	r3, #0
 80053f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80053f4:	e7a1      	b.n	800533a <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053f6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053fc:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053fe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005400:	4639      	mov	r1, r7
 8005402:	4620      	mov	r0, r4
 8005404:	f7ff fe0c 	bl	8005020 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005408:	462a      	mov	r2, r5
 800540a:	4641      	mov	r1, r8
 800540c:	4620      	mov	r0, r4
 800540e:	f7ff fe9d 	bl	800514c <I2C_WaitOnTXISFlagUntilTimeout>
 8005412:	2800      	cmp	r0, #0
 8005414:	d191      	bne.n	800533a <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005416:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005418:	6822      	ldr	r2, [r4, #0]
 800541a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800541e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005420:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005422:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005424:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005426:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005428:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800542a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800542c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800542e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005430:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005432:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005434:	b29b      	uxth	r3, r3
 8005436:	b1b3      	cbz	r3, 8005466 <HAL_I2C_Mem_Write+0x15a>
 8005438:	b9aa      	cbnz	r2, 8005466 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800543a:	4643      	mov	r3, r8
 800543c:	2180      	movs	r1, #128	; 0x80
 800543e:	4620      	mov	r0, r4
 8005440:	9500      	str	r5, [sp, #0]
 8005442:	f7ff feaa 	bl	800519a <I2C_WaitOnFlagUntilTimeout>
 8005446:	2800      	cmp	r0, #0
 8005448:	f47f af77 	bne.w	800533a <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800544c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800544e:	b29b      	uxth	r3, r3
 8005450:	2bff      	cmp	r3, #255	; 0xff
 8005452:	d928      	bls.n	80054a6 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005454:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800545a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800545c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800545e:	4639      	mov	r1, r7
 8005460:	4620      	mov	r0, r4
 8005462:	f7ff fddd 	bl	8005020 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005466:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1cc      	bne.n	8005408 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800546e:	462a      	mov	r2, r5
 8005470:	4641      	mov	r1, r8
 8005472:	4620      	mov	r0, r4
 8005474:	f7ff febb 	bl	80051ee <I2C_WaitOnSTOPFlagUntilTimeout>
 8005478:	2800      	cmp	r0, #0
 800547a:	f47f af5e 	bne.w	800533a <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	2120      	movs	r1, #32
 8005482:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800548a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800548e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005492:	f022 0201 	bic.w	r2, r2, #1
 8005496:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005498:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800549c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054a0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80054a4:	e74a      	b.n	800533c <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80054a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054ac:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80054ae:	b292      	uxth	r2, r2
 80054b0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	e7d3      	b.n	800545e <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 80054b6:	2002      	movs	r0, #2
 80054b8:	e740      	b.n	800533c <HAL_I2C_Mem_Write+0x30>
 80054ba:	bf00      	nop
 80054bc:	80002000 	.word	0x80002000

080054c0 <HAL_I2C_Mem_Read>:
{
 80054c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c4:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80054ca:	4604      	mov	r4, r0
 80054cc:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ce:	2b20      	cmp	r3, #32
{
 80054d0:	4616      	mov	r6, r2
 80054d2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80054d6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80054da:	f040 80c9 	bne.w	8005670 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 80054de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054e0:	b113      	cbz	r3, 80054e8 <HAL_I2C_Mem_Read+0x28>
 80054e2:	f1ba 0f00 	cmp.w	sl, #0
 80054e6:	d106      	bne.n	80054f6 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054ec:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80054ee:	2001      	movs	r0, #1
}
 80054f0:	b003      	add	sp, #12
 80054f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80054f6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	f000 80b8 	beq.w	8005670 <HAL_I2C_Mem_Read+0x1b0>
 8005500:	f04f 0b01 	mov.w	fp, #1
 8005504:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005508:	f7fe fdb2 	bl	8004070 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800550c:	2319      	movs	r3, #25
 800550e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005510:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005512:	465a      	mov	r2, fp
 8005514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005518:	4620      	mov	r0, r4
 800551a:	f7ff fe3e 	bl	800519a <I2C_WaitOnFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2800      	cmp	r0, #0
 8005522:	d1e4      	bne.n	80054ee <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005524:	2222      	movs	r2, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005526:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8005528:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800552a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800552e:	2240      	movs	r2, #64	; 0x40
 8005530:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005534:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005536:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005538:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800553a:	6262      	str	r2, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800553c:	4a4d      	ldr	r2, [pc, #308]	; (8005674 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800553e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005542:	9200      	str	r2, [sp, #0]
 8005544:	fa5f f289 	uxtb.w	r2, r9
 8005548:	f7ff fd6a 	bl	8005020 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800554c:	462a      	mov	r2, r5
 800554e:	4641      	mov	r1, r8
 8005550:	4620      	mov	r0, r4
 8005552:	f7ff fdfb 	bl	800514c <I2C_WaitOnTXISFlagUntilTimeout>
 8005556:	bb20      	cbnz	r0, 80055a2 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005558:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800555c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800555e:	d116      	bne.n	800558e <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005560:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005562:	2200      	movs	r2, #0
 8005564:	2140      	movs	r1, #64	; 0x40
 8005566:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005568:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800556a:	4643      	mov	r3, r8
 800556c:	9500      	str	r5, [sp, #0]
 800556e:	f7ff fe14 	bl	800519a <I2C_WaitOnFlagUntilTimeout>
 8005572:	b9b0      	cbnz	r0, 80055a2 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005574:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005576:	b29b      	uxth	r3, r3
 8005578:	2bff      	cmp	r3, #255	; 0xff
 800557a:	4b3f      	ldr	r3, [pc, #252]	; (8005678 <HAL_I2C_Mem_Read+0x1b8>)
 800557c:	d815      	bhi.n	80055aa <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800557e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8005586:	b292      	uxth	r2, r2
 8005588:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	e012      	b.n	80055b4 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800558e:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005590:	4641      	mov	r1, r8
 8005592:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005594:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005596:	462a      	mov	r2, r5
 8005598:	f7ff fdd8 	bl	800514c <I2C_WaitOnTXISFlagUntilTimeout>
 800559c:	b908      	cbnz	r0, 80055a2 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	e7de      	b.n	8005560 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 80055a2:	2300      	movs	r3, #0
 80055a4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80055a8:	e7a1      	b.n	80054ee <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055aa:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055b2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055b4:	4639      	mov	r1, r7
 80055b6:	4620      	mov	r0, r4
 80055b8:	f7ff fd32 	bl	8005020 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80055bc:	4643      	mov	r3, r8
 80055be:	2200      	movs	r2, #0
 80055c0:	2104      	movs	r1, #4
 80055c2:	4620      	mov	r0, r4
 80055c4:	9500      	str	r5, [sp, #0]
 80055c6:	f7ff fde8 	bl	800519a <I2C_WaitOnFlagUntilTimeout>
 80055ca:	2800      	cmp	r0, #0
 80055cc:	d18f      	bne.n	80054ee <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055d4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80055d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80055d8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80055da:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80055dc:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80055de:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80055e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80055e2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80055e4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80055e6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	b1b3      	cbz	r3, 8005620 <HAL_I2C_Mem_Read+0x160>
 80055f2:	b9aa      	cbnz	r2, 8005620 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055f4:	4643      	mov	r3, r8
 80055f6:	2180      	movs	r1, #128	; 0x80
 80055f8:	4620      	mov	r0, r4
 80055fa:	9500      	str	r5, [sp, #0]
 80055fc:	f7ff fdcd 	bl	800519a <I2C_WaitOnFlagUntilTimeout>
 8005600:	2800      	cmp	r0, #0
 8005602:	f47f af74 	bne.w	80054ee <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005606:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	2bff      	cmp	r3, #255	; 0xff
 800560c:	d928      	bls.n	8005660 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800560e:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005610:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005614:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005616:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005618:	4639      	mov	r1, r7
 800561a:	4620      	mov	r0, r4
 800561c:	f7ff fd00 	bl	8005020 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005620:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005622:	b29b      	uxth	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1c9      	bne.n	80055bc <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005628:	462a      	mov	r2, r5
 800562a:	4641      	mov	r1, r8
 800562c:	4620      	mov	r0, r4
 800562e:	f7ff fdde 	bl	80051ee <I2C_WaitOnSTOPFlagUntilTimeout>
 8005632:	2800      	cmp	r0, #0
 8005634:	f47f af5b 	bne.w	80054ee <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	2120      	movs	r1, #32
 800563c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005644:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005648:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800564c:	f022 0201 	bic.w	r2, r2, #1
 8005650:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005652:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005656:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800565a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800565e:	e747      	b.n	80054f0 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8005660:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005666:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005668:	b292      	uxth	r2, r2
 800566a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	e7d3      	b.n	8005618 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 8005670:	2002      	movs	r0, #2
 8005672:	e73d      	b.n	80054f0 <HAL_I2C_Mem_Read+0x30>
 8005674:	80002000 	.word	0x80002000
 8005678:	80002400 	.word	0x80002400

0800567c <HAL_I2C_GetState>:
  return hi2c->State;
 800567c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8005680:	4770      	bx	lr

08005682 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005682:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005684:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005688:	2b20      	cmp	r3, #32
 800568a:	b2dc      	uxtb	r4, r3
 800568c:	d11d      	bne.n	80056ca <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800568e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005692:	2b01      	cmp	r3, #1
 8005694:	d019      	beq.n	80056ca <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005696:	2324      	movs	r3, #36	; 0x24
 8005698:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800569c:	6803      	ldr	r3, [r0, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	f022 0201 	bic.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4311      	orrs	r1, r2
 80056b2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056bc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80056be:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80056c2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80056c6:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80056c8:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80056ca:	2002      	movs	r0, #2
 80056cc:	e7fc      	b.n	80056c8 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080056ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056ce:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	b2dc      	uxtb	r4, r3
 80056d8:	d11c      	bne.n	8005714 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056da:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d018      	beq.n	8005714 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056e2:	2324      	movs	r3, #36	; 0x24
 80056e4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056e8:	6803      	ldr	r3, [r0, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	f022 0201 	bic.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056f2:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056f4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056f8:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056fc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	f042 0201 	orr.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005706:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005708:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800570c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005710:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005712:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005714:	2002      	movs	r0, #2
 8005716:	e7fc      	b.n	8005712 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08005718 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005718:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800571a:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800571c:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005720:	3284      	adds	r2, #132	; 0x84
 8005722:	1883      	adds	r3, r0, r2
{
 8005724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005728:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800572a:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800572e:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005730:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005734:	684c      	ldr	r4, [r1, #4]
 8005736:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800573a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800573e:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005742:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005744:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005746:	68c5      	ldr	r5, [r0, #12]
 8005748:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800574c:	443d      	add	r5, r7
 800574e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005752:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005754:	68c6      	ldr	r6, [r0, #12]
 8005756:	68cd      	ldr	r5, [r1, #12]
 8005758:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800575c:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800575e:	689d      	ldr	r5, [r3, #8]
 8005760:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8005764:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005766:	688d      	ldr	r5, [r1, #8]
 8005768:	68c7      	ldr	r7, [r0, #12]
 800576a:	3501      	adds	r5, #1
 800576c:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8005770:	443d      	add	r5, r7
 8005772:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005776:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005778:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800577a:	691d      	ldr	r5, [r3, #16]
 800577c:	f025 0507 	bic.w	r5, r5, #7
 8005780:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005782:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005784:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005786:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800578a:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800578e:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005792:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8005796:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800579a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800579e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80057a2:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80057a4:	695d      	ldr	r5, [r3, #20]
 80057a6:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80057aa:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80057ac:	694d      	ldr	r5, [r1, #20]
 80057ae:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80057b0:	69dd      	ldr	r5, [r3, #28]
 80057b2:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 80057b6:	f025 0507 	bic.w	r5, r5, #7
 80057ba:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80057bc:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80057c0:	433d      	orrs	r5, r7
 80057c2:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80057c4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80057c6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80057c8:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80057cc:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80057ce:	b1fe      	cbz	r6, 8005810 <LTDC_SetConfig+0xf8>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80057d0:	3e01      	subs	r6, #1
 80057d2:	2e06      	cmp	r6, #6
 80057d4:	d81e      	bhi.n	8005814 <LTDC_SetConfig+0xfc>
 80057d6:	4d10      	ldr	r5, [pc, #64]	; (8005818 <LTDC_SetConfig+0x100>)
 80057d8:	5dad      	ldrb	r5, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80057da:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80057dc:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80057e0:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80057e4:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80057e6:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80057e8:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80057ea:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80057ec:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80057ee:	436e      	muls	r6, r5
 80057f0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80057f4:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80057f6:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80057f8:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 80057fc:	f024 0407 	bic.w	r4, r4, #7
 8005800:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005802:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005804:	5883      	ldr	r3, [r0, r2]
 8005806:	f043 0301 	orr.w	r3, r3, #1
 800580a:	5083      	str	r3, [r0, r2]
}
 800580c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8005810:	2504      	movs	r5, #4
 8005812:	e7e2      	b.n	80057da <LTDC_SetConfig+0xc2>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005814:	2501      	movs	r5, #1
 8005816:	e7e0      	b.n	80057da <LTDC_SetConfig+0xc2>
 8005818:	0800c472 	.word	0x0800c472

0800581c <HAL_LTDC_Init>:
{
 800581c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800581e:	4604      	mov	r4, r0
 8005820:	2800      	cmp	r0, #0
 8005822:	d063      	beq.n	80058ec <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005824:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005828:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800582c:	b91b      	cbnz	r3, 8005836 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800582e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005832:	f7fc fba3 	bl	8001f7c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005836:	2302      	movs	r3, #2
 8005838:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	699a      	ldr	r2, [r3, #24]
 8005840:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005844:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005846:	6999      	ldr	r1, [r3, #24]
 8005848:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800584c:	4302      	orrs	r2, r0
 800584e:	68e0      	ldr	r0, [r4, #12]
 8005850:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005852:	6920      	ldr	r0, [r4, #16]
 8005854:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005856:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005858:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800585a:	4925      	ldr	r1, [pc, #148]	; (80058f0 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800585c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	400a      	ands	r2, r1
 8005862:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800586a:	69a0      	ldr	r0, [r4, #24]
 800586c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800586e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005870:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005872:	68da      	ldr	r2, [r3, #12]
 8005874:	400a      	ands	r2, r1
 8005876:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800587e:	6a20      	ldr	r0, [r4, #32]
 8005880:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005882:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005884:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	400a      	ands	r2, r1
 800588a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800588c:	691a      	ldr	r2, [r3, #16]
 800588e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005892:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005894:	4302      	orrs	r2, r0
 8005896:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 800589c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800589e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80058a0:	695a      	ldr	r2, [r3, #20]
 80058a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80058a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80058a8:	430a      	orrs	r2, r1
 80058aa:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80058ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80058ae:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80058b2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80058b6:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80058ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80058bc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80058be:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80058c2:	432a      	orrs	r2, r5
 80058c4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80058c8:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80058ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80058ce:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80058d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058d2:	f042 0206 	orr.w	r2, r2, #6
 80058d6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80058e0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80058e2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80058e6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80058ea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80058ec:	2001      	movs	r0, #1
 80058ee:	e7fc      	b.n	80058ea <HAL_LTDC_Init+0xce>
 80058f0:	f000f800 	.word	0xf000f800

080058f4 <HAL_LTDC_ErrorCallback>:
 80058f4:	4770      	bx	lr

080058f6 <HAL_LTDC_LineEventCallback>:
 80058f6:	4770      	bx	lr

080058f8 <HAL_LTDC_ReloadEventCallback>:
 80058f8:	4770      	bx	lr

080058fa <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80058fa:	6803      	ldr	r3, [r0, #0]
{
 80058fc:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80058fe:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8005900:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005902:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005904:	0772      	lsls	r2, r6, #29
 8005906:	d514      	bpl.n	8005932 <HAL_LTDC_IRQHandler+0x38>
 8005908:	0769      	lsls	r1, r5, #29
 800590a:	d512      	bpl.n	8005932 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800590c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800590e:	f022 0204 	bic.w	r2, r2, #4
 8005912:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005914:	2204      	movs	r2, #4
 8005916:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005918:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8005924:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005926:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800592a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800592e:	f7ff ffe1 	bl	80058f4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005932:	07b2      	lsls	r2, r6, #30
 8005934:	d516      	bpl.n	8005964 <HAL_LTDC_IRQHandler+0x6a>
 8005936:	07ab      	lsls	r3, r5, #30
 8005938:	d514      	bpl.n	8005964 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800593a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800593c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800593e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005940:	f022 0202 	bic.w	r2, r2, #2
 8005944:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005946:	2202      	movs	r2, #2
 8005948:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800594a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005954:	2304      	movs	r3, #4
 8005956:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800595a:	2300      	movs	r3, #0
 800595c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005960:	f7ff ffc8 	bl	80058f4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005964:	07f0      	lsls	r0, r6, #31
 8005966:	d510      	bpl.n	800598a <HAL_LTDC_IRQHandler+0x90>
 8005968:	07e9      	lsls	r1, r5, #31
 800596a:	d50e      	bpl.n	800598a <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800596c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800596e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005972:	f022 0201 	bic.w	r2, r2, #1
 8005976:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005978:	2201      	movs	r2, #1
 800597a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 800597c:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800597e:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005982:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8005986:	f7ff ffb6 	bl	80058f6 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800598a:	0732      	lsls	r2, r6, #28
 800598c:	d511      	bpl.n	80059b2 <HAL_LTDC_IRQHandler+0xb8>
 800598e:	072b      	lsls	r3, r5, #28
 8005990:	d50f      	bpl.n	80059b2 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005992:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005994:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005998:	f022 0208 	bic.w	r2, r2, #8
 800599c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800599e:	2208      	movs	r2, #8
 80059a0:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80059a2:	2301      	movs	r3, #1
 80059a4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80059a8:	2300      	movs	r3, #0
 80059aa:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80059ae:	f7ff ffa3 	bl	80058f8 <HAL_LTDC_ReloadEventCallback>
}
 80059b2:	bd70      	pop	{r4, r5, r6, pc}

080059b4 <HAL_LTDC_ConfigLayer>:
{
 80059b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80059b8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80059bc:	4606      	mov	r6, r0
 80059be:	460f      	mov	r7, r1
 80059c0:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	f04f 0002 	mov.w	r0, #2
 80059c8:	d01f      	beq.n	8005a0a <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80059ca:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80059cc:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80059d0:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80059d2:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80059d6:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80059da:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80059de:	3438      	adds	r4, #56	; 0x38
 80059e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059ec:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80059ee:	4630      	mov	r0, r6
 80059f0:	4662      	mov	r2, ip
 80059f2:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80059f4:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80059f6:	f7ff fe8f 	bl	8005718 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80059fa:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80059fc:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80059fe:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005a02:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005a06:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8005a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a0e <HAL_LTDC_GetState>:
  return hltdc->State;
 8005a0e:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8005a12:	4770      	bx	lr

08005a14 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a14:	4a02      	ldr	r2, [pc, #8]	; (8005a20 <HAL_PWR_EnableBkUpAccess+0xc>)
 8005a16:	6813      	ldr	r3, [r2, #0]
 8005a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a1c:	6013      	str	r3, [r2, #0]
}
 8005a1e:	4770      	bx	lr
 8005a20:	40007000 	.word	0x40007000

08005a24 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a24:	4b19      	ldr	r3, [pc, #100]	; (8005a8c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8005a26:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005a2a:	4c19      	ldr	r4, [pc, #100]	; (8005a90 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a38:	9301      	str	r3, [sp, #4]
 8005a3a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a42:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a44:	f7fe fb14 	bl	8004070 <HAL_GetTick>
 8005a48:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a4a:	6863      	ldr	r3, [r4, #4]
 8005a4c:	03da      	lsls	r2, r3, #15
 8005a4e:	d50c      	bpl.n	8005a6a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005a50:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a52:	4d0f      	ldr	r5, [pc, #60]	; (8005a90 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a58:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005a5a:	f7fe fb09 	bl	8004070 <HAL_GetTick>
 8005a5e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a60:	686b      	ldr	r3, [r5, #4]
 8005a62:	039b      	lsls	r3, r3, #14
 8005a64:	d50a      	bpl.n	8005a7c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8005a66:	2000      	movs	r0, #0
 8005a68:	e006      	b.n	8005a78 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a6a:	f7fe fb01 	bl	8004070 <HAL_GetTick>
 8005a6e:	1b40      	subs	r0, r0, r5
 8005a70:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005a74:	d9e9      	bls.n	8005a4a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8005a76:	2003      	movs	r0, #3
}
 8005a78:	b003      	add	sp, #12
 8005a7a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a7c:	f7fe faf8 	bl	8004070 <HAL_GetTick>
 8005a80:	1b00      	subs	r0, r0, r4
 8005a82:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005a86:	d9eb      	bls.n	8005a60 <HAL_PWREx_EnableOverDrive+0x3c>
 8005a88:	e7f5      	b.n	8005a76 <HAL_PWREx_EnableOverDrive+0x52>
 8005a8a:	bf00      	nop
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	40007000 	.word	0x40007000

08005a94 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005a98:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8005a9a:	b136      	cbz	r6, 8005aaa <QSPI_Config+0x16>
 8005a9c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8005aa0:	d003      	beq.n	8005aaa <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005aa2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005aa4:	6804      	ldr	r4, [r0, #0]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005aaa:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005aae:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005ab2:	f1ba 0f00 	cmp.w	sl, #0
 8005ab6:	d04c      	beq.n	8005b52 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ab8:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005aba:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005abc:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 8005ac0:	ea4a 0406 	orr.w	r4, sl, r6
 8005ac4:	680b      	ldr	r3, [r1, #0]
 8005ac6:	f8d1 8034 	ldr.w	r8, [r1, #52]	; 0x34
 8005aca:	ea44 0a02 	orr.w	sl, r4, r2
 8005ace:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005ad2:	f1be 0f00 	cmp.w	lr, #0
 8005ad6:	d024      	beq.n	8005b22 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005ad8:	688e      	ldr	r6, [r1, #8]
 8005ada:	ea4a 040e 	orr.w	r4, sl, lr
 8005ade:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ae0:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005ae2:	b19f      	cbz	r7, 8005b0c <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ae4:	433b      	orrs	r3, r7
 8005ae6:	4303      	orrs	r3, r0
 8005ae8:	68c8      	ldr	r0, [r1, #12]
 8005aea:	ea43 0309 	orr.w	r3, r3, r9
 8005aee:	ea43 0308 	orr.w	r3, r3, r8
 8005af2:	4333      	orrs	r3, r6
 8005af4:	4303      	orrs	r3, r0
 8005af6:	ea43 030c 	orr.w	r3, r3, ip
 8005afa:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005afc:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b00:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005b02:	d001      	beq.n	8005b08 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005b04:	684b      	ldr	r3, [r1, #4]
 8005b06:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b0c:	4303      	orrs	r3, r0
 8005b0e:	ea43 0309 	orr.w	r3, r3, r9
 8005b12:	ea43 0308 	orr.w	r3, r3, r8
 8005b16:	4333      	orrs	r3, r6
 8005b18:	ea43 030c 	orr.w	r3, r3, ip
 8005b1c:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b1e:	616b      	str	r3, [r5, #20]
 8005b20:	e7f2      	b.n	8005b08 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005b22:	b167      	cbz	r7, 8005b3e <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b24:	433b      	orrs	r3, r7
 8005b26:	4303      	orrs	r3, r0
 8005b28:	68c8      	ldr	r0, [r1, #12]
 8005b2a:	ea43 0309 	orr.w	r3, r3, r9
 8005b2e:	ea43 0308 	orr.w	r3, r3, r8
 8005b32:	4303      	orrs	r3, r0
 8005b34:	ea43 030c 	orr.w	r3, r3, ip
 8005b38:	ea43 030a 	orr.w	r3, r3, sl
 8005b3c:	e7de      	b.n	8005afc <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b3e:	4303      	orrs	r3, r0
 8005b40:	ea43 0309 	orr.w	r3, r3, r9
 8005b44:	ea43 0408 	orr.w	r4, r3, r8
 8005b48:	ea44 030c 	orr.w	r3, r4, ip
 8005b4c:	ea43 030a 	orr.w	r3, r3, sl
 8005b50:	e7e5      	b.n	8005b1e <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005b52:	f1be 0f00 	cmp.w	lr, #0
 8005b56:	d02c      	beq.n	8005bb2 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005b58:	ea46 050e 	orr.w	r5, r6, lr
 8005b5c:	688b      	ldr	r3, [r1, #8]
 8005b5e:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b60:	694e      	ldr	r6, [r1, #20]
 8005b62:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005b64:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b66:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8005b6a:	04b6      	lsls	r6, r6, #18
 8005b6c:	690b      	ldr	r3, [r1, #16]
 8005b6e:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005b72:	b1a7      	cbz	r7, 8005b9e <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b74:	433b      	orrs	r3, r7
 8005b76:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005b78:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b7c:	ea43 0308 	orr.w	r3, r3, r8
 8005b80:	ea43 030e 	orr.w	r3, r3, lr
 8005b84:	ea43 030c 	orr.w	r3, r3, ip
 8005b88:	ea43 0300 	orr.w	r3, r3, r0
 8005b8c:	ea43 0306 	orr.w	r3, r3, r6
 8005b90:	ea43 0305 	orr.w	r3, r3, r5
 8005b94:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005b96:	d0b7      	beq.n	8005b08 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005b98:	684b      	ldr	r3, [r1, #4]
 8005b9a:	61a3      	str	r3, [r4, #24]
 8005b9c:	e7b4      	b.n	8005b08 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b9e:	ea43 0308 	orr.w	r3, r3, r8
 8005ba2:	ea43 030e 	orr.w	r3, r3, lr
 8005ba6:	ea43 030c 	orr.w	r3, r3, ip
 8005baa:	4333      	orrs	r3, r6
 8005bac:	432b      	orrs	r3, r5
 8005bae:	6163      	str	r3, [r4, #20]
 8005bb0:	e7aa      	b.n	8005b08 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005bb2:	b1d7      	cbz	r7, 8005bea <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005bb4:	ea46 0307 	orr.w	r3, r6, r7
 8005bb8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005bba:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005bbc:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005bc0:	ea43 0302 	orr.w	r3, r3, r2
 8005bc4:	ea43 0304 	orr.w	r3, r3, r4
 8005bc8:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8005bca:	ea43 0304 	orr.w	r3, r3, r4
 8005bce:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8005bd0:	ea43 0304 	orr.w	r3, r3, r4
 8005bd4:	68cc      	ldr	r4, [r1, #12]
 8005bd6:	ea43 0304 	orr.w	r3, r3, r4
 8005bda:	694c      	ldr	r4, [r1, #20]
 8005bdc:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8005be0:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005be2:	d091      	beq.n	8005b08 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005be4:	684b      	ldr	r3, [r1, #4]
 8005be6:	6183      	str	r3, [r0, #24]
 8005be8:	e78e      	b.n	8005b08 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005bea:	2e00      	cmp	r6, #0
 8005bec:	d08c      	beq.n	8005b08 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005bee:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005bf0:	6800      	ldr	r0, [r0, #0]
 8005bf2:	4333      	orrs	r3, r6
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	694a      	ldr	r2, [r1, #20]
 8005c00:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8005c04:	6143      	str	r3, [r0, #20]
}
 8005c06:	e77f      	b.n	8005b08 <QSPI_Config+0x74>

08005c08 <QSPI_WaitFlagStateUntilTimeout>:
{
 8005c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005c10:	4604      	mov	r4, r0
 8005c12:	460e      	mov	r6, r1
 8005c14:	4615      	mov	r5, r2
 8005c16:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005c18:	6822      	ldr	r2, [r4, #0]
 8005c1a:	6893      	ldr	r3, [r2, #8]
 8005c1c:	4233      	tst	r3, r6
 8005c1e:	bf14      	ite	ne
 8005c20:	2301      	movne	r3, #1
 8005c22:	2300      	moveq	r3, #0
 8005c24:	42ab      	cmp	r3, r5
 8005c26:	d101      	bne.n	8005c2c <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8005c28:	2000      	movs	r0, #0
 8005c2a:	e012      	b.n	8005c52 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005c2c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005c30:	d0f3      	beq.n	8005c1a <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c32:	f7fe fa1d 	bl	8004070 <HAL_GetTick>
 8005c36:	1bc0      	subs	r0, r0, r7
 8005c38:	4540      	cmp	r0, r8
 8005c3a:	d802      	bhi.n	8005c42 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8005c3c:	f1b8 0f00 	cmp.w	r8, #0
 8005c40:	d1ea      	bne.n	8005c18 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005c42:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005c44:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005c46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005c4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c4c:	f043 0301 	orr.w	r3, r3, #1
 8005c50:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005c58 <HAL_QSPI_Init>:
{
 8005c58:	b530      	push	{r4, r5, lr}
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8005c5e:	f7fe fa07 	bl	8004070 <HAL_GetTick>
 8005c62:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8005c64:	2c00      	cmp	r4, #0
 8005c66:	d047      	beq.n	8005cf8 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005c68:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005c6c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005c70:	b94a      	cbnz	r2, 8005c86 <HAL_QSPI_Init+0x2e>
 8005c72:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8005c74:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8005c76:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8005c7a:	f7fc fa11 	bl	80020a0 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8005c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c82:	9b03      	ldr	r3, [sp, #12]
 8005c84:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005c86:	6820      	ldr	r0, [r4, #0]
 8005c88:	68a1      	ldr	r1, [r4, #8]
 8005c8a:	6802      	ldr	r2, [r0, #0]
 8005c8c:	3901      	subs	r1, #1
 8005c8e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8005c92:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005c96:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005c98:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005c9e:	9200      	str	r2, [sp, #0]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f7ff ffb1 	bl	8005c08 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8005ca6:	bb10      	cbnz	r0, 8005cee <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005ca8:	6822      	ldr	r2, [r4, #0]
 8005caa:	69e5      	ldr	r5, [r4, #28]
 8005cac:	68e3      	ldr	r3, [r4, #12]
 8005cae:	6811      	ldr	r1, [r2, #0]
 8005cb0:	432b      	orrs	r3, r5
 8005cb2:	6a25      	ldr	r5, [r4, #32]
 8005cb4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8005cb8:	432b      	orrs	r3, r5
 8005cba:	6865      	ldr	r5, [r4, #4]
 8005cbc:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8005cc0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005cc8:	6855      	ldr	r5, [r2, #4]
 8005cca:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	6921      	ldr	r1, [r4, #16]
 8005cd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005cd6:	4909      	ldr	r1, [pc, #36]	; (8005cfc <HAL_QSPI_Init+0xa4>)
 8005cd8:	4029      	ands	r1, r5
 8005cda:	430b      	orrs	r3, r1
 8005cdc:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8005cde:	6813      	ldr	r3, [r2, #0]
 8005ce0:	f043 0301 	orr.w	r3, r3, #1
 8005ce4:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8005ce6:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005ce8:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8005cea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005cf4:	b005      	add	sp, #20
 8005cf6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	e7fb      	b.n	8005cf4 <HAL_QSPI_Init+0x9c>
 8005cfc:	ffe0f8fe 	.word	0xffe0f8fe

08005d00 <HAL_QSPI_DeInit>:
{
 8005d00:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8005d02:	4604      	mov	r4, r0
 8005d04:	b168      	cbz	r0, 8005d22 <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 8005d06:	6802      	ldr	r2, [r0, #0]
 8005d08:	6813      	ldr	r3, [r2, #0]
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8005d10:	f7fc fa34 	bl	800217c <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d14:	2000      	movs	r0, #0
 8005d16:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005d18:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005d1c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005d20:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005d22:	2001      	movs	r0, #1
 8005d24:	e7fc      	b.n	8005d20 <HAL_QSPI_DeInit+0x20>

08005d26 <HAL_QSPI_Command>:
{
 8005d26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	4617      	mov	r7, r2
 8005d30:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8005d32:	f7fe f99d 	bl	8004070 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005d36:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005d3a:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005d3c:	2a01      	cmp	r2, #1
 8005d3e:	d033      	beq.n	8005da8 <HAL_QSPI_Command+0x82>
 8005d40:	2201      	movs	r2, #1
 8005d42:	2602      	movs	r6, #2
 8005d44:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005d48:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005d4c:	2a01      	cmp	r2, #1
 8005d4e:	fa5f f882 	uxtb.w	r8, r2
 8005d52:	d127      	bne.n	8005da4 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d54:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005d56:	9003      	str	r0, [sp, #12]
 8005d58:	2120      	movs	r1, #32
 8005d5a:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d5c:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005d5e:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005d60:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005d64:	f7ff ff50 	bl	8005c08 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005d68:	4605      	mov	r5, r0
 8005d6a:	b9a0      	cbnz	r0, 8005d96 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	4649      	mov	r1, r9
 8005d70:	4620      	mov	r0, r4
 8005d72:	f7ff fe8f 	bl	8005a94 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8005d76:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8005d7a:	9b03      	ldr	r3, [sp, #12]
 8005d7c:	b94a      	cbnz	r2, 8005d92 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005d7e:	4642      	mov	r2, r8
 8005d80:	4631      	mov	r1, r6
 8005d82:	4620      	mov	r0, r4
 8005d84:	9700      	str	r7, [sp, #0]
 8005d86:	f7ff ff3f 	bl	8005c08 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	b918      	cbnz	r0, 8005d96 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005d92:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005d96:	2300      	movs	r3, #0
 8005d98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	b005      	add	sp, #20
 8005da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8005da4:	4635      	mov	r5, r6
 8005da6:	e7f6      	b.n	8005d96 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8005da8:	2502      	movs	r5, #2
 8005daa:	e7f7      	b.n	8005d9c <HAL_QSPI_Command+0x76>

08005dac <HAL_QSPI_AutoPolling>:
{
 8005dac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005db0:	4604      	mov	r4, r0
 8005db2:	4615      	mov	r5, r2
 8005db4:	461e      	mov	r6, r3
 8005db6:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8005db8:	f7fe f95a 	bl	8004070 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005dbc:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005dc0:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005dc2:	2a01      	cmp	r2, #1
 8005dc4:	d040      	beq.n	8005e48 <HAL_QSPI_AutoPolling+0x9c>
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005dcc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005dd0:	2a01      	cmp	r2, #1
 8005dd2:	b2d7      	uxtb	r7, r2
 8005dd4:	d136      	bne.n	8005e44 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005dd6:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005dd8:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005dda:	9003      	str	r0, [sp, #12]
 8005ddc:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005dde:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005de0:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005de2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005de6:	2120      	movs	r1, #32
 8005de8:	f7ff ff0e 	bl	8005c08 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005dec:	bb20      	cbnz	r0, 8005e38 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005dee:	6821      	ldr	r1, [r4, #0]
 8005df0:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005df2:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005df4:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005df6:	686a      	ldr	r2, [r5, #4]
 8005df8:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005dfa:	68aa      	ldr	r2, [r5, #8]
 8005dfc:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005dfe:	680a      	ldr	r2, [r1, #0]
 8005e00:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005e04:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005e06:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005e08:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005e0c:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005e0e:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8005e10:	68ea      	ldr	r2, [r5, #12]
 8005e12:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005e16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e1a:	f7ff fe3b 	bl	8005a94 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005e1e:	9b03      	ldr	r3, [sp, #12]
 8005e20:	463a      	mov	r2, r7
 8005e22:	2108      	movs	r1, #8
 8005e24:	4620      	mov	r0, r4
 8005e26:	9600      	str	r6, [sp, #0]
 8005e28:	f7ff feee 	bl	8005c08 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005e2c:	b920      	cbnz	r0, 8005e38 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	2208      	movs	r2, #8
 8005e32:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005e34:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005e3e:	b004      	add	sp, #16
 8005e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8005e44:	2002      	movs	r0, #2
 8005e46:	e7f7      	b.n	8005e38 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8005e48:	2002      	movs	r0, #2
 8005e4a:	e7f8      	b.n	8005e3e <HAL_QSPI_AutoPolling+0x92>

08005e4c <HAL_QSPI_MemoryMapped>:
{
 8005e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e4e:	4604      	mov	r4, r0
 8005e50:	4616      	mov	r6, r2
 8005e52:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005e54:	f7fe f90c 	bl	8004070 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005e58:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005e5c:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005e5e:	2a01      	cmp	r2, #1
 8005e60:	d033      	beq.n	8005eca <HAL_QSPI_MemoryMapped+0x7e>
 8005e62:	2201      	movs	r2, #1
 8005e64:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005e68:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005e6c:	2a01      	cmp	r2, #1
 8005e6e:	d12a      	bne.n	8005ec6 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005e70:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8005e72:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005e74:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005e76:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8005e78:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005e7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005e7e:	9100      	str	r1, [sp, #0]
 8005e80:	2120      	movs	r1, #32
 8005e82:	f7ff fec1 	bl	8005c08 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005e86:	4605      	mov	r5, r0
 8005e88:	b9b8      	cbnz	r0, 8005eba <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	6872      	ldr	r2, [r6, #4]
 8005e8e:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8005e90:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8005e92:	f020 0008 	bic.w	r0, r0, #8
 8005e96:	ea40 0002 	orr.w	r0, r0, r2
 8005e9a:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8005e9c:	d107      	bne.n	8005eae <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8005e9e:	6832      	ldr	r2, [r6, #0]
 8005ea0:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8005ea2:	2210      	movs	r2, #16
 8005ea4:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005eac:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8005eae:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7ff fded 	bl	8005a94 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	b003      	add	sp, #12
 8005ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8005ec6:	2502      	movs	r5, #2
 8005ec8:	e7f7      	b.n	8005eba <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8005eca:	2502      	movs	r5, #2
 8005ecc:	e7f8      	b.n	8005ec0 <HAL_QSPI_MemoryMapped+0x74>

08005ece <HAL_QSPI_Abort>:
{
 8005ece:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ed0:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005ed2:	f7fe f8cd 	bl	8004070 <HAL_GetTick>
 8005ed6:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005ed8:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8005edc:	f010 0002 	ands.w	r0, r0, #2
 8005ee0:	d03a      	beq.n	8005f58 <HAL_QSPI_Abort+0x8a>
    __HAL_UNLOCK(hqspi);
 8005ee2:	2200      	movs	r2, #0
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005ee4:	6821      	ldr	r1, [r4, #0]
    __HAL_UNLOCK(hqspi);
 8005ee6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005eea:	680a      	ldr	r2, [r1, #0]
 8005eec:	f012 0204 	ands.w	r2, r2, #4
 8005ef0:	d034      	beq.n	8005f5c <HAL_QSPI_Abort+0x8e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005ef2:	680a      	ldr	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005ef4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005ef6:	f022 0204 	bic.w	r2, r2, #4
 8005efa:	9303      	str	r3, [sp, #12]
 8005efc:	600a      	str	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005efe:	f7fe fc1d 	bl	800473c <HAL_DMA_Abort>
      if(status != HAL_OK)
 8005f02:	9b03      	ldr	r3, [sp, #12]
 8005f04:	b118      	cbz	r0, 8005f0e <HAL_QSPI_Abort+0x40>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005f06:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005f08:	f042 0204 	orr.w	r2, r2, #4
 8005f0c:	6462      	str	r2, [r4, #68]	; 0x44
    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8005f0e:	6822      	ldr	r2, [r4, #0]
 8005f10:	6891      	ldr	r1, [r2, #8]
 8005f12:	0689      	lsls	r1, r1, #26
 8005f14:	d51d      	bpl.n	8005f52 <HAL_QSPI_Abort+0x84>
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005f16:	6811      	ldr	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005f18:	4620      	mov	r0, r4
 8005f1a:	9303      	str	r3, [sp, #12]
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005f1c:	f041 0102 	orr.w	r1, r1, #2
 8005f20:	6011      	str	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005f22:	2102      	movs	r1, #2
 8005f24:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005f26:	9200      	str	r2, [sp, #0]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f7ff fe6d 	bl	8005c08 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	b990      	cbnz	r0, 8005f58 <HAL_QSPI_Abort+0x8a>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005f32:	6822      	ldr	r2, [r4, #0]
 8005f34:	2102      	movs	r1, #2
 8005f36:	60d1      	str	r1, [r2, #12]
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005f38:	2120      	movs	r1, #32
 8005f3a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005f3c:	9200      	str	r2, [sp, #0]
 8005f3e:	4602      	mov	r2, r0
 8005f40:	4620      	mov	r0, r4
 8005f42:	f7ff fe61 	bl	8005c08 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005f46:	b938      	cbnz	r0, 8005f58 <HAL_QSPI_Abort+0x8a>
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005f48:	6822      	ldr	r2, [r4, #0]
 8005f4a:	6953      	ldr	r3, [r2, #20]
 8005f4c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005f50:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8005f58:	b004      	add	sp, #16
 8005f5a:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	e7d6      	b.n	8005f0e <HAL_QSPI_Abort+0x40>

08005f60 <HAL_QSPI_Transmit>:
{
 8005f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f62:	4604      	mov	r4, r0
 8005f64:	b085      	sub	sp, #20
 8005f66:	4616      	mov	r6, r2
 8005f68:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005f6a:	f7fe f881 	bl	8004070 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005f6e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005f72:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005f74:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8005f76:	2a01      	cmp	r2, #1
 8005f78:	d04c      	beq.n	8006014 <HAL_QSPI_Transmit+0xb4>
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005f80:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005f84:	2a01      	cmp	r2, #1
 8005f86:	b2d0      	uxtb	r0, r2
 8005f88:	d142      	bne.n	8006010 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8005f8e:	2f00      	cmp	r7, #0
 8005f90:	d039      	beq.n	8006006 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005f92:	2212      	movs	r2, #18
 8005f94:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005f98:	692a      	ldr	r2, [r5, #16]
 8005f9a:	3201      	adds	r2, #1
 8005f9c:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005f9e:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8005fa0:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005fa2:	3201      	adds	r2, #1
 8005fa4:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005fa6:	696a      	ldr	r2, [r5, #20]
 8005fa8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005fac:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8005fae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005fb0:	b9a2      	cbnz	r2, 8005fdc <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	2102      	movs	r1, #2
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	9600      	str	r6, [sp, #0]
 8005fba:	f7ff fe25 	bl	8005c08 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005fbe:	b928      	cbnz	r0, 8005fcc <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 8005fc4:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005fc6:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8005fc8:	f7ff ff81 	bl	8005ece <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005fd8:	b005      	add	sp, #20
 8005fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005fdc:	2201      	movs	r2, #1
 8005fde:	2104      	movs	r1, #4
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	9600      	str	r6, [sp, #0]
 8005fe4:	9303      	str	r3, [sp, #12]
 8005fe6:	f7ff fe0f 	bl	8005c08 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d1ee      	bne.n	8005fcc <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005fee:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8005ff0:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005ff2:	7812      	ldrb	r2, [r2, #0]
 8005ff4:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8005ff8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005ffa:	3201      	adds	r2, #1
 8005ffc:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8005ffe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006000:	3a01      	subs	r2, #1
 8006002:	62e2      	str	r2, [r4, #44]	; 0x2c
 8006004:	e7d3      	b.n	8005fae <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006006:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006008:	f043 0308 	orr.w	r3, r3, #8
 800600c:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800600e:	e7e0      	b.n	8005fd2 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8006010:	2002      	movs	r0, #2
 8006012:	e7de      	b.n	8005fd2 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8006014:	2002      	movs	r0, #2
 8006016:	e7df      	b.n	8005fd8 <HAL_QSPI_Transmit+0x78>

08006018 <HAL_QSPI_Receive>:
{
 8006018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800601a:	4604      	mov	r4, r0
 800601c:	b085      	sub	sp, #20
 800601e:	4616      	mov	r6, r2
 8006020:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8006022:	f7fe f825 	bl	8004070 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8006026:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8006028:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800602a:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800602e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8006032:	2a01      	cmp	r2, #1
 8006034:	d050      	beq.n	80060d8 <HAL_QSPI_Receive+0xc0>
 8006036:	2201      	movs	r2, #1
 8006038:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800603c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006040:	2a01      	cmp	r2, #1
 8006042:	b2d0      	uxtb	r0, r2
 8006044:	d146      	bne.n	80060d4 <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006046:	2200      	movs	r2, #0
 8006048:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800604a:	2f00      	cmp	r7, #0
 800604c:	d03d      	beq.n	80060ca <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800604e:	2222      	movs	r2, #34	; 0x22
 8006050:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006054:	692a      	ldr	r2, [r5, #16]
 8006056:	3201      	adds	r2, #1
 8006058:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800605a:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800605c:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800605e:	3201      	adds	r2, #1
 8006060:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006062:	6969      	ldr	r1, [r5, #20]
 8006064:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8006068:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800606c:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800606e:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8006072:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006074:	b9a2      	cbnz	r2, 80060a0 <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006076:	2201      	movs	r2, #1
 8006078:	2102      	movs	r1, #2
 800607a:	4620      	mov	r0, r4
 800607c:	9600      	str	r6, [sp, #0]
 800607e:	f7ff fdc3 	bl	8005c08 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8006082:	b928      	cbnz	r0, 8006090 <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 8006088:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800608a:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 800608c:	f7ff ff1f 	bl	8005ece <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8006090:	2301      	movs	r3, #1
 8006092:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006096:	2300      	movs	r3, #0
 8006098:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800609c:	b005      	add	sp, #20
 800609e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80060a0:	2201      	movs	r2, #1
 80060a2:	2106      	movs	r1, #6
 80060a4:	4620      	mov	r0, r4
 80060a6:	9600      	str	r6, [sp, #0]
 80060a8:	9303      	str	r3, [sp, #12]
 80060aa:	f7ff fdad 	bl	8005c08 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d1ee      	bne.n	8006090 <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80060b2:	f895 1020 	ldrb.w	r1, [r5, #32]
 80060b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80060b8:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80060ba:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 80060bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80060be:	3201      	adds	r2, #1
 80060c0:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80060c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80060c4:	3a01      	subs	r2, #1
 80060c6:	63a2      	str	r2, [r4, #56]	; 0x38
 80060c8:	e7d3      	b.n	8006072 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80060ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80060cc:	f043 0308 	orr.w	r3, r3, #8
 80060d0:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80060d2:	e7e0      	b.n	8006096 <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 80060d4:	2002      	movs	r0, #2
 80060d6:	e7de      	b.n	8006096 <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 80060d8:	2002      	movs	r0, #2
 80060da:	e7df      	b.n	800609c <HAL_QSPI_Receive+0x84>

080060dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060e0:	4604      	mov	r4, r0
 80060e2:	b340      	cbz	r0, 8006136 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060e4:	6803      	ldr	r3, [r0, #0]
 80060e6:	07db      	lsls	r3, r3, #31
 80060e8:	d410      	bmi.n	800610c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	079f      	lsls	r7, r3, #30
 80060ee:	d461      	bmi.n	80061b4 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	0719      	lsls	r1, r3, #28
 80060f4:	f100 80a6 	bmi.w	8006244 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	075a      	lsls	r2, r3, #29
 80060fc:	f100 80c7 	bmi.w	800628e <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006100:	69a2      	ldr	r2, [r4, #24]
 8006102:	2a00      	cmp	r2, #0
 8006104:	f040 8130 	bne.w	8006368 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8006108:	2000      	movs	r0, #0
 800610a:	e02c      	b.n	8006166 <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800610c:	4b94      	ldr	r3, [pc, #592]	; (8006360 <HAL_RCC_OscConfig+0x284>)
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	f002 020c 	and.w	r2, r2, #12
 8006114:	2a04      	cmp	r2, #4
 8006116:	d007      	beq.n	8006128 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	f002 020c 	and.w	r2, r2, #12
 800611e:	2a08      	cmp	r2, #8
 8006120:	d10b      	bne.n	800613a <HAL_RCC_OscConfig+0x5e>
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	025e      	lsls	r6, r3, #9
 8006126:	d508      	bpl.n	800613a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006128:	4b8d      	ldr	r3, [pc, #564]	; (8006360 <HAL_RCC_OscConfig+0x284>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	039d      	lsls	r5, r3, #14
 800612e:	d5dc      	bpl.n	80060ea <HAL_RCC_OscConfig+0xe>
 8006130:	6863      	ldr	r3, [r4, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1d9      	bne.n	80060ea <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8006136:	2001      	movs	r0, #1
 8006138:	e015      	b.n	8006166 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800613a:	6863      	ldr	r3, [r4, #4]
 800613c:	4d88      	ldr	r5, [pc, #544]	; (8006360 <HAL_RCC_OscConfig+0x284>)
 800613e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006142:	d113      	bne.n	800616c <HAL_RCC_OscConfig+0x90>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800614a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800614c:	f7fd ff90 	bl	8004070 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006150:	4e83      	ldr	r6, [pc, #524]	; (8006360 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8006152:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006154:	6833      	ldr	r3, [r6, #0]
 8006156:	0398      	lsls	r0, r3, #14
 8006158:	d4c7      	bmi.n	80060ea <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800615a:	f7fd ff89 	bl	8004070 <HAL_GetTick>
 800615e:	1b40      	subs	r0, r0, r5
 8006160:	2864      	cmp	r0, #100	; 0x64
 8006162:	d9f7      	bls.n	8006154 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8006164:	2003      	movs	r0, #3
}
 8006166:	b002      	add	sp, #8
 8006168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800616c:	b99b      	cbnz	r3, 8006196 <HAL_RCC_OscConfig+0xba>
 800616e:	682b      	ldr	r3, [r5, #0]
 8006170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006174:	602b      	str	r3, [r5, #0]
 8006176:	682b      	ldr	r3, [r5, #0]
 8006178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800617c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800617e:	f7fd ff77 	bl	8004070 <HAL_GetTick>
 8006182:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	0399      	lsls	r1, r3, #14
 8006188:	d5af      	bpl.n	80060ea <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800618a:	f7fd ff71 	bl	8004070 <HAL_GetTick>
 800618e:	1b80      	subs	r0, r0, r6
 8006190:	2864      	cmp	r0, #100	; 0x64
 8006192:	d9f7      	bls.n	8006184 <HAL_RCC_OscConfig+0xa8>
 8006194:	e7e6      	b.n	8006164 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006196:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800619a:	682b      	ldr	r3, [r5, #0]
 800619c:	d103      	bne.n	80061a6 <HAL_RCC_OscConfig+0xca>
 800619e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061a2:	602b      	str	r3, [r5, #0]
 80061a4:	e7ce      	b.n	8006144 <HAL_RCC_OscConfig+0x68>
 80061a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061aa:	602b      	str	r3, [r5, #0]
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061b2:	e7ca      	b.n	800614a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061b4:	4b6a      	ldr	r3, [pc, #424]	; (8006360 <HAL_RCC_OscConfig+0x284>)
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	f012 0f0c 	tst.w	r2, #12
 80061bc:	d007      	beq.n	80061ce <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	f002 020c 	and.w	r2, r2, #12
 80061c4:	2a08      	cmp	r2, #8
 80061c6:	d111      	bne.n	80061ec <HAL_RCC_OscConfig+0x110>
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	025a      	lsls	r2, r3, #9
 80061cc:	d40e      	bmi.n	80061ec <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061ce:	4a64      	ldr	r2, [pc, #400]	; (8006360 <HAL_RCC_OscConfig+0x284>)
 80061d0:	6813      	ldr	r3, [r2, #0]
 80061d2:	079b      	lsls	r3, r3, #30
 80061d4:	d502      	bpl.n	80061dc <HAL_RCC_OscConfig+0x100>
 80061d6:	68e3      	ldr	r3, [r4, #12]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d1ac      	bne.n	8006136 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061dc:	6813      	ldr	r3, [r2, #0]
 80061de:	6921      	ldr	r1, [r4, #16]
 80061e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80061e4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80061e8:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061ea:	e781      	b.n	80060f0 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061ec:	68e3      	ldr	r3, [r4, #12]
 80061ee:	4d5c      	ldr	r5, [pc, #368]	; (8006360 <HAL_RCC_OscConfig+0x284>)
 80061f0:	b1bb      	cbz	r3, 8006222 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 80061f2:	682b      	ldr	r3, [r5, #0]
 80061f4:	f043 0301 	orr.w	r3, r3, #1
 80061f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80061fa:	f7fd ff39 	bl	8004070 <HAL_GetTick>
 80061fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	079f      	lsls	r7, r3, #30
 8006204:	d507      	bpl.n	8006216 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006206:	682b      	ldr	r3, [r5, #0]
 8006208:	6922      	ldr	r2, [r4, #16]
 800620a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800620e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006212:	602b      	str	r3, [r5, #0]
 8006214:	e76c      	b.n	80060f0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006216:	f7fd ff2b 	bl	8004070 <HAL_GetTick>
 800621a:	1b80      	subs	r0, r0, r6
 800621c:	2802      	cmp	r0, #2
 800621e:	d9ef      	bls.n	8006200 <HAL_RCC_OscConfig+0x124>
 8006220:	e7a0      	b.n	8006164 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8006222:	682b      	ldr	r3, [r5, #0]
 8006224:	f023 0301 	bic.w	r3, r3, #1
 8006228:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800622a:	f7fd ff21 	bl	8004070 <HAL_GetTick>
 800622e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006230:	682b      	ldr	r3, [r5, #0]
 8006232:	0798      	lsls	r0, r3, #30
 8006234:	f57f af5c 	bpl.w	80060f0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006238:	f7fd ff1a 	bl	8004070 <HAL_GetTick>
 800623c:	1b80      	subs	r0, r0, r6
 800623e:	2802      	cmp	r0, #2
 8006240:	d9f6      	bls.n	8006230 <HAL_RCC_OscConfig+0x154>
 8006242:	e78f      	b.n	8006164 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006244:	6963      	ldr	r3, [r4, #20]
 8006246:	4d46      	ldr	r5, [pc, #280]	; (8006360 <HAL_RCC_OscConfig+0x284>)
 8006248:	b183      	cbz	r3, 800626c <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 800624a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800624c:	f043 0301 	orr.w	r3, r3, #1
 8006250:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006252:	f7fd ff0d 	bl	8004070 <HAL_GetTick>
 8006256:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006258:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800625a:	079b      	lsls	r3, r3, #30
 800625c:	f53f af4c 	bmi.w	80060f8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006260:	f7fd ff06 	bl	8004070 <HAL_GetTick>
 8006264:	1b80      	subs	r0, r0, r6
 8006266:	2802      	cmp	r0, #2
 8006268:	d9f6      	bls.n	8006258 <HAL_RCC_OscConfig+0x17c>
 800626a:	e77b      	b.n	8006164 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 800626c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006274:	f7fd fefc 	bl	8004070 <HAL_GetTick>
 8006278:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800627a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800627c:	079f      	lsls	r7, r3, #30
 800627e:	f57f af3b 	bpl.w	80060f8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006282:	f7fd fef5 	bl	8004070 <HAL_GetTick>
 8006286:	1b80      	subs	r0, r0, r6
 8006288:	2802      	cmp	r0, #2
 800628a:	d9f6      	bls.n	800627a <HAL_RCC_OscConfig+0x19e>
 800628c:	e76a      	b.n	8006164 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800628e:	4b34      	ldr	r3, [pc, #208]	; (8006360 <HAL_RCC_OscConfig+0x284>)
 8006290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006292:	00d0      	lsls	r0, r2, #3
 8006294:	d427      	bmi.n	80062e6 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8006298:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800629a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800629e:	641a      	str	r2, [r3, #64]	; 0x40
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a6:	9301      	str	r3, [sp, #4]
 80062a8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062aa:	4d2e      	ldr	r5, [pc, #184]	; (8006364 <HAL_RCC_OscConfig+0x288>)
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	05d9      	lsls	r1, r3, #23
 80062b0:	d51b      	bpl.n	80062ea <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062b2:	68a3      	ldr	r3, [r4, #8]
 80062b4:	4d2a      	ldr	r5, [pc, #168]	; (8006360 <HAL_RCC_OscConfig+0x284>)
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d127      	bne.n	800630a <HAL_RCC_OscConfig+0x22e>
 80062ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80062bc:	f043 0301 	orr.w	r3, r3, #1
 80062c0:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80062c6:	f7fd fed3 	bl	8004070 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ca:	4e25      	ldr	r6, [pc, #148]	; (8006360 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 80062cc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ce:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80062d0:	079b      	lsls	r3, r3, #30
 80062d2:	d53f      	bpl.n	8006354 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 80062d4:	2f00      	cmp	r7, #0
 80062d6:	f43f af13 	beq.w	8006100 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80062da:	4a21      	ldr	r2, [pc, #132]	; (8006360 <HAL_RCC_OscConfig+0x284>)
 80062dc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80062de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062e2:	6413      	str	r3, [r2, #64]	; 0x40
 80062e4:	e70c      	b.n	8006100 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 80062e6:	2700      	movs	r7, #0
 80062e8:	e7df      	b.n	80062aa <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 80062ea:	682b      	ldr	r3, [r5, #0]
 80062ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80062f2:	f7fd febd 	bl	8004070 <HAL_GetTick>
 80062f6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	05da      	lsls	r2, r3, #23
 80062fc:	d4d9      	bmi.n	80062b2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062fe:	f7fd feb7 	bl	8004070 <HAL_GetTick>
 8006302:	1b80      	subs	r0, r0, r6
 8006304:	2864      	cmp	r0, #100	; 0x64
 8006306:	d9f7      	bls.n	80062f8 <HAL_RCC_OscConfig+0x21c>
 8006308:	e72c      	b.n	8006164 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800630a:	b9ab      	cbnz	r3, 8006338 <HAL_RCC_OscConfig+0x25c>
 800630c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800630e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006312:	f023 0301 	bic.w	r3, r3, #1
 8006316:	672b      	str	r3, [r5, #112]	; 0x70
 8006318:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800631a:	f023 0304 	bic.w	r3, r3, #4
 800631e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006320:	f7fd fea6 	bl	8004070 <HAL_GetTick>
 8006324:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006326:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006328:	0798      	lsls	r0, r3, #30
 800632a:	d5d3      	bpl.n	80062d4 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800632c:	f7fd fea0 	bl	8004070 <HAL_GetTick>
 8006330:	1b80      	subs	r0, r0, r6
 8006332:	4540      	cmp	r0, r8
 8006334:	d9f7      	bls.n	8006326 <HAL_RCC_OscConfig+0x24a>
 8006336:	e715      	b.n	8006164 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006338:	2b05      	cmp	r3, #5
 800633a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800633c:	d103      	bne.n	8006346 <HAL_RCC_OscConfig+0x26a>
 800633e:	f043 0304 	orr.w	r3, r3, #4
 8006342:	672b      	str	r3, [r5, #112]	; 0x70
 8006344:	e7b9      	b.n	80062ba <HAL_RCC_OscConfig+0x1de>
 8006346:	f023 0301 	bic.w	r3, r3, #1
 800634a:	672b      	str	r3, [r5, #112]	; 0x70
 800634c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800634e:	f023 0304 	bic.w	r3, r3, #4
 8006352:	e7b5      	b.n	80062c0 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006354:	f7fd fe8c 	bl	8004070 <HAL_GetTick>
 8006358:	1b40      	subs	r0, r0, r5
 800635a:	4540      	cmp	r0, r8
 800635c:	d9b7      	bls.n	80062ce <HAL_RCC_OscConfig+0x1f2>
 800635e:	e701      	b.n	8006164 <HAL_RCC_OscConfig+0x88>
 8006360:	40023800 	.word	0x40023800
 8006364:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006368:	4d38      	ldr	r5, [pc, #224]	; (800644c <HAL_RCC_OscConfig+0x370>)
 800636a:	68ab      	ldr	r3, [r5, #8]
 800636c:	f003 030c 	and.w	r3, r3, #12
 8006370:	2b08      	cmp	r3, #8
 8006372:	d041      	beq.n	80063f8 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 8006374:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006376:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8006378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800637c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800637e:	d12e      	bne.n	80063de <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 8006380:	f7fd fe76 	bl	8004070 <HAL_GetTick>
 8006384:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006386:	682b      	ldr	r3, [r5, #0]
 8006388:	0199      	lsls	r1, r3, #6
 800638a:	d422      	bmi.n	80063d2 <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800638c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800638e:	085b      	lsrs	r3, r3, #1
 8006390:	1e5a      	subs	r2, r3, #1
 8006392:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8006396:	430b      	orrs	r3, r1
 8006398:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800639c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800639e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80063a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80063a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80063a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063ac:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80063ae:	682b      	ldr	r3, [r5, #0]
 80063b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80063b6:	f7fd fe5b 	bl	8004070 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ba:	4d24      	ldr	r5, [pc, #144]	; (800644c <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 80063bc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063be:	682b      	ldr	r3, [r5, #0]
 80063c0:	019a      	lsls	r2, r3, #6
 80063c2:	f53f aea1 	bmi.w	8006108 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c6:	f7fd fe53 	bl	8004070 <HAL_GetTick>
 80063ca:	1b00      	subs	r0, r0, r4
 80063cc:	2802      	cmp	r0, #2
 80063ce:	d9f6      	bls.n	80063be <HAL_RCC_OscConfig+0x2e2>
 80063d0:	e6c8      	b.n	8006164 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d2:	f7fd fe4d 	bl	8004070 <HAL_GetTick>
 80063d6:	1b80      	subs	r0, r0, r6
 80063d8:	2802      	cmp	r0, #2
 80063da:	d9d4      	bls.n	8006386 <HAL_RCC_OscConfig+0x2aa>
 80063dc:	e6c2      	b.n	8006164 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 80063de:	f7fd fe47 	bl	8004070 <HAL_GetTick>
 80063e2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	019b      	lsls	r3, r3, #6
 80063e8:	f57f ae8e 	bpl.w	8006108 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ec:	f7fd fe40 	bl	8004070 <HAL_GetTick>
 80063f0:	1b00      	subs	r0, r0, r4
 80063f2:	2802      	cmp	r0, #2
 80063f4:	d9f6      	bls.n	80063e4 <HAL_RCC_OscConfig+0x308>
 80063f6:	e6b5      	b.n	8006164 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063f8:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 80063fa:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063fc:	f43f ae9b 	beq.w	8006136 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006400:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006404:	69e1      	ldr	r1, [r4, #28]
 8006406:	428a      	cmp	r2, r1
 8006408:	f47f ae95 	bne.w	8006136 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800640c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006410:	6a21      	ldr	r1, [r4, #32]
 8006412:	428a      	cmp	r2, r1
 8006414:	f47f ae8f 	bne.w	8006136 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006418:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800641c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800641e:	401a      	ands	r2, r3
 8006420:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8006424:	f47f ae87 	bne.w	8006136 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006428:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800642a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800642e:	0852      	lsrs	r2, r2, #1
 8006430:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006432:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8006436:	f47f ae7e 	bne.w	8006136 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800643a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800643e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006440:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8006444:	f43f ae60 	beq.w	8006108 <HAL_RCC_OscConfig+0x2c>
 8006448:	e675      	b.n	8006136 <HAL_RCC_OscConfig+0x5a>
 800644a:	bf00      	nop
 800644c:	40023800 	.word	0x40023800

08006450 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006450:	4913      	ldr	r1, [pc, #76]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8006452:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006454:	688b      	ldr	r3, [r1, #8]
 8006456:	f003 030c 	and.w	r3, r3, #12
 800645a:	2b04      	cmp	r3, #4
 800645c:	d01b      	beq.n	8006496 <HAL_RCC_GetSysClockFreq+0x46>
 800645e:	2b08      	cmp	r3, #8
 8006460:	d11b      	bne.n	800649a <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006462:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006464:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006466:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006468:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800646c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006470:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006474:	bf1a      	itte	ne
 8006476:	480b      	ldrne	r0, [pc, #44]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x54>)
 8006478:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800647a:	480b      	ldreq	r0, [pc, #44]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x58>)
 800647c:	fba1 0100 	umull	r0, r1, r1, r0
 8006480:	f7fa fbb2 	bl	8000be8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006484:	4b06      	ldr	r3, [pc, #24]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x50>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800648c:	3301      	adds	r3, #1
 800648e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8006490:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006494:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006496:	4803      	ldr	r0, [pc, #12]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x54>)
 8006498:	e7fc      	b.n	8006494 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800649a:	4803      	ldr	r0, [pc, #12]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800649c:	e7fa      	b.n	8006494 <HAL_RCC_GetSysClockFreq+0x44>
 800649e:	bf00      	nop
 80064a0:	40023800 	.word	0x40023800
 80064a4:	017d7840 	.word	0x017d7840
 80064a8:	00f42400 	.word	0x00f42400

080064ac <HAL_RCC_ClockConfig>:
{
 80064ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80064b2:	4604      	mov	r4, r0
 80064b4:	b910      	cbnz	r0, 80064bc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80064b6:	2001      	movs	r0, #1
}
 80064b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064bc:	4a45      	ldr	r2, [pc, #276]	; (80065d4 <HAL_RCC_ClockConfig+0x128>)
 80064be:	6813      	ldr	r3, [r2, #0]
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	428b      	cmp	r3, r1
 80064c6:	d328      	bcc.n	800651a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064c8:	6821      	ldr	r1, [r4, #0]
 80064ca:	078f      	lsls	r7, r1, #30
 80064cc:	d430      	bmi.n	8006530 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ce:	07c8      	lsls	r0, r1, #31
 80064d0:	d443      	bmi.n	800655a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064d2:	4a40      	ldr	r2, [pc, #256]	; (80065d4 <HAL_RCC_ClockConfig+0x128>)
 80064d4:	6813      	ldr	r3, [r2, #0]
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	42ab      	cmp	r3, r5
 80064dc:	d866      	bhi.n	80065ac <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064de:	6822      	ldr	r2, [r4, #0]
 80064e0:	0751      	lsls	r1, r2, #29
 80064e2:	d46f      	bmi.n	80065c4 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e4:	0713      	lsls	r3, r2, #28
 80064e6:	d507      	bpl.n	80064f8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064e8:	4a3b      	ldr	r2, [pc, #236]	; (80065d8 <HAL_RCC_ClockConfig+0x12c>)
 80064ea:	6921      	ldr	r1, [r4, #16]
 80064ec:	6893      	ldr	r3, [r2, #8]
 80064ee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80064f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80064f6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80064f8:	f7ff ffaa 	bl	8006450 <HAL_RCC_GetSysClockFreq>
 80064fc:	4b36      	ldr	r3, [pc, #216]	; (80065d8 <HAL_RCC_ClockConfig+0x12c>)
 80064fe:	4a37      	ldr	r2, [pc, #220]	; (80065dc <HAL_RCC_ClockConfig+0x130>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006506:	5cd3      	ldrb	r3, [r2, r3]
 8006508:	40d8      	lsrs	r0, r3
 800650a:	4b35      	ldr	r3, [pc, #212]	; (80065e0 <HAL_RCC_ClockConfig+0x134>)
 800650c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800650e:	4b35      	ldr	r3, [pc, #212]	; (80065e4 <HAL_RCC_ClockConfig+0x138>)
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	f7fc f9bf 	bl	8002894 <HAL_InitTick>
  return HAL_OK;
 8006516:	2000      	movs	r0, #0
 8006518:	e7ce      	b.n	80064b8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651a:	6813      	ldr	r3, [r2, #0]
 800651c:	f023 030f 	bic.w	r3, r3, #15
 8006520:	430b      	orrs	r3, r1
 8006522:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006524:	6813      	ldr	r3, [r2, #0]
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	428b      	cmp	r3, r1
 800652c:	d1c3      	bne.n	80064b6 <HAL_RCC_ClockConfig+0xa>
 800652e:	e7cb      	b.n	80064c8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006530:	f011 0f04 	tst.w	r1, #4
 8006534:	4b28      	ldr	r3, [pc, #160]	; (80065d8 <HAL_RCC_ClockConfig+0x12c>)
 8006536:	d003      	beq.n	8006540 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800653e:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006540:	070e      	lsls	r6, r1, #28
 8006542:	d503      	bpl.n	800654c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800654a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	68a0      	ldr	r0, [r4, #8]
 8006550:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006554:	4302      	orrs	r2, r0
 8006556:	609a      	str	r2, [r3, #8]
 8006558:	e7b9      	b.n	80064ce <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800655a:	6861      	ldr	r1, [r4, #4]
 800655c:	4b1e      	ldr	r3, [pc, #120]	; (80065d8 <HAL_RCC_ClockConfig+0x12c>)
 800655e:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006560:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006562:	d11b      	bne.n	800659c <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006564:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006568:	d0a5      	beq.n	80064b6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800656a:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800656c:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006570:	4f19      	ldr	r7, [pc, #100]	; (80065d8 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006572:	f022 0203 	bic.w	r2, r2, #3
 8006576:	430a      	orrs	r2, r1
 8006578:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800657a:	f7fd fd79 	bl	8004070 <HAL_GetTick>
 800657e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	6862      	ldr	r2, [r4, #4]
 8006584:	f003 030c 	and.w	r3, r3, #12
 8006588:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800658c:	d0a1      	beq.n	80064d2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800658e:	f7fd fd6f 	bl	8004070 <HAL_GetTick>
 8006592:	1b80      	subs	r0, r0, r6
 8006594:	4540      	cmp	r0, r8
 8006596:	d9f3      	bls.n	8006580 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8006598:	2003      	movs	r0, #3
 800659a:	e78d      	b.n	80064b8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800659c:	2902      	cmp	r1, #2
 800659e:	d102      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80065a4:	e7e0      	b.n	8006568 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065a6:	f012 0f02 	tst.w	r2, #2
 80065aa:	e7dd      	b.n	8006568 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ac:	6813      	ldr	r3, [r2, #0]
 80065ae:	f023 030f 	bic.w	r3, r3, #15
 80065b2:	432b      	orrs	r3, r5
 80065b4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065b6:	6813      	ldr	r3, [r2, #0]
 80065b8:	f003 030f 	and.w	r3, r3, #15
 80065bc:	42ab      	cmp	r3, r5
 80065be:	f47f af7a 	bne.w	80064b6 <HAL_RCC_ClockConfig+0xa>
 80065c2:	e78c      	b.n	80064de <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065c4:	4904      	ldr	r1, [pc, #16]	; (80065d8 <HAL_RCC_ClockConfig+0x12c>)
 80065c6:	68e0      	ldr	r0, [r4, #12]
 80065c8:	688b      	ldr	r3, [r1, #8]
 80065ca:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80065ce:	4303      	orrs	r3, r0
 80065d0:	608b      	str	r3, [r1, #8]
 80065d2:	e787      	b.n	80064e4 <HAL_RCC_ClockConfig+0x38>
 80065d4:	40023c00 	.word	0x40023c00
 80065d8:	40023800 	.word	0x40023800
 80065dc:	0800bfd2 	.word	0x0800bfd2
 80065e0:	20000008 	.word	0x20000008
 80065e4:	2000001c 	.word	0x2000001c

080065e8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065e8:	4b04      	ldr	r3, [pc, #16]	; (80065fc <HAL_RCC_GetPCLK1Freq+0x14>)
 80065ea:	4a05      	ldr	r2, [pc, #20]	; (8006600 <HAL_RCC_GetPCLK1Freq+0x18>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80065f2:	5cd3      	ldrb	r3, [r2, r3]
 80065f4:	4a03      	ldr	r2, [pc, #12]	; (8006604 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80065f6:	6810      	ldr	r0, [r2, #0]
}
 80065f8:	40d8      	lsrs	r0, r3
 80065fa:	4770      	bx	lr
 80065fc:	40023800 	.word	0x40023800
 8006600:	0800bfe2 	.word	0x0800bfe2
 8006604:	20000008 	.word	0x20000008

08006608 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006608:	4b04      	ldr	r3, [pc, #16]	; (800661c <HAL_RCC_GetPCLK2Freq+0x14>)
 800660a:	4a05      	ldr	r2, [pc, #20]	; (8006620 <HAL_RCC_GetPCLK2Freq+0x18>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006612:	5cd3      	ldrb	r3, [r2, r3]
 8006614:	4a03      	ldr	r2, [pc, #12]	; (8006624 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006616:	6810      	ldr	r0, [r2, #0]
}
 8006618:	40d8      	lsrs	r0, r3
 800661a:	4770      	bx	lr
 800661c:	40023800 	.word	0x40023800
 8006620:	0800bfe2 	.word	0x0800bfe2
 8006624:	20000008 	.word	0x20000008

08006628 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006628:	230f      	movs	r3, #15
 800662a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800662c:	4b0b      	ldr	r3, [pc, #44]	; (800665c <HAL_RCC_GetClockConfig+0x34>)
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	f002 0203 	and.w	r2, r2, #3
 8006634:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800663c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8006644:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	08db      	lsrs	r3, r3, #3
 800664a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800664e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006650:	4b03      	ldr	r3, [pc, #12]	; (8006660 <HAL_RCC_GetClockConfig+0x38>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	600b      	str	r3, [r1, #0]
}
 800665a:	4770      	bx	lr
 800665c:	40023800 	.word	0x40023800
 8006660:	40023c00 	.word	0x40023c00

08006664 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006664:	6803      	ldr	r3, [r0, #0]
{
 8006666:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800666a:	f013 0601 	ands.w	r6, r3, #1
{
 800666e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006670:	d00b      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006672:	4aad      	ldr	r2, [pc, #692]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006674:	6891      	ldr	r1, [r2, #8]
 8006676:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800667a:	6091      	str	r1, [r2, #8]
 800667c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800667e:	6891      	ldr	r1, [r2, #8]
 8006680:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006682:	fab6 f686 	clz	r6, r6
 8006686:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006688:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800668a:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800668e:	d012      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006690:	49a5      	ldr	r1, [pc, #660]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006692:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8006694:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006698:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800669c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80066a0:	bf08      	it	eq
 80066a2:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066a4:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80066a8:	bf16      	itet	ne
 80066aa:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80066ae:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80066b0:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066b2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80066b6:	02d8      	lsls	r0, r3, #11
 80066b8:	d510      	bpl.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066ba:	489b      	ldr	r0, [pc, #620]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80066bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80066be:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80066c2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066c6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80066ca:	ea42 0201 	orr.w	r2, r2, r1
 80066ce:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80066d2:	f000 8186 	beq.w	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80066d6:	2900      	cmp	r1, #0
 80066d8:	bf08      	it	eq
 80066da:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80066dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80066e0:	bf18      	it	ne
 80066e2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066e4:	0699      	lsls	r1, r3, #26
 80066e6:	d532      	bpl.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066e8:	4b8f      	ldr	r3, [pc, #572]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80066ea:	4f90      	ldr	r7, [pc, #576]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80066ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80066f2:	641a      	str	r2, [r3, #64]	; 0x40
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066fa:	9301      	str	r3, [sp, #4]
 80066fc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006704:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006706:	f7fd fcb3 	bl	8004070 <HAL_GetTick>
 800670a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	05da      	lsls	r2, r3, #23
 8006710:	f140 8169 	bpl.w	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006714:	4f84      	ldr	r7, [pc, #528]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006716:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006718:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800671a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800671e:	f040 816d 	bne.w	80069fc <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006722:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006724:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006728:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800672c:	4a7e      	ldr	r2, [pc, #504]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800672e:	f040 818a 	bne.w	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006732:	6891      	ldr	r1, [r2, #8]
 8006734:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8006738:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800673c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8006740:	4301      	orrs	r1, r0
 8006742:	6091      	str	r1, [r2, #8]
 8006744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006748:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800674a:	430b      	orrs	r3, r1
 800674c:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	06d9      	lsls	r1, r3, #27
 8006752:	d50c      	bpl.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006754:	4a74      	ldr	r2, [pc, #464]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006756:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800675a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800675e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8006762:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8006766:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006768:	4301      	orrs	r1, r0
 800676a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800676e:	045a      	lsls	r2, r3, #17
 8006770:	d508      	bpl.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006772:	496d      	ldr	r1, [pc, #436]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006774:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8006776:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800677a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800677e:	4302      	orrs	r2, r0
 8006780:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006784:	041f      	lsls	r7, r3, #16
 8006786:	d508      	bpl.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006788:	4967      	ldr	r1, [pc, #412]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800678a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800678c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006790:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8006794:	4302      	orrs	r2, r0
 8006796:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800679a:	03d8      	lsls	r0, r3, #15
 800679c:	d508      	bpl.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800679e:	4962      	ldr	r1, [pc, #392]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80067a0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80067a2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80067a6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80067aa:	4302      	orrs	r2, r0
 80067ac:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067b0:	0399      	lsls	r1, r3, #14
 80067b2:	d508      	bpl.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067b4:	495c      	ldr	r1, [pc, #368]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80067b6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80067b8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80067bc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80067c0:	4302      	orrs	r2, r0
 80067c2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067c6:	065a      	lsls	r2, r3, #25
 80067c8:	d508      	bpl.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067ca:	4957      	ldr	r1, [pc, #348]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80067cc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80067ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80067d2:	f022 0203 	bic.w	r2, r2, #3
 80067d6:	4302      	orrs	r2, r0
 80067d8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067dc:	061f      	lsls	r7, r3, #24
 80067de:	d508      	bpl.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067e0:	4951      	ldr	r1, [pc, #324]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80067e2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80067e4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80067e8:	f022 020c 	bic.w	r2, r2, #12
 80067ec:	4302      	orrs	r2, r0
 80067ee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067f2:	05d8      	lsls	r0, r3, #23
 80067f4:	d508      	bpl.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067f6:	494c      	ldr	r1, [pc, #304]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80067f8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80067fa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80067fe:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006802:	4302      	orrs	r2, r0
 8006804:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006808:	0599      	lsls	r1, r3, #22
 800680a:	d508      	bpl.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800680c:	4946      	ldr	r1, [pc, #280]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800680e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006810:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006814:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006818:	4302      	orrs	r2, r0
 800681a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800681e:	055a      	lsls	r2, r3, #21
 8006820:	d508      	bpl.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006822:	4941      	ldr	r1, [pc, #260]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006824:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006826:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800682a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800682e:	4302      	orrs	r2, r0
 8006830:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006834:	051f      	lsls	r7, r3, #20
 8006836:	d508      	bpl.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006838:	493b      	ldr	r1, [pc, #236]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800683a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800683c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006840:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006844:	4302      	orrs	r2, r0
 8006846:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800684a:	04d8      	lsls	r0, r3, #19
 800684c:	d508      	bpl.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800684e:	4936      	ldr	r1, [pc, #216]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006850:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006852:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006856:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800685a:	4302      	orrs	r2, r0
 800685c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006860:	0499      	lsls	r1, r3, #18
 8006862:	d508      	bpl.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006864:	4930      	ldr	r1, [pc, #192]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006866:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006868:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800686c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006870:	4302      	orrs	r2, r0
 8006872:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006876:	025a      	lsls	r2, r3, #9
 8006878:	d508      	bpl.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800687a:	492b      	ldr	r1, [pc, #172]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800687c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800687e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006882:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8006886:	4302      	orrs	r2, r0
 8006888:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800688c:	029f      	lsls	r7, r3, #10
 800688e:	d50c      	bpl.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006890:	4825      	ldr	r0, [pc, #148]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006892:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8006894:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8006898:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800689c:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80068a0:	bf08      	it	eq
 80068a2:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80068a4:	430a      	orrs	r2, r1
 80068a6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80068aa:	f013 0f08 	tst.w	r3, #8
 80068ae:	bf18      	it	ne
 80068b0:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068b2:	0358      	lsls	r0, r3, #13
 80068b4:	d508      	bpl.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068b6:	491c      	ldr	r1, [pc, #112]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80068b8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80068ba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80068be:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80068c2:	4302      	orrs	r2, r0
 80068c4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80068c8:	0219      	lsls	r1, r3, #8
 80068ca:	d509      	bpl.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80068cc:	4916      	ldr	r1, [pc, #88]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80068ce:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80068d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80068d6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80068da:	4302      	orrs	r2, r0
 80068dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068e0:	2e01      	cmp	r6, #1
 80068e2:	f000 80b4 	beq.w	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80068e6:	019a      	lsls	r2, r3, #6
 80068e8:	f100 80b1 	bmi.w	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80068ec:	2d01      	cmp	r5, #1
 80068ee:	d176      	bne.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80068f0:	4d0d      	ldr	r5, [pc, #52]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80068f2:	682b      	ldr	r3, [r5, #0]
 80068f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068f8:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068fa:	f7fd fbb9 	bl	8004070 <HAL_GetTick>
 80068fe:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006900:	682b      	ldr	r3, [r5, #0]
 8006902:	009f      	lsls	r7, r3, #2
 8006904:	f100 8127 	bmi.w	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006908:	6821      	ldr	r1, [r4, #0]
 800690a:	030e      	lsls	r6, r1, #12
 800690c:	d501      	bpl.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800690e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006910:	b11b      	cbz	r3, 800691a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8006912:	02cd      	lsls	r5, r1, #11
 8006914:	d523      	bpl.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006916:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006918:	bb0b      	cbnz	r3, 800695e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800691a:	4a03      	ldr	r2, [pc, #12]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800691c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006920:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8006924:	e004      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006926:	bf00      	nop
 8006928:	40023800 	.word	0x40023800
 800692c:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006934:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006938:	4303      	orrs	r3, r0
 800693a:	6960      	ldr	r0, [r4, #20]
 800693c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006940:	69a0      	ldr	r0, [r4, #24]
 8006942:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006946:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800694a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800694e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006950:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006954:	3801      	subs	r0, #1
 8006956:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800695a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800695e:	0288      	lsls	r0, r1, #10
 8006960:	d515      	bpl.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006962:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006964:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006968:	d111      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800696a:	4a82      	ldr	r2, [pc, #520]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800696c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006970:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006974:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006978:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800697c:	4303      	orrs	r3, r0
 800697e:	6960      	ldr	r0, [r4, #20]
 8006980:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006984:	6a20      	ldr	r0, [r4, #32]
 8006986:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800698a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800698e:	070a      	lsls	r2, r1, #28
 8006990:	d519      	bpl.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006992:	4a78      	ldr	r2, [pc, #480]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006994:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006998:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800699c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80069a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069a4:	430b      	orrs	r3, r1
 80069a6:	6961      	ldr	r1, [r4, #20]
 80069a8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80069ac:	69e1      	ldr	r1, [r4, #28]
 80069ae:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80069b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80069b6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80069ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80069bc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80069c0:	430b      	orrs	r3, r1
 80069c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80069c6:	4c6b      	ldr	r4, [pc, #428]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ce:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069d0:	f7fd fb4e 	bl	8004070 <HAL_GetTick>
 80069d4:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	f140 80c3 	bpl.w	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80069de:	2000      	movs	r0, #0
 80069e0:	e009      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
 80069e2:	2601      	movs	r6, #1
 80069e4:	e67a      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069e6:	f7fd fb43 	bl	8004070 <HAL_GetTick>
 80069ea:	eba0 0008 	sub.w	r0, r0, r8
 80069ee:	2864      	cmp	r0, #100	; 0x64
 80069f0:	f67f ae8c 	bls.w	800670c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80069f4:	2003      	movs	r0, #3
}
 80069f6:	b003      	add	sp, #12
 80069f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069fc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006a00:	429a      	cmp	r2, r3
 8006a02:	f43f ae8e 	beq.w	8006722 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a08:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a0e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006a12:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006a16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a1a:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8006a1c:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a20:	07db      	lsls	r3, r3, #31
 8006a22:	f57f ae7e 	bpl.w	8006722 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 8006a26:	f7fd fb23 	bl	8004070 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a2a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006a2e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a32:	0798      	lsls	r0, r3, #30
 8006a34:	f53f ae75 	bmi.w	8006722 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a38:	f7fd fb1a 	bl	8004070 <HAL_GetTick>
 8006a3c:	eba0 0008 	sub.w	r0, r0, r8
 8006a40:	4548      	cmp	r0, r9
 8006a42:	d9f5      	bls.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006a44:	e7d6      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a46:	6891      	ldr	r1, [r2, #8]
 8006a48:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006a4c:	e679      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 8006a4e:	4e49      	ldr	r6, [pc, #292]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006a50:	6833      	ldr	r3, [r6, #0]
 8006a52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a56:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006a58:	f7fd fb0a 	bl	8004070 <HAL_GetTick>
 8006a5c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a5e:	6833      	ldr	r3, [r6, #0]
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	d472      	bmi.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006a64:	6822      	ldr	r2, [r4, #0]
 8006a66:	07d7      	lsls	r7, r2, #31
 8006a68:	d512      	bpl.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006a6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a6c:	b983      	cbnz	r3, 8006a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a6e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a72:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a7a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006a7e:	430b      	orrs	r3, r1
 8006a80:	6861      	ldr	r1, [r4, #4]
 8006a82:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006a86:	68a1      	ldr	r1, [r4, #8]
 8006a88:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006a8c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006a90:	0316      	lsls	r6, r2, #12
 8006a92:	d503      	bpl.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x438>
 8006a94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a9a:	d005      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8006a9c:	02d0      	lsls	r0, r2, #11
 8006a9e:	d51e      	bpl.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006aa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aa6:	d11a      	bne.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006aa8:	4932      	ldr	r1, [pc, #200]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006aaa:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006aae:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006ab2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ab6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006aba:	4303      	orrs	r3, r0
 8006abc:	6860      	ldr	r0, [r4, #4]
 8006abe:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006ac2:	68e0      	ldr	r0, [r4, #12]
 8006ac4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006ac8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006acc:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8006ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ad2:	f020 001f 	bic.w	r0, r0, #31
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	4303      	orrs	r3, r0
 8006ada:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ade:	01d1      	lsls	r1, r2, #7
 8006ae0:	d511      	bpl.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ae2:	4924      	ldr	r1, [pc, #144]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006ae4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ae8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006aec:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006af0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006af4:	4303      	orrs	r3, r0
 8006af6:	6860      	ldr	r0, [r4, #4]
 8006af8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006afc:	6920      	ldr	r0, [r4, #16]
 8006afe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b06:	0192      	lsls	r2, r2, #6
 8006b08:	d50d      	bpl.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b0a:	6923      	ldr	r3, [r4, #16]
 8006b0c:	6862      	ldr	r2, [r4, #4]
 8006b0e:	041b      	lsls	r3, r3, #16
 8006b10:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006b14:	68e2      	ldr	r2, [r4, #12]
 8006b16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006b1a:	68a2      	ldr	r2, [r4, #8]
 8006b1c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006b20:	4a14      	ldr	r2, [pc, #80]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006b22:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8006b26:	4e13      	ldr	r6, [pc, #76]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8006b28:	6833      	ldr	r3, [r6, #0]
 8006b2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b2e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006b30:	f7fd fa9e 	bl	8004070 <HAL_GetTick>
 8006b34:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b36:	6833      	ldr	r3, [r6, #0]
 8006b38:	011b      	lsls	r3, r3, #4
 8006b3a:	f53f aed7 	bmi.w	80068ec <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b3e:	f7fd fa97 	bl	8004070 <HAL_GetTick>
 8006b42:	1bc0      	subs	r0, r0, r7
 8006b44:	2864      	cmp	r0, #100	; 0x64
 8006b46:	d9f6      	bls.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b48:	e754      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b4a:	f7fd fa91 	bl	8004070 <HAL_GetTick>
 8006b4e:	1bc0      	subs	r0, r0, r7
 8006b50:	2864      	cmp	r0, #100	; 0x64
 8006b52:	d984      	bls.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006b54:	e74e      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b56:	f7fd fa8b 	bl	8004070 <HAL_GetTick>
 8006b5a:	1b80      	subs	r0, r0, r6
 8006b5c:	2864      	cmp	r0, #100	; 0x64
 8006b5e:	f67f aecf 	bls.w	8006900 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8006b62:	e747      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b64:	f7fd fa84 	bl	8004070 <HAL_GetTick>
 8006b68:	1b40      	subs	r0, r0, r5
 8006b6a:	2864      	cmp	r0, #100	; 0x64
 8006b6c:	f67f af33 	bls.w	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006b70:	e740      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8006b72:	bf00      	nop
 8006b74:	40023800 	.word	0x40023800

08006b78 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006b78:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8006b7c:	d140      	bne.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006b7e:	4b2e      	ldr	r3, [pc, #184]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8006b80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006b84:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8006b88:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8006b8c:	d046      	beq.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8006b8e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8006b92:	d04c      	beq.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006b94:	2a00      	cmp	r2, #0
 8006b96:	d14c      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	bf08      	it	eq
 8006ba2:	4b26      	ldreq	r3, [pc, #152]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8006ba4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006ba8:	bf18      	it	ne
 8006baa:	4b25      	ldrne	r3, [pc, #148]	; (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8006bac:	fbb3 f3f2 	udiv	r3, r3, r2
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006bb0:	4a21      	ldr	r2, [pc, #132]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8006bb2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006bb6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8006bba:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8006bbe:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006bc0:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006bc4:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006bc8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006bcc:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8006bd0:	e012      	b.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006bd2:	4b1b      	ldr	r3, [pc, #108]	; (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8006bd4:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006bd8:	4a17      	ldr	r2, [pc, #92]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8006bda:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006bde:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8006be2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8006be6:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006be8:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006bec:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006bf0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006bf4:	f003 031f 	and.w	r3, r3, #31
 8006bf8:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8006bfa:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8006bfe:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006c00:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8006c04:	d115      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    saiclocksource = RCC->DCKCFGR1;
 8006c06:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8006c08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006c0c:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8006c10:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8006c14:	d002      	beq.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8006c16:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8006c1a:	e7ba      	b.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006c28:	d1d3      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c2a:	4b04      	ldr	r3, [pc, #16]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8006c2c:	e7d2      	b.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
        frequency = frequency/(tmpreg);
        break;
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c2e:	4805      	ldr	r0, [pc, #20]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8006c30:	4770      	bx	lr
    switch (saiclocksource)
 8006c32:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	00f42400 	.word	0x00f42400
 8006c40:	017d7840 	.word	0x017d7840
 8006c44:	00bb8000 	.word	0x00bb8000

08006c48 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006c48:	6802      	ldr	r2, [r0, #0]
{
 8006c4a:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006c4c:	68d3      	ldr	r3, [r2, #12]
{
 8006c4e:	4604      	mov	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006c50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c54:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c56:	f7fd fa0b 	bl	8004070 <HAL_GetTick>
 8006c5a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	069b      	lsls	r3, r3, #26
 8006c62:	d501      	bpl.n	8006c68 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8006c64:	2000      	movs	r0, #0
}
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c68:	f7fd fa02 	bl	8004070 <HAL_GetTick>
 8006c6c:	1b40      	subs	r0, r0, r5
 8006c6e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006c72:	d9f3      	bls.n	8006c5c <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8006c74:	2003      	movs	r0, #3
 8006c76:	e7f6      	b.n	8006c66 <HAL_RTC_WaitForSynchro+0x1e>

08006c78 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006c7a:	6803      	ldr	r3, [r0, #0]
{
 8006c7c:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006c7e:	68dc      	ldr	r4, [r3, #12]
 8006c80:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 8006c84:	d117      	bne.n	8006cb6 <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006c86:	68da      	ldr	r2, [r3, #12]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c88:	2704      	movs	r7, #4
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c8e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8006c90:	f7fd f9ee 	bl	8004070 <HAL_GetTick>
 8006c94:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006c96:	682b      	ldr	r3, [r5, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	065b      	lsls	r3, r3, #25
 8006c9c:	d400      	bmi.n	8006ca0 <RTC_EnterInitMode+0x28>
 8006c9e:	b10c      	cbz	r4, 8006ca4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
}
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ca4:	f7fd f9e4 	bl	8004070 <HAL_GetTick>
 8006ca8:	1b80      	subs	r0, r0, r6
 8006caa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006cae:	d9f2      	bls.n	8006c96 <RTC_EnterInitMode+0x1e>
        status = HAL_ERROR;
 8006cb0:	2401      	movs	r4, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006cb2:	776f      	strb	r7, [r5, #29]
        status = HAL_ERROR;
 8006cb4:	e7ef      	b.n	8006c96 <RTC_EnterInitMode+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 8006cb6:	2400      	movs	r4, #0
 8006cb8:	e7f2      	b.n	8006ca0 <RTC_EnterInitMode+0x28>

08006cba <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006cba:	6803      	ldr	r3, [r0, #0]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
 8006cc2:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006cc4:	60da      	str	r2, [r3, #12]
{
 8006cc6:	4604      	mov	r4, r0

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	069b      	lsls	r3, r3, #26
 8006ccc:	d501      	bpl.n	8006cd2 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006cce:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8006cd0:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006cd2:	f7ff ffb9 	bl	8006c48 <HAL_RTC_WaitForSynchro>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d0f9      	beq.n	8006cce <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006cda:	2304      	movs	r3, #4
      status = HAL_ERROR;
 8006cdc:	2001      	movs	r0, #1
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006cde:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8006ce0:	e7f6      	b.n	8006cd0 <RTC_ExitInitMode+0x16>

08006ce2 <HAL_RTC_Init>:
{
 8006ce2:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d041      	beq.n	8006d6e <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006cea:	7f43      	ldrb	r3, [r0, #29]
 8006cec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006cf0:	b913      	cbnz	r3, 8006cf8 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8006cf2:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8006cf4:	f7fb fa66 	bl	80021c4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	06d2      	lsls	r2, r2, #27
 8006d02:	d503      	bpl.n	8006d0c <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 8006d04:	2301      	movs	r3, #1
 8006d06:	2000      	movs	r0, #0
 8006d08:	7763      	strb	r3, [r4, #29]
}
 8006d0a:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d0c:	22ca      	movs	r2, #202	; 0xca
    status = RTC_EnterInitMode(hrtc);
 8006d0e:	4620      	mov	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d10:	625a      	str	r2, [r3, #36]	; 0x24
 8006d12:	2253      	movs	r2, #83	; 0x53
 8006d14:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8006d16:	f7ff ffaf 	bl	8006c78 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8006d1a:	bb10      	cbnz	r0, 8006d62 <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006d1c:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d1e:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006d20:	689a      	ldr	r2, [r3, #8]
 8006d22:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8006d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d2a:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d2c:	6862      	ldr	r2, [r4, #4]
 8006d2e:	6899      	ldr	r1, [r3, #8]
 8006d30:	4302      	orrs	r2, r0
 8006d32:	6960      	ldr	r0, [r4, #20]
 8006d34:	4302      	orrs	r2, r0
      status = RTC_ExitInitMode(hrtc);
 8006d36:	4620      	mov	r0, r4
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d38:	430a      	orrs	r2, r1
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006d3a:	68a1      	ldr	r1, [r4, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d3c:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006d3e:	68e2      	ldr	r2, [r4, #12]
 8006d40:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006d42:	691a      	ldr	r2, [r3, #16]
 8006d44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006d48:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8006d4a:	f7ff ffb6 	bl	8006cba <RTC_ExitInitMode>
    if (status == HAL_OK)
 8006d4e:	b940      	cbnz	r0, 8006d62 <HAL_RTC_Init+0x80>
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006d50:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006d52:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006d54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d56:	f022 0208 	bic.w	r2, r2, #8
 8006d5a:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006d5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	22ff      	movs	r2, #255	; 0xff
 8006d66:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d0cb      	beq.n	8006d04 <HAL_RTC_Init+0x22>
 8006d6c:	e7cd      	b.n	8006d0a <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 8006d6e:	2001      	movs	r0, #1
 8006d70:	e7cb      	b.n	8006d0a <HAL_RTC_Init+0x28>

08006d72 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 8006d72:	2300      	movs	r3, #0

  while (number >= 10U)
 8006d74:	2809      	cmp	r0, #9
 8006d76:	d803      	bhi.n	8006d80 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006d78:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8006d7c:	b2c0      	uxtb	r0, r0
 8006d7e:	4770      	bx	lr
    number -= 10U;
 8006d80:	380a      	subs	r0, #10
    bcdhigh++;
 8006d82:	3301      	adds	r3, #1
    number -= 10U;
 8006d84:	b2c0      	uxtb	r0, r0
 8006d86:	e7f5      	b.n	8006d74 <RTC_ByteToBcd2+0x2>

08006d88 <HAL_RTC_SetTime>:
{
 8006d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8006d8c:	7f03      	ldrb	r3, [r0, #28]
{
 8006d8e:	4606      	mov	r6, r0
 8006d90:	460f      	mov	r7, r1
 8006d92:	2002      	movs	r0, #2
  __HAL_LOCK(hrtc);
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d041      	beq.n	8006e1c <HAL_RTC_SetTime+0x94>
 8006d98:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006d9a:	6831      	ldr	r1, [r6, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d9c:	7770      	strb	r0, [r6, #29]
  __HAL_LOCK(hrtc);
 8006d9e:	7733      	strb	r3, [r6, #28]
  if (Format == RTC_FORMAT_BIN)
 8006da0:	7838      	ldrb	r0, [r7, #0]
 8006da2:	787d      	ldrb	r5, [r7, #1]
 8006da4:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006da6:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 8006da8:	2a00      	cmp	r2, #0
 8006daa:	d139      	bne.n	8006e20 <HAL_RTC_SetTime+0x98>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006dac:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8006db0:	bf08      	it	eq
 8006db2:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006db4:	f7ff ffdd 	bl	8006d72 <RTC_ByteToBcd2>
 8006db8:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f7ff ffd9 	bl	8006d72 <RTC_ByteToBcd2>
 8006dc0:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f7ff ffd5 	bl	8006d72 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006dc8:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006dca:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8006dce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006dd2:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dd6:	23ca      	movs	r3, #202	; 0xca
  status = RTC_EnterInitMode(hrtc);
 8006dd8:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dda:	624b      	str	r3, [r1, #36]	; 0x24
 8006ddc:	2353      	movs	r3, #83	; 0x53
 8006dde:	624b      	str	r3, [r1, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8006de0:	f7ff ff4a 	bl	8006c78 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8006de4:	b9a8      	cbnz	r0, 8006e12 <HAL_RTC_SetTime+0x8a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006de6:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8006dea:	6832      	ldr	r2, [r6, #0]
 8006dec:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8006df0:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006df2:	6893      	ldr	r3, [r2, #8]
 8006df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006df8:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006dfa:	6891      	ldr	r1, [r2, #8]
 8006dfc:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8006e00:	4303      	orrs	r3, r0
    status = RTC_ExitInitMode(hrtc);
 8006e02:	4630      	mov	r0, r6
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006e04:	430b      	orrs	r3, r1
 8006e06:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 8006e08:	f7ff ff57 	bl	8006cba <RTC_ExitInitMode>
  if (status == HAL_OK)
 8006e0c:	b908      	cbnz	r0, 8006e12 <HAL_RTC_SetTime+0x8a>
    hrtc->State = HAL_RTC_STATE_READY;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e12:	6833      	ldr	r3, [r6, #0]
 8006e14:	22ff      	movs	r2, #255	; 0xff
 8006e16:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8006e18:	2300      	movs	r3, #0
 8006e1a:	7733      	strb	r3, [r6, #28]
}
 8006e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006e20:	022d      	lsls	r5, r5, #8
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006e22:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006e26:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
      sTime->TimeFormat = 0x00U;
 8006e2a:	bf08      	it	eq
 8006e2c:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006e2e:	78fa      	ldrb	r2, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006e30:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006e34:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 8006e38:	e7cd      	b.n	8006dd6 <HAL_RTC_SetTime+0x4e>

08006e3a <HAL_RTC_SetDate>:
{
 8006e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8006e3c:	7f03      	ldrb	r3, [r0, #28]
{
 8006e3e:	4605      	mov	r5, r0
  __HAL_LOCK(hrtc);
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	f04f 0302 	mov.w	r3, #2
 8006e46:	d039      	beq.n	8006ebc <HAL_RTC_SetDate+0x82>
 8006e48:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e4a:	776b      	strb	r3, [r5, #29]
  __HAL_LOCK(hrtc);
 8006e4c:	7728      	strb	r0, [r5, #28]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006e4e:	780c      	ldrb	r4, [r1, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e50:	78c8      	ldrb	r0, [r1, #3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006e52:	784e      	ldrb	r6, [r1, #1]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006e54:	0364      	lsls	r4, r4, #13
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006e56:	788f      	ldrb	r7, [r1, #2]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006e58:	bb92      	cbnz	r2, 8006ec0 <HAL_RTC_SetDate+0x86>
 8006e5a:	06f3      	lsls	r3, r6, #27
 8006e5c:	d503      	bpl.n	8006e66 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006e5e:	f026 0610 	bic.w	r6, r6, #16
 8006e62:	360a      	adds	r6, #10
 8006e64:	704e      	strb	r6, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e66:	f7ff ff84 	bl	8006d72 <RTC_ByteToBcd2>
 8006e6a:	4606      	mov	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e6c:	7848      	ldrb	r0, [r1, #1]
 8006e6e:	f7ff ff80 	bl	8006d72 <RTC_ByteToBcd2>
 8006e72:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006e74:	4638      	mov	r0, r7
 8006e76:	f7ff ff7c 	bl	8006d72 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e7a:	ea40 0304 	orr.w	r3, r0, r4
 8006e7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006e82:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e86:	682b      	ldr	r3, [r5, #0]
 8006e88:	22ca      	movs	r2, #202	; 0xca
  status = RTC_EnterInitMode(hrtc);
 8006e8a:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e8c:	625a      	str	r2, [r3, #36]	; 0x24
 8006e8e:	2253      	movs	r2, #83	; 0x53
 8006e90:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8006e92:	f7ff fef1 	bl	8006c78 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8006e96:	b958      	cbnz	r0, 8006eb0 <HAL_RTC_SetDate+0x76>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e98:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8006e9c:	682a      	ldr	r2, [r5, #0]
    status = RTC_ExitInitMode(hrtc);
 8006e9e:	4628      	mov	r0, r5
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006ea0:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8006ea4:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8006ea6:	f7ff ff08 	bl	8006cba <RTC_ExitInitMode>
  if (status == HAL_OK)
 8006eaa:	b908      	cbnz	r0, 8006eb0 <HAL_RTC_SetDate+0x76>
    hrtc->State = HAL_RTC_STATE_READY;
 8006eac:	2301      	movs	r3, #1
 8006eae:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	22ff      	movs	r2, #255	; 0xff
 8006eb4:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	772b      	strb	r3, [r5, #28]
}
 8006eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	e7fc      	b.n	8006eba <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006ec0:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8006ec4:	433c      	orrs	r4, r7
 8006ec6:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8006eca:	e7dc      	b.n	8006e86 <HAL_RTC_SetDate+0x4c>

08006ecc <HAL_RTC_SetAlarm>:
{
 8006ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(hrtc);
 8006ed0:	7f03      	ldrb	r3, [r0, #28]
{
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	2002      	movs	r0, #2
  __HAL_LOCK(hrtc);
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d07a      	beq.n	8006fd0 <HAL_RTC_SetAlarm+0x104>
 8006eda:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006edc:	6826      	ldr	r6, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ede:	7760      	strb	r0, [r4, #29]
  __HAL_LOCK(hrtc);
 8006ee0:	7723      	strb	r3, [r4, #28]
  if (Format == RTC_FORMAT_BIN)
 8006ee2:	7808      	ldrb	r0, [r1, #0]
 8006ee4:	f891 9001 	ldrb.w	r9, [r1, #1]
 8006ee8:	f891 a002 	ldrb.w	sl, [r1, #2]
 8006eec:	f891 7020 	ldrb.w	r7, [r1, #32]
 8006ef0:	69cd      	ldr	r5, [r1, #28]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ef2:	68b3      	ldr	r3, [r6, #8]
  if (Format == RTC_FORMAT_BIN)
 8006ef4:	2a00      	cmp	r2, #0
 8006ef6:	d14c      	bne.n	8006f92 <HAL_RTC_SetAlarm+0xc6>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ef8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006efc:	bf08      	it	eq
 8006efe:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006f00:	f7ff ff37 	bl	8006d72 <RTC_ByteToBcd2>
 8006f04:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f06:	4648      	mov	r0, r9
 8006f08:	f7ff ff33 	bl	8006d72 <RTC_ByteToBcd2>
 8006f0c:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006f0e:	4650      	mov	r0, sl
 8006f10:	f7ff ff2f 	bl	8006d72 <RTC_ByteToBcd2>
 8006f14:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006f16:	4638      	mov	r0, r7
 8006f18:	f7ff ff2b 	bl	8006d72 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006f1c:	694b      	ldr	r3, [r1, #20]
 8006f1e:	432b      	orrs	r3, r5
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006f20:	78cd      	ldrb	r5, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006f22:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 8006f26:	ea43 0309 	orr.w	r3, r3, r9
 8006f2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006f2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006f32:	ea43 6500 	orr.w	r5, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006f36:	698b      	ldr	r3, [r1, #24]
 8006f38:	684f      	ldr	r7, [r1, #4]
 8006f3a:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f3c:	23ca      	movs	r3, #202	; 0xca
 8006f3e:	6273      	str	r3, [r6, #36]	; 0x24
 8006f40:	2353      	movs	r3, #83	; 0x53
 8006f42:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006f44:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006f4a:	68b3      	ldr	r3, [r6, #8]
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006f4c:	d142      	bne.n	8006fd4 <HAL_RTC_SetAlarm+0x108>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006f4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f52:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006f54:	68b3      	ldr	r3, [r6, #8]
 8006f56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f5a:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006f5c:	68f3      	ldr	r3, [r6, #12]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8006f64:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8006f66:	f7fd f883 	bl	8004070 <HAL_GetTick>
 8006f6a:	4680      	mov	r8, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	68de      	ldr	r6, [r3, #12]
 8006f70:	f016 0601 	ands.w	r6, r6, #1
 8006f74:	d01f      	beq.n	8006fb6 <HAL_RTC_SetAlarm+0xea>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006f76:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006f78:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006f80:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f82:	22ff      	movs	r2, #255	; 0xff
 8006f84:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hrtc);
 8006f86:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f88:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006f8a:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8006f8c:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_READY;
 8006f8e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8006f90:	e01e      	b.n	8006fd0 <HAL_RTC_SetAlarm+0x104>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f92:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006f96:	bf08      	it	eq
 8006f98:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006f9a:	694b      	ldr	r3, [r1, #20]
 8006f9c:	431d      	orrs	r5, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006f9e:	78cb      	ldrb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006fa0:	ea45 050a 	orr.w	r5, r5, sl
 8006fa4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8006fa8:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8006fac:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
 8006fb0:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
 8006fb4:	e7bf      	b.n	8006f36 <HAL_RTC_SetAlarm+0x6a>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fb6:	f7fd f85b 	bl	8004070 <HAL_GetTick>
 8006fba:	eba0 0008 	sub.w	r0, r0, r8
 8006fbe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006fc2:	d9d3      	bls.n	8006f6c <HAL_RTC_SetAlarm+0xa0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006fc8:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fca:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006fcc:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8006fce:	7726      	strb	r6, [r4, #28]
}
 8006fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fd8:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006fda:	68b3      	ldr	r3, [r6, #8]
 8006fdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fe0:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006fe2:	68f3      	ldr	r3, [r6, #12]
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	f463 7320 	orn	r3, r3, #640	; 0x280
 8006fea:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8006fec:	f7fd f840 	bl	8004070 <HAL_GetTick>
 8006ff0:	4680      	mov	r8, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	68de      	ldr	r6, [r3, #12]
 8006ff6:	f016 0602 	ands.w	r6, r6, #2
 8006ffa:	d005      	beq.n	8007008 <HAL_RTC_SetAlarm+0x13c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006ffc:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006ffe:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007006:	e7bb      	b.n	8006f80 <HAL_RTC_SetAlarm+0xb4>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007008:	f7fd f832 	bl	8004070 <HAL_GetTick>
 800700c:	eba0 0008 	sub.w	r0, r0, r8
 8007010:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007014:	d9ed      	bls.n	8006ff2 <HAL_RTC_SetAlarm+0x126>
 8007016:	e7d5      	b.n	8006fc4 <HAL_RTC_SetAlarm+0xf8>

08007018 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007018:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800701a:	7f03      	ldrb	r3, [r0, #28]
 800701c:	2b01      	cmp	r3, #1
 800701e:	f04f 0302 	mov.w	r3, #2
 8007022:	d027      	beq.n	8007074 <HAL_RTCEx_SetTimeStamp+0x5c>

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007024:	7743      	strb	r3, [r0, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007026:	6803      	ldr	r3, [r0, #0]
 8007028:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800702a:	f024 0406 	bic.w	r4, r4, #6
 800702e:	64dc      	str	r4, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007030:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8007032:	4322      	orrs	r2, r4
 8007034:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800703c:	f022 0208 	bic.w	r2, r2, #8

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8007040:	4311      	orrs	r1, r2

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007042:	22ca      	movs	r2, #202	; 0xca
 8007044:	625a      	str	r2, [r3, #36]	; 0x24
 8007046:	2253      	movs	r2, #83	; 0x53
 8007048:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800704a:	6099      	str	r1, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	f462 6208 	orn	r2, r2, #2176	; 0x880
 8007054:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	b2d2      	uxtb	r2, r2
 800705a:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 800705e:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007060:	689a      	ldr	r2, [r3, #8]
 8007062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007066:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007068:	22ff      	movs	r2, #255	; 0xff
 800706a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800706c:	2301      	movs	r3, #1
 800706e:	7743      	strb	r3, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007070:	2300      	movs	r3, #0
 8007072:	7703      	strb	r3, [r0, #28]
  __HAL_LOCK(hrtc);
 8007074:	4618      	mov	r0, r3

  return HAL_OK;
}
 8007076:	bd10      	pop	{r4, pc}

08007078 <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8007078:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <SAI_Disable.isra.0+0x34>)
 800707a:	f641 3258 	movw	r2, #7000	; 0x1b58
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007084:	6802      	ldr	r2, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8007086:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8007088:	6811      	ldr	r1, [r2, #0]
 800708a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800708e:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007090:	3b01      	subs	r3, #1
 8007092:	d206      	bcs.n	80070a2 <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007094:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8007098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800709c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
      break;
 80070a0:	4770      	bx	lr
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80070a2:	6811      	ldr	r1, [r2, #0]
 80070a4:	03c9      	lsls	r1, r1, #15
 80070a6:	d4f3      	bmi.n	8007090 <SAI_Disable.isra.0+0x18>

  return status;
}
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	20000008 	.word	0x20000008

080070b0 <HAL_SAI_Init>:
{
 80070b0:	b570      	push	{r4, r5, r6, lr}
  if (hsai == NULL)
 80070b2:	4604      	mov	r4, r0
 80070b4:	2800      	cmp	r0, #0
 80070b6:	f000 80c9 	beq.w	800724c <HAL_SAI_Init+0x19c>
  if (hsai->State == HAL_SAI_STATE_RESET)
 80070ba:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 80070be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80070c2:	b91b      	cbnz	r3, 80070cc <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 80070c4:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 80070c8:	f7fb fb6e 	bl	80027a8 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 80070cc:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 80070ce:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 80070d0:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 80070d4:	f7ff ffd0 	bl	8007078 <SAI_Disable.isra.0>
  switch (hsai->Init.SynchroExt)
 80070d8:	68e3      	ldr	r3, [r4, #12]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	f000 80a6 	beq.w	800722c <HAL_SAI_Init+0x17c>
 80070e0:	1e98      	subs	r0, r3, #2
 80070e2:	4243      	negs	r3, r0
 80070e4:	4143      	adcs	r3, r0
 80070e6:	015b      	lsls	r3, r3, #5
  switch (hsai->Init.Synchro)
 80070e8:	68a5      	ldr	r5, [r4, #8]
 80070ea:	2d02      	cmp	r5, #2
 80070ec:	f000 80a2 	beq.w	8007234 <HAL_SAI_Init+0x184>
 80070f0:	2d03      	cmp	r5, #3
 80070f2:	f000 809d 	beq.w	8007230 <HAL_SAI_Init+0x180>
 80070f6:	1e69      	subs	r1, r5, #1
 80070f8:	424d      	negs	r5, r1
 80070fa:	414d      	adcs	r5, r1
 80070fc:	02ad      	lsls	r5, r5, #10
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	4953      	ldr	r1, [pc, #332]	; (8007250 <HAL_SAI_Init+0x1a0>)
 8007102:	4854      	ldr	r0, [pc, #336]	; (8007254 <HAL_SAI_Init+0x1a4>)
 8007104:	428a      	cmp	r2, r1
 8007106:	d003      	beq.n	8007110 <HAL_SAI_Init+0x60>
 8007108:	4e53      	ldr	r6, [pc, #332]	; (8007258 <HAL_SAI_Init+0x1a8>)
 800710a:	42b2      	cmp	r2, r6
 800710c:	f040 8095 	bne.w	800723a <HAL_SAI_Init+0x18a>
    SAI1->GCR = tmpregisterGCR;
 8007110:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007114:	69e3      	ldr	r3, [r4, #28]
 8007116:	b343      	cbz	r3, 800716a <HAL_SAI_Init+0xba>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007118:	428a      	cmp	r2, r1
 800711a:	d003      	beq.n	8007124 <HAL_SAI_Init+0x74>
 800711c:	4b4e      	ldr	r3, [pc, #312]	; (8007258 <HAL_SAI_Init+0x1a8>)
 800711e:	429a      	cmp	r2, r3
 8007120:	f040 808e 	bne.w	8007240 <HAL_SAI_Init+0x190>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007124:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007128:	f7ff fd26 	bl	8006b78 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	4a4b      	ldr	r2, [pc, #300]	; (800725c <HAL_SAI_Init+0x1ac>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d002      	beq.n	800713a <HAL_SAI_Init+0x8a>
 8007134:	3220      	adds	r2, #32
 8007136:	4293      	cmp	r3, r2
 8007138:	d103      	bne.n	8007142 <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800713a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800713e:	f7ff fd1b 	bl	8006b78 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007142:	220a      	movs	r2, #10
 8007144:	69e3      	ldr	r3, [r4, #28]
 8007146:	4350      	muls	r0, r2
 8007148:	025b      	lsls	r3, r3, #9
 800714a:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 800714e:	fbb0 f3f2 	udiv	r3, r0, r2
    if ((tmpval % 10) > 8)
 8007152:	fb02 0013 	mls	r0, r2, r3, r0
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007156:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if ((tmpval % 10) > 8)
 8007158:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1;
 800715a:	bf08      	it	eq
 800715c:	3301      	addeq	r3, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800715e:	2a04      	cmp	r2, #4
      hsai->Init.Mckdiv += 1;
 8007160:	6223      	str	r3, [r4, #32]
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007162:	6a23      	ldr	r3, [r4, #32]
 8007164:	bf04      	itt	eq
 8007166:	085b      	lsreq	r3, r3, #1
 8007168:	6223      	streq	r3, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800716a:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800716c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800716e:	f033 0202 	bics.w	r2, r3, #2
 8007172:	d167      	bne.n	8007244 <HAL_SAI_Init+0x194>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007174:	3901      	subs	r1, #1
 8007176:	bf18      	it	ne
 8007178:	2101      	movne	r1, #1
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800717a:	6822      	ldr	r2, [r4, #0]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800717c:	0249      	lsls	r1, r1, #9
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800717e:	4838      	ldr	r0, [pc, #224]	; (8007260 <HAL_SAI_Init+0x1b0>)
 8007180:	6816      	ldr	r6, [r2, #0]
 8007182:	4030      	ands	r0, r6
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007184:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8007186:	4333      	orrs	r3, r6
 8007188:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800718a:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800718c:	4333      	orrs	r3, r6
 800718e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007190:	6810      	ldr	r0, [r2, #0]
 8007192:	4333      	orrs	r3, r6
 8007194:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007196:	4333      	orrs	r3, r6
 8007198:	6926      	ldr	r6, [r4, #16]
 800719a:	4333      	orrs	r3, r6
 800719c:	6966      	ldr	r6, [r4, #20]
 800719e:	4333      	orrs	r3, r6
 80071a0:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80071a2:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80071a4:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80071a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80071aa:	432b      	orrs	r3, r5
 80071ac:	430b      	orrs	r3, r1
 80071ae:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80071b0:	6853      	ldr	r3, [r2, #4]
 80071b2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80071b6:	f023 030f 	bic.w	r3, r3, #15
 80071ba:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80071bc:	69a3      	ldr	r3, [r4, #24]
 80071be:	6851      	ldr	r1, [r2, #4]
 80071c0:	4303      	orrs	r3, r0
 80071c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80071c4:	4303      	orrs	r3, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80071c6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80071c8:	430b      	orrs	r3, r1
 80071ca:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80071cc:	4b25      	ldr	r3, [pc, #148]	; (8007264 <HAL_SAI_Init+0x1b4>)
 80071ce:	6891      	ldr	r1, [r2, #8]
 80071d0:	400b      	ands	r3, r1
 80071d2:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80071d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80071d6:	6891      	ldr	r1, [r2, #8]
 80071d8:	4303      	orrs	r3, r0
 80071da:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80071dc:	4303      	orrs	r3, r0
 80071de:	430b      	orrs	r3, r1
 80071e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80071e2:	3901      	subs	r1, #1
 80071e4:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80071e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80071e8:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80071ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80071ee:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80071f0:	68d3      	ldr	r3, [r2, #12]
 80071f2:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 80071f6:	f023 030f 	bic.w	r3, r3, #15
 80071fa:	041b      	lsls	r3, r3, #16
 80071fc:	0c1b      	lsrs	r3, r3, #16
 80071fe:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007200:	68d1      	ldr	r1, [r2, #12]
 8007202:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
 8007206:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007208:	2000      	movs	r0, #0
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800720a:	430b      	orrs	r3, r1
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800720c:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800720e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007212:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007214:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007216:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800721a:	60d3      	str	r3, [r2, #12]
  hsai->State = HAL_SAI_STATE_READY;
 800721c:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800721e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8007222:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 8007226:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
 800722a:	bd70      	pop	{r4, r5, r6, pc}
  switch (hsai->Init.SynchroExt)
 800722c:	2310      	movs	r3, #16
 800722e:	e75b      	b.n	80070e8 <HAL_SAI_Init+0x38>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007230:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007234:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8007238:	e761      	b.n	80070fe <HAL_SAI_Init+0x4e>
    SAI2->GCR = tmpregisterGCR;
 800723a:	f8c0 3c00 	str.w	r3, [r0, #3072]	; 0xc00
 800723e:	e769      	b.n	8007114 <HAL_SAI_Init+0x64>
    uint32_t freq = 0;
 8007240:	2000      	movs	r0, #0
 8007242:	e773      	b.n	800712c <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007244:	1e4a      	subs	r2, r1, #1
 8007246:	4251      	negs	r1, r2
 8007248:	4151      	adcs	r1, r2
 800724a:	e796      	b.n	800717a <HAL_SAI_Init+0xca>
    return HAL_ERROR;
 800724c:	2001      	movs	r0, #1
 800724e:	e7ec      	b.n	800722a <HAL_SAI_Init+0x17a>
 8007250:	40015804 	.word	0x40015804
 8007254:	40015000 	.word	0x40015000
 8007258:	40015824 	.word	0x40015824
 800725c:	40015c04 	.word	0x40015c04
 8007260:	ff05c010 	.word	0xff05c010
 8007264:	fff88000 	.word	0xfff88000

08007268 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 8007268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800726a:	4605      	mov	r5, r0
 800726c:	b089      	sub	sp, #36	; 0x24
 800726e:	460e      	mov	r6, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007270:	f7fc fefe 	bl	8004070 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8007274:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8007276:	4607      	mov	r7, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007278:	2108      	movs	r1, #8
 800727a:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 800727c:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007280:	f001 fe58 	bl	8008f34 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007284:	4604      	mov	r4, r0
 8007286:	b9d8      	cbnz	r0, 80072c0 <SD_FindSCR.constprop.0+0x58>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007288:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800728a:	6828      	ldr	r0, [r5, #0]
 800728c:	0409      	lsls	r1, r1, #16
 800728e:	f001 ff02 	bl	8009096 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007292:	4604      	mov	r4, r0
 8007294:	b9a0      	cbnz	r0, 80072c0 <SD_FindSCR.constprop.0+0x58>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 8007296:	f04f 32ff 	mov.w	r2, #4294967295
 800729a:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800729c:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800729e:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80072a0:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 80072a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80072a6:	2302      	movs	r3, #2
 80072a8:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80072ac:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80072ae:	a902      	add	r1, sp, #8
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80072b0:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80072b2:	f001 fd76 	bl	8008da2 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80072b6:	6828      	ldr	r0, [r5, #0]
 80072b8:	f001 ff1f 	bl	80090fa <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80072bc:	4604      	mov	r4, r0
 80072be:	b190      	cbz	r0, 80072e6 <SD_FindSCR.constprop.0+0x7e>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80072c0:	4620      	mov	r0, r4
 80072c2:	b009      	add	sp, #36	; 0x24
 80072c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80072c6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80072c8:	0293      	lsls	r3, r2, #10
 80072ca:	d512      	bpl.n	80072f2 <SD_FindSCR.constprop.0+0x8a>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80072cc:	f001 fd43 	bl	8008d56 <SDMMC_ReadFIFO>
 80072d0:	ab08      	add	r3, sp, #32
 80072d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      index++;
 80072d6:	3401      	adds	r4, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80072d8:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80072dc:	f7fc fec8 	bl	8004070 <HAL_GetTick>
 80072e0:	1bc0      	subs	r0, r0, r7
 80072e2:	3001      	adds	r0, #1
 80072e4:	d023      	beq.n	800732e <SD_FindSCR.constprop.0+0xc6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80072e6:	6828      	ldr	r0, [r5, #0]
 80072e8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80072ea:	f012 0f2a 	tst.w	r2, #42	; 0x2a
 80072ee:	d0ea      	beq.n	80072c6 <SD_FindSCR.constprop.0+0x5e>
 80072f0:	e002      	b.n	80072f8 <SD_FindSCR.constprop.0+0x90>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80072f2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80072f4:	0491      	lsls	r1, r2, #18
 80072f6:	d4f1      	bmi.n	80072dc <SD_FindSCR.constprop.0+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80072f8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80072fa:	0712      	lsls	r2, r2, #28
 80072fc:	d502      	bpl.n	8007304 <SD_FindSCR.constprop.0+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80072fe:	2408      	movs	r4, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007300:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8007302:	e7dd      	b.n	80072c0 <SD_FindSCR.constprop.0+0x58>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007304:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007306:	0793      	lsls	r3, r2, #30
 8007308:	d501      	bpl.n	800730e <SD_FindSCR.constprop.0+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800730a:	2402      	movs	r4, #2
 800730c:	e7f8      	b.n	8007300 <SD_FindSCR.constprop.0+0x98>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800730e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007310:	f014 0420 	ands.w	r4, r4, #32
 8007314:	d001      	beq.n	800731a <SD_FindSCR.constprop.0+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007316:	2420      	movs	r4, #32
 8007318:	e7f2      	b.n	8007300 <SD_FindSCR.constprop.0+0x98>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800731a:	9b01      	ldr	r3, [sp, #4]
 800731c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007320:	ba1b      	rev	r3, r3
 8007322:	6382      	str	r2, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007324:	6033      	str	r3, [r6, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007326:	9b00      	ldr	r3, [sp, #0]
 8007328:	ba1b      	rev	r3, r3
 800732a:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 800732c:	e7c8      	b.n	80072c0 <SD_FindSCR.constprop.0+0x58>
      return HAL_SD_ERROR_TIMEOUT;
 800732e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007332:	e7c5      	b.n	80072c0 <SD_FindSCR.constprop.0+0x58>

08007334 <HAL_SD_ReadBlocks>:
{
 8007334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007338:	460d      	mov	r5, r1
 800733a:	b087      	sub	sp, #28
 800733c:	4604      	mov	r4, r0
 800733e:	4616      	mov	r6, r2
 8007340:	469a      	mov	sl, r3
  uint32_t tickstart = HAL_GetTick();
 8007342:	f7fc fe95 	bl	8004070 <HAL_GetTick>
 8007346:	4680      	mov	r8, r0
  if(NULL == pData)
 8007348:	b92d      	cbnz	r5, 8007356 <HAL_SD_ReadBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800734a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800734c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_ERROR;
 8007350:	2701      	movs	r7, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007352:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8007354:	e010      	b.n	8007378 <HAL_SD_ReadBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 8007356:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800735a:	2b01      	cmp	r3, #1
 800735c:	b2df      	uxtb	r7, r3
 800735e:	f040 80df 	bne.w	8007520 <HAL_SD_ReadBlocks+0x1ec>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007362:	eb06 030a 	add.w	r3, r6, sl
 8007366:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007368:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800736a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800736c:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800736e:	d907      	bls.n	8007380 <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007370:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007372:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007376:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8007378:	4638      	mov	r0, r7
 800737a:	b007      	add	sp, #28
 800737c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8007380:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8007382:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007384:	2200      	movs	r2, #0
 8007386:	f04f 0b01 	mov.w	fp, #1
    hsd->State = HAL_SD_STATE_BUSY;
 800738a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800738e:	f04f 0902 	mov.w	r9, #2
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007392:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8007394:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007396:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007398:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800739a:	f04f 33ff 	mov.w	r3, #4294967295
 800739e:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80073a0:	ea4f 234a 	mov.w	r3, sl, lsl #9
      add *= 512U;
 80073a4:	bf18      	it	ne
 80073a6:	0276      	lslne	r6, r6, #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80073a8:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80073aa:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80073ac:	e9cd 2b04 	strd	r2, fp, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80073b0:	e9cd 3902 	strd	r3, r9, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80073b4:	f001 fcf5 	bl	8008da2 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 80073b8:	45da      	cmp	sl, fp
 80073ba:	d912      	bls.n	80073e2 <HAL_SD_ReadBlocks+0xae>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80073bc:	4631      	mov	r1, r6
 80073be:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80073c0:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80073c4:	f001 fde8 	bl	8008f98 <SDMMC_CmdReadMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073c8:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073ca:	b188      	cbz	r0, 80073f0 <HAL_SD_ReadBlocks+0xbc>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073cc:	4a56      	ldr	r2, [pc, #344]	; (8007528 <HAL_SD_ReadBlocks+0x1f4>)
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80073d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80073d2:	4303      	orrs	r3, r0
 80073d4:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80073d6:	2301      	movs	r3, #1
 80073d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80073dc:	2300      	movs	r3, #0
 80073de:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 80073e0:	e7ca      	b.n	8007378 <HAL_SD_ReadBlocks+0x44>
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80073e2:	4631      	mov	r1, r6
 80073e4:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80073e6:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80073ea:	f001 fdbc 	bl	8008f66 <SDMMC_CmdReadSingleBlock>
 80073ee:	e7eb      	b.n	80073c8 <HAL_SD_ReadBlocks+0x94>
    dataremaining = config.DataLength;
 80073f0:	9e01      	ldr	r6, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80073f2:	6820      	ldr	r0, [r4, #0]
 80073f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80073f6:	f413 7f95 	tst.w	r3, #298	; 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80073fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80073fc:	d00c      	beq.n	8007418 <HAL_SD_ReadBlocks+0xe4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80073fe:	05db      	lsls	r3, r3, #23
 8007400:	d53a      	bpl.n	8007478 <HAL_SD_ReadBlocks+0x144>
 8007402:	f1ba 0f01 	cmp.w	sl, #1
 8007406:	d937      	bls.n	8007478 <HAL_SD_ReadBlocks+0x144>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007408:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800740a:	2b03      	cmp	r3, #3
 800740c:	d034      	beq.n	8007478 <HAL_SD_ReadBlocks+0x144>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800740e:	f001 fe0f 	bl	8009030 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8007412:	b388      	cbz	r0, 8007478 <HAL_SD_ReadBlocks+0x144>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	e7d9      	b.n	80073cc <HAL_SD_ReadBlocks+0x98>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007418:	041a      	lsls	r2, r3, #16
 800741a:	d518      	bpl.n	800744e <HAL_SD_ReadBlocks+0x11a>
 800741c:	b1be      	cbz	r6, 800744e <HAL_SD_ReadBlocks+0x11a>
 800741e:	f105 0b04 	add.w	fp, r5, #4
 8007422:	f105 0924 	add.w	r9, r5, #36	; 0x24
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007426:	6820      	ldr	r0, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8007428:	f10b 0b04 	add.w	fp, fp, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 800742c:	f001 fc93 	bl	8008d56 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007430:	f80b 0c08 	strb.w	r0, [fp, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007434:	0a02      	lsrs	r2, r0, #8
 8007436:	f80b 2c07 	strb.w	r2, [fp, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800743a:	0c02      	lsrs	r2, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800743c:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800743e:	f80b 2c06 	strb.w	r2, [fp, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007442:	f80b 0c05 	strb.w	r0, [fp, #-5]
        for(count = 0U; count < 8U; count++)
 8007446:	45d9      	cmp	r9, fp
 8007448:	d1ed      	bne.n	8007426 <HAL_SD_ReadBlocks+0xf2>
          tempbuff++;
 800744a:	3520      	adds	r5, #32
          dataremaining--;
 800744c:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800744e:	f7fc fe0f 	bl	8004070 <HAL_GetTick>
 8007452:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007454:	eba0 0008 	sub.w	r0, r0, r8
 8007458:	4298      	cmp	r0, r3
 800745a:	d3ca      	bcc.n	80073f2 <HAL_SD_ReadBlocks+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800745c:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 800745e:	2703      	movs	r7, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007460:	4a31      	ldr	r2, [pc, #196]	; (8007528 <HAL_SD_ReadBlocks+0x1f4>)
 8007462:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007464:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007466:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800746a:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800746c:	2301      	movs	r3, #1
 800746e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007472:	2300      	movs	r3, #0
 8007474:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8007476:	e77f      	b.n	8007378 <HAL_SD_ReadBlocks+0x44>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800747c:	f011 0108 	ands.w	r1, r1, #8
 8007480:	d005      	beq.n	800748e <HAL_SD_ReadBlocks+0x15a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007482:	4a29      	ldr	r2, [pc, #164]	; (8007528 <HAL_SD_ReadBlocks+0x1f4>)
 8007484:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007486:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007488:	f043 0308 	orr.w	r3, r3, #8
 800748c:	e7a2      	b.n	80073d4 <HAL_SD_ReadBlocks+0xa0>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800748e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007490:	f012 0202 	ands.w	r2, r2, #2
 8007494:	d00a      	beq.n	80074ac <HAL_SD_ReadBlocks+0x178>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007496:	4a24      	ldr	r2, [pc, #144]	; (8007528 <HAL_SD_ReadBlocks+0x1f4>)
 8007498:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800749a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800749c:	f043 0302 	orr.w	r3, r3, #2
 80074a0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80074a2:	2301      	movs	r3, #1
 80074a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074a8:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 80074aa:	e765      	b.n	8007378 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80074ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80074ae:	0689      	lsls	r1, r1, #26
 80074b0:	d527      	bpl.n	8007502 <HAL_SD_ReadBlocks+0x1ce>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074b2:	491d      	ldr	r1, [pc, #116]	; (8007528 <HAL_SD_ReadBlocks+0x1f4>)
 80074b4:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80074b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80074b8:	f043 0320 	orr.w	r3, r3, #32
 80074bc:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80074be:	2301      	movs	r3, #1
 80074c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074c4:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 80074c6:	e757      	b.n	8007378 <HAL_SD_ReadBlocks+0x44>
      data = SDMMC_ReadFIFO(hsd->Instance);
 80074c8:	f001 fc45 	bl	8008d56 <SDMMC_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 80074cc:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80074d0:	0a03      	lsrs	r3, r0, #8
      dataremaining--;
 80074d2:	3e04      	subs	r6, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80074d4:	3504      	adds	r5, #4
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80074d6:	f805 3c07 	strb.w	r3, [r5, #-7]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80074da:	0c03      	lsrs	r3, r0, #16
 80074dc:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80074e0:	0e03      	lsrs	r3, r0, #24
 80074e2:	f805 3c05 	strb.w	r3, [r5, #-5]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80074e6:	f7fc fdc3 	bl	8004070 <HAL_GetTick>
 80074ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074ec:	eba0 0008 	sub.w	r0, r0, r8
 80074f0:	4298      	cmp	r0, r3
 80074f2:	d307      	bcc.n	8007504 <HAL_SD_ReadBlocks+0x1d0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	4a0c      	ldr	r2, [pc, #48]	; (8007528 <HAL_SD_ReadBlocks+0x1f4>)
 80074f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80074fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80074fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007500:	e768      	b.n	80073d4 <HAL_SD_ReadBlocks+0xa0>
 8007502:	3504      	adds	r5, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007508:	029b      	lsls	r3, r3, #10
 800750a:	d501      	bpl.n	8007510 <HAL_SD_ReadBlocks+0x1dc>
 800750c:	2e00      	cmp	r6, #0
 800750e:	d1db      	bne.n	80074c8 <HAL_SD_ReadBlocks+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007510:	f240 533a 	movw	r3, #1338	; 0x53a
    return HAL_OK;
 8007514:	2700      	movs	r7, #0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007516:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007518:	2301      	movs	r3, #1
 800751a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800751e:	e72b      	b.n	8007378 <HAL_SD_ReadBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007520:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007526:	e713      	b.n	8007350 <HAL_SD_ReadBlocks+0x1c>
 8007528:	004005ff 	.word	0x004005ff

0800752c <HAL_SD_WriteBlocks>:
{
 800752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007530:	460d      	mov	r5, r1
 8007532:	b089      	sub	sp, #36	; 0x24
 8007534:	4604      	mov	r4, r0
 8007536:	4692      	mov	sl, r2
 8007538:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800753a:	f7fc fd99 	bl	8004070 <HAL_GetTick>
 800753e:	4681      	mov	r9, r0
  if(NULL == pData)
 8007540:	b935      	cbnz	r5, 8007550 <HAL_SD_WriteBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007542:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007544:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_ERROR;
 8007548:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800754c:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800754e:	e011      	b.n	8007574 <HAL_SD_WriteBlocks+0x48>
  if(hsd->State == HAL_SD_STATE_READY)
 8007550:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8007554:	2b01      	cmp	r3, #1
 8007556:	fa5f f883 	uxtb.w	r8, r3
 800755a:	f040 80ac 	bne.w	80076b6 <HAL_SD_WriteBlocks+0x18a>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800755e:	eb0a 0307 	add.w	r3, sl, r7
 8007562:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007564:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007566:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007568:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800756a:	d907      	bls.n	800757c <HAL_SD_WriteBlocks+0x50>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800756c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800756e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007572:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8007574:	4640      	mov	r0, r8
 8007576:	b009      	add	sp, #36	; 0x24
 8007578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 800757c:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 800757e:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8007580:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007584:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8007586:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007588:	2190      	movs	r1, #144	; 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800758a:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800758c:	f04f 33ff 	mov.w	r3, #4294967295
 8007590:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007592:	ea4f 2347 	mov.w	r3, r7, lsl #9
      add *= 512U;
 8007596:	bf18      	it	ne
 8007598:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800759c:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800759e:	2300      	movs	r3, #0
 80075a0:	e9cd 1304 	strd	r1, r3, [sp, #16]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80075a4:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80075a6:	2301      	movs	r3, #1
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80075a8:	a902      	add	r1, sp, #8
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80075aa:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80075ac:	f001 fbf9 	bl	8008da2 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 80075b0:	2f01      	cmp	r7, #1
 80075b2:	d912      	bls.n	80075da <HAL_SD_WriteBlocks+0xae>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80075b4:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80075b6:	4651      	mov	r1, sl
 80075b8:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80075ba:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80075bc:	f001 fd1e 	bl	8008ffc <SDMMC_CmdWriteMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075c0:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075c2:	b188      	cbz	r0, 80075e8 <HAL_SD_WriteBlocks+0xbc>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075c4:	4a3e      	ldr	r2, [pc, #248]	; (80076c0 <HAL_SD_WriteBlocks+0x194>)
 80075c6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80075c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80075ca:	4303      	orrs	r3, r0
 80075cc:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80075ce:	2301      	movs	r3, #1
 80075d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80075d4:	2300      	movs	r3, #0
 80075d6:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 80075d8:	e7cc      	b.n	8007574 <HAL_SD_WriteBlocks+0x48>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80075da:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80075dc:	4651      	mov	r1, sl
 80075de:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80075e0:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80075e2:	f001 fcf2 	bl	8008fca <SDMMC_CmdWriteSingleBlock>
 80075e6:	e7eb      	b.n	80075c0 <HAL_SD_WriteBlocks+0x94>
    dataremaining = config.DataLength;
 80075e8:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80075ea:	6820      	ldr	r0, [r4, #0]
 80075ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80075ee:	f413 7f8d 	tst.w	r3, #282	; 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80075f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80075f4:	d00b      	beq.n	800760e <HAL_SD_WriteBlocks+0xe2>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80075f6:	05db      	lsls	r3, r3, #23
 80075f8:	d52c      	bpl.n	8007654 <HAL_SD_WriteBlocks+0x128>
 80075fa:	2f01      	cmp	r7, #1
 80075fc:	d92a      	bls.n	8007654 <HAL_SD_WriteBlocks+0x128>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80075fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007600:	2b03      	cmp	r3, #3
 8007602:	d027      	beq.n	8007654 <HAL_SD_WriteBlocks+0x128>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007604:	f001 fd14 	bl	8009030 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8007608:	b320      	cbz	r0, 8007654 <HAL_SD_WriteBlocks+0x128>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	e7da      	b.n	80075c4 <HAL_SD_WriteBlocks+0x98>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800760e:	045a      	lsls	r2, r3, #17
 8007610:	d50c      	bpl.n	800762c <HAL_SD_WriteBlocks+0x100>
 8007612:	b15e      	cbz	r6, 800762c <HAL_SD_WriteBlocks+0x100>
 8007614:	f105 0b20 	add.w	fp, r5, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007618:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800761c:	a901      	add	r1, sp, #4
 800761e:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007620:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007622:	f001 fb9b 	bl	8008d5c <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007626:	45ab      	cmp	fp, r5
 8007628:	d1f6      	bne.n	8007618 <HAL_SD_WriteBlocks+0xec>
          dataremaining--;
 800762a:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800762c:	f7fc fd20 	bl	8004070 <HAL_GetTick>
 8007630:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007632:	eba0 0009 	sub.w	r0, r0, r9
 8007636:	4298      	cmp	r0, r3
 8007638:	d3d7      	bcc.n	80075ea <HAL_SD_WriteBlocks+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800763a:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 800763c:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007640:	4a1f      	ldr	r2, [pc, #124]	; (80076c0 <HAL_SD_WriteBlocks+0x194>)
 8007642:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007644:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007646:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007648:	2301      	movs	r3, #1
 800764a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800764e:	2300      	movs	r3, #0
 8007650:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8007652:	e78f      	b.n	8007574 <HAL_SD_WriteBlocks+0x48>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007658:	f010 0008 	ands.w	r0, r0, #8
 800765c:	d005      	beq.n	800766a <HAL_SD_WriteBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800765e:	4a18      	ldr	r2, [pc, #96]	; (80076c0 <HAL_SD_WriteBlocks+0x194>)
 8007660:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007662:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007664:	f043 0308 	orr.w	r3, r3, #8
 8007668:	e7b0      	b.n	80075cc <HAL_SD_WriteBlocks+0xa0>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800766a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800766c:	f011 0102 	ands.w	r1, r1, #2
 8007670:	d00a      	beq.n	8007688 <HAL_SD_WriteBlocks+0x15c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007672:	4a13      	ldr	r2, [pc, #76]	; (80076c0 <HAL_SD_WriteBlocks+0x194>)
 8007674:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007676:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007678:	f043 0302 	orr.w	r3, r3, #2
 800767c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800767e:	2301      	movs	r3, #1
 8007680:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007684:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 8007686:	e775      	b.n	8007574 <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800768a:	f012 0210 	ands.w	r2, r2, #16
 800768e:	d00a      	beq.n	80076a6 <HAL_SD_WriteBlocks+0x17a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007690:	4a0b      	ldr	r2, [pc, #44]	; (80076c0 <HAL_SD_WriteBlocks+0x194>)
 8007692:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007694:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007696:	f043 0310 	orr.w	r3, r3, #16
 800769a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800769c:	2301      	movs	r3, #1
 800769e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076a2:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 80076a4:	e766      	b.n	8007574 <HAL_SD_WriteBlocks+0x48>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80076a6:	f240 513a 	movw	r1, #1338	; 0x53a
    return HAL_OK;
 80076aa:	4690      	mov	r8, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80076ac:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80076ae:	2301      	movs	r3, #1
 80076b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80076b4:	e75e      	b.n	8007574 <HAL_SD_WriteBlocks+0x48>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80076b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80076b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076bc:	e744      	b.n	8007548 <HAL_SD_WriteBlocks+0x1c>
 80076be:	bf00      	nop
 80076c0:	004005ff 	.word	0x004005ff

080076c4 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80076c4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80076c6:	0f9a      	lsrs	r2, r3, #30
 80076c8:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80076ca:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80076ce:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80076d0:	f3c3 6201 	ubfx	r2, r3, #24, #2
 80076d4:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80076d6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80076da:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80076dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80076e0:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80076e2:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80076e4:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80076e6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80076e8:	0d1a      	lsrs	r2, r3, #20
 80076ea:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80076ec:	f3c3 4203 	ubfx	r2, r3, #16, #4
 80076f0:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80076f2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80076f6:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80076f8:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80076fc:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80076fe:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8007702:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007704:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8007708:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800770a:	2200      	movs	r2, #0
 800770c:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800770e:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8007710:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007712:	2a00      	cmp	r2, #0
 8007714:	d16b      	bne.n	80077ee <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007716:	f640 74fc 	movw	r4, #4092	; 0xffc
 800771a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800771c:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8007720:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8007724:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007726:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800772a:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800772c:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8007730:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007732:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8007736:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007738:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800773c:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007740:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007742:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007744:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007746:	7e0b      	ldrb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007748:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800774a:	f003 0307 	and.w	r3, r3, #7
 800774e:	3302      	adds	r3, #2
 8007750:	409a      	lsls	r2, r3
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007752:	2301      	movs	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007754:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007756:	7a0c      	ldrb	r4, [r1, #8]
 8007758:	f004 040f 	and.w	r4, r4, #15
 800775c:	40a3      	lsls	r3, r4
 800775e:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007760:	0a5b      	lsrs	r3, r3, #9
 8007762:	4353      	muls	r3, r2
 8007764:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800776a:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800776c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800776e:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8007772:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007774:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800777c:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800777e:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007780:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->Reserved3 = 0;
 8007782:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007784:	0fda      	lsrs	r2, r3, #31
 8007786:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007788:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800778c:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800778e:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8007792:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007794:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8007798:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800779a:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800779e:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80077a2:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 80077a6:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80077aa:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80077ae:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80077b2:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80077b6:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80077ba:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80077be:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80077c2:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80077c6:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80077ca:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80077ce:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80077d2:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80077d6:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80077da:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80077de:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80077e2:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80077e6:	2301      	movs	r3, #1
 80077e8:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
  return HAL_OK;
 80077ec:	e01c      	b.n	8007828 <HAL_SD_GetCardCSD+0x164>
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80077ee:	2a01      	cmp	r2, #1
 80077f0:	d10f      	bne.n	8007812 <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80077f2:	041b      	lsls	r3, r3, #16
 80077f4:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 80077f8:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80077fc:	4313      	orrs	r3, r2
 80077fe:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007800:	690b      	ldr	r3, [r1, #16]
 8007802:	3301      	adds	r3, #1
 8007804:	029b      	lsls	r3, r3, #10
 8007806:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007808:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800780a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800780e:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007810:	e7a9      	b.n	8007766 <HAL_SD_GetCardCSD+0xa2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007812:	6803      	ldr	r3, [r0, #0]
 8007814:	4a05      	ldr	r2, [pc, #20]	; (800782c <HAL_SD_GetCardCSD+0x168>)
 8007816:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007818:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800781a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800781e:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007820:	2301      	movs	r3, #1
 8007822:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8007826:	4618      	mov	r0, r3
}
 8007828:	bd10      	pop	{r4, pc}
 800782a:	bf00      	nop
 800782c:	004005ff 	.word	0x004005ff

08007830 <HAL_SD_InitCard>:
{
 8007830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007834:	2300      	movs	r3, #0
{
 8007836:	b098      	sub	sp, #96	; 0x60
 8007838:	4604      	mov	r4, r0
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800783a:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800783c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007840:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007844:	2376      	movs	r3, #118	; 0x76
 8007846:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDMMC_Init(hsd->Instance, Init);
 8007848:	ab0a      	add	r3, sp, #40	; 0x28
 800784a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800784e:	ab07      	add	r3, sp, #28
 8007850:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007854:	6820      	ldr	r0, [r4, #0]
 8007856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007858:	f001 fa61 	bl	8008d1e <SDMMC_Init>
  if(status != HAL_OK)
 800785c:	4605      	mov	r5, r0
 800785e:	2800      	cmp	r0, #0
 8007860:	f040 80e3 	bne.w	8007a2a <HAL_SD_InitCard+0x1fa>
  __HAL_SD_DISABLE(hsd);
 8007864:	6820      	ldr	r0, [r4, #0]
 8007866:	6843      	ldr	r3, [r0, #4]
 8007868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800786c:	6043      	str	r3, [r0, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800786e:	f001 fa7a 	bl	8008d66 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8007872:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 8007874:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8007876:	6853      	ldr	r3, [r2, #4]
 8007878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800787c:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 800787e:	f7fc fbfd 	bl	800407c <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007882:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8007884:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007886:	f001 fa9f 	bl	8008dc8 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800788a:	4605      	mov	r5, r0
 800788c:	b940      	cbnz	r0, 80078a0 <HAL_SD_InitCard+0x70>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800788e:	6820      	ldr	r0, [r4, #0]
 8007890:	f001 fd7c 	bl	800938c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007894:	b170      	cbz	r0, 80078b4 <HAL_SD_InitCard+0x84>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007896:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007898:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800789a:	f001 fa95 	bl	8008dc8 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800789e:	b198      	cbz	r0, 80078c8 <HAL_SD_InitCard+0x98>
    hsd->State = HAL_SD_STATE_READY;
 80078a0:	2501      	movs	r5, #1
 80078a2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80078a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80078a8:	4303      	orrs	r3, r0
 80078aa:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80078ac:	4628      	mov	r0, r5
 80078ae:	b018      	add	sp, #96	; 0x60
 80078b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V2_X;
 80078b4:	2301      	movs	r3, #1
 80078b6:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80078b8:	2100      	movs	r1, #0
 80078ba:	6820      	ldr	r0, [r4, #0]
 80078bc:	f001 fbeb 	bl	8009096 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80078c0:	b128      	cbz	r0, 80078ce <HAL_SD_InitCard+0x9e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80078c6:	e7eb      	b.n	80078a0 <HAL_SD_InitCard+0x70>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80078c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d0f4      	beq.n	80078b8 <HAL_SD_InitCard+0x88>
{
 80078ce:	2600      	movs	r6, #0
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80078d0:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80078d4:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8007a34 <HAL_SD_InitCard+0x204>
 80078d8:	e014      	b.n	8007904 <HAL_SD_InitCard+0xd4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80078da:	4631      	mov	r1, r6
 80078dc:	6820      	ldr	r0, [r4, #0]
 80078de:	f001 fbda 	bl	8009096 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d1dc      	bne.n	80078a0 <HAL_SD_InitCard+0x70>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80078e6:	4641      	mov	r1, r8
 80078e8:	6820      	ldr	r0, [r4, #0]
 80078ea:	f001 fcad 	bl	8009248 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80078ee:	2800      	cmp	r0, #0
 80078f0:	d1e7      	bne.n	80078c2 <HAL_SD_InitCard+0x92>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80078f2:	4631      	mov	r1, r6
 80078f4:	6820      	ldr	r0, [r4, #0]
 80078f6:	f001 fa51 	bl	8008d9c <SDMMC_GetResponse>
    count++;
 80078fa:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80078fc:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80078fe:	0fc6      	lsrs	r6, r0, #31
    count++;
 8007900:	3301      	adds	r3, #1
 8007902:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007904:	9b06      	ldr	r3, [sp, #24]
 8007906:	42bb      	cmp	r3, r7
 8007908:	d801      	bhi.n	800790e <HAL_SD_InitCard+0xde>
 800790a:	2e00      	cmp	r6, #0
 800790c:	d0e5      	beq.n	80078da <HAL_SD_InitCard+0xaa>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800790e:	9b06      	ldr	r3, [sp, #24]
 8007910:	42bb      	cmp	r3, r7
 8007912:	d80c      	bhi.n	800792e <HAL_SD_InitCard+0xfe>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007914:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 8007918:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800791a:	6820      	ldr	r0, [r4, #0]
 800791c:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 800791e:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007922:	f001 fa24 	bl	8008d6e <SDMMC_GetPowerState>
 8007926:	b928      	cbnz	r0, 8007934 <HAL_SD_InitCard+0x104>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007928:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800792c:	e7b8      	b.n	80078a0 <HAL_SD_InitCard+0x70>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800792e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8007932:	e7b5      	b.n	80078a0 <HAL_SD_InitCard+0x70>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007934:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007936:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007938:	2b03      	cmp	r3, #3
 800793a:	d042      	beq.n	80079c2 <HAL_SD_InitCard+0x192>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800793c:	f001 fc36 	bl	80091ac <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007940:	2800      	cmp	r0, #0
 8007942:	d1ad      	bne.n	80078a0 <HAL_SD_InitCard+0x70>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007944:	4601      	mov	r1, r0
 8007946:	6820      	ldr	r0, [r4, #0]
 8007948:	f001 fa28 	bl	8008d9c <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800794c:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800794e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007950:	6820      	ldr	r0, [r4, #0]
 8007952:	f001 fa23 	bl	8008d9c <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007956:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007958:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800795a:	6820      	ldr	r0, [r4, #0]
 800795c:	f001 fa1e 	bl	8008d9c <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007960:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007962:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007964:	6820      	ldr	r0, [r4, #0]
 8007966:	f001 fa19 	bl	8008d9c <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800796a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800796c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007970:	2b03      	cmp	r3, #3
 8007972:	d026      	beq.n	80079c2 <HAL_SD_InitCard+0x192>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007974:	f10d 0116 	add.w	r1, sp, #22
 8007978:	6820      	ldr	r0, [r4, #0]
 800797a:	f001 fcc1 	bl	8009300 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800797e:	2800      	cmp	r0, #0
 8007980:	d18e      	bne.n	80078a0 <HAL_SD_InitCard+0x70>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007982:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007984:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007986:	2b03      	cmp	r3, #3
 8007988:	d01b      	beq.n	80079c2 <HAL_SD_InitCard+0x192>
    hsd->SdCard.RelCardAdd = sd_rca;
 800798a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800798e:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007990:	0409      	lsls	r1, r1, #16
 8007992:	f001 fc21 	bl	80091d8 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007996:	2800      	cmp	r0, #0
 8007998:	d182      	bne.n	80078a0 <HAL_SD_InitCard+0x70>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800799a:	4601      	mov	r1, r0
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	f001 f9fd 	bl	8008d9c <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80079a2:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80079a4:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80079a6:	6820      	ldr	r0, [r4, #0]
 80079a8:	f001 f9f8 	bl	8008d9c <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80079ac:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80079ae:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80079b0:	6820      	ldr	r0, [r4, #0]
 80079b2:	f001 f9f3 	bl	8008d9c <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80079b6:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80079b8:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80079ba:	6820      	ldr	r0, [r4, #0]
 80079bc:	f001 f9ee 	bl	8008d9c <SDMMC_GetResponse>
 80079c0:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80079c2:	2104      	movs	r1, #4
 80079c4:	6820      	ldr	r0, [r4, #0]
 80079c6:	f001 f9e9 	bl	8008d9c <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80079ca:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80079cc:	0d00      	lsrs	r0, r0, #20
 80079ce:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80079d0:	4620      	mov	r0, r4
 80079d2:	f7ff fe77 	bl	80076c4 <HAL_SD_GetCardCSD>
 80079d6:	4605      	mov	r5, r0
 80079d8:	2800      	cmp	r0, #0
 80079da:	f47f af72 	bne.w	80078c2 <HAL_SD_InitCard+0x92>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80079de:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80079e0:	4603      	mov	r3, r0
 80079e2:	6820      	ldr	r0, [r4, #0]
 80079e4:	0412      	lsls	r2, r2, #16
 80079e6:	f001 fb3d 	bl	8009064 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80079ea:	2800      	cmp	r0, #0
 80079ec:	f47f af58 	bne.w	80078a0 <HAL_SD_InitCard+0x70>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80079f0:	f104 0310 	add.w	r3, r4, #16
 80079f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079f8:	1d23      	adds	r3, r4, #4
 80079fa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80079fe:	6820      	ldr	r0, [r4, #0]
 8007a00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a02:	f001 f98c 	bl	8008d1e <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a0a:	6820      	ldr	r0, [r4, #0]
 8007a0c:	f001 fa92 	bl	8008f34 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a10:	2800      	cmp	r0, #0
 8007a12:	f43f af4b 	beq.w	80078ac <HAL_SD_InitCard+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a16:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8007a18:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a1a:	4a05      	ldr	r2, [pc, #20]	; (8007a30 <HAL_SD_InitCard+0x200>)
 8007a1c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007a1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a20:	4318      	orrs	r0, r3
 8007a22:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a24:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 8007a28:	e740      	b.n	80078ac <HAL_SD_InitCard+0x7c>
    return HAL_ERROR;
 8007a2a:	2501      	movs	r5, #1
 8007a2c:	e73e      	b.n	80078ac <HAL_SD_InitCard+0x7c>
 8007a2e:	bf00      	nop
 8007a30:	004005ff 	.word	0x004005ff
 8007a34:	c1100000 	.word	0xc1100000

08007a38 <HAL_SD_Init>:
{
 8007a38:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	b908      	cbnz	r0, 8007a42 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8007a3e:	2001      	movs	r0, #1
}
 8007a40:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8007a42:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8007a46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007a4a:	b913      	cbnz	r3, 8007a52 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8007a4c:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8007a4e:	f7fa fbdb 	bl	8002208 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8007a52:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007a54:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8007a56:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007a5a:	f7ff fee9 	bl	8007830 <HAL_SD_InitCard>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d1ed      	bne.n	8007a3e <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8007a62:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a64:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8007a66:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8007a68:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8007a6c:	e7e8      	b.n	8007a40 <HAL_SD_Init+0x8>

08007a6e <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007a6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007a70:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007a72:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007a74:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007a76:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007a78:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007a7a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007a7c:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007a7e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007a80:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007a82:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007a84:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007a86:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8007a88:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007a8a:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 8007a8c:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007a8e:	61cb      	str	r3, [r1, #28]
}
 8007a90:	4770      	bx	lr
	...

08007a94 <HAL_SD_ConfigWideBusOperation>:
{
 8007a94:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8007a96:	2303      	movs	r3, #3
{
 8007a98:	4604      	mov	r4, r0
 8007a9a:	b08b      	sub	sp, #44	; 0x2c
 8007a9c:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8007a9e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007aa2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007aa4:	6800      	ldr	r0, [r0, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d002      	beq.n	8007ab0 <HAL_SD_ConfigWideBusOperation+0x1c>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007aaa:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007aae:	d103      	bne.n	8007ab8 <HAL_SD_ConfigWideBusOperation+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ab0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ab6:	e01d      	b.n	8007af4 <HAL_SD_ConfigWideBusOperation+0x60>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007ab8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8007abc:	d137      	bne.n	8007b2e <HAL_SD_ConfigWideBusOperation+0x9a>
  uint32_t scr[2U] = {0U, 0U};
 8007abe:	2100      	movs	r1, #0
 8007ac0:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ac4:	f001 f96a 	bl	8008d9c <SDMMC_GetResponse>
 8007ac8:	0180      	lsls	r0, r0, #6
 8007aca:	d449      	bmi.n	8007b60 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8007acc:	a904      	add	r1, sp, #16
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f7ff fbca 	bl	8007268 <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ad4:	b960      	cbnz	r0, 8007af0 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007ad6:	9b05      	ldr	r3, [sp, #20]
 8007ad8:	0359      	lsls	r1, r3, #13
 8007ada:	d544      	bpl.n	8007b66 <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007adc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007ade:	6820      	ldr	r0, [r4, #0]
 8007ae0:	0409      	lsls	r1, r1, #16
 8007ae2:	f001 fad8 	bl	8009096 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ae6:	b918      	cbnz	r0, 8007af0 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007ae8:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007aea:	6820      	ldr	r0, [r4, #0]
 8007aec:	f001 faec 	bl	80090c8 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8007af0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007af2:	4303      	orrs	r3, r0
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007af4:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007af6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007af8:	6827      	ldr	r7, [r4, #0]
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007afa:	2e00      	cmp	r6, #0
 8007afc:	d03a      	beq.n	8007b74 <HAL_SD_ConfigWideBusOperation+0xe0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007afe:	4b29      	ldr	r3, [pc, #164]	; (8007ba4 <HAL_SD_ConfigWideBusOperation+0x110>)
    hsd->State = HAL_SD_STATE_READY;
 8007b00:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b02:	63bb      	str	r3, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b04:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	f001 fa11 	bl	8008f34 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b12:	b130      	cbz	r0, 8007b22 <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b14:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8007b16:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b18:	4a22      	ldr	r2, [pc, #136]	; (8007ba4 <HAL_SD_ConfigWideBusOperation+0x110>)
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007b1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b1e:	4303      	orrs	r3, r0
 8007b20:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8007b22:	2301      	movs	r3, #1
}
 8007b24:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8007b26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8007b2a:	b00b      	add	sp, #44	; 0x2c
 8007b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007b2e:	b9e9      	cbnz	r1, 8007b6c <HAL_SD_ConfigWideBusOperation+0xd8>
  uint32_t scr[2U] = {0U, 0U};
 8007b30:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007b34:	f001 f932 	bl	8008d9c <SDMMC_GetResponse>
 8007b38:	0182      	lsls	r2, r0, #6
 8007b3a:	d411      	bmi.n	8007b60 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8007b3c:	a904      	add	r1, sp, #16
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f7ff fb92 	bl	8007268 <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d1d3      	bne.n	8007af0 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007b48:	9b05      	ldr	r3, [sp, #20]
 8007b4a:	03db      	lsls	r3, r3, #15
 8007b4c:	d50b      	bpl.n	8007b66 <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b4e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007b50:	6820      	ldr	r0, [r4, #0]
 8007b52:	0409      	lsls	r1, r1, #16
 8007b54:	f001 fa9f 	bl	8009096 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d1c9      	bne.n	8007af0 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007b5c:	4601      	mov	r1, r0
 8007b5e:	e7c4      	b.n	8007aea <HAL_SD_ConfigWideBusOperation+0x56>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007b64:	e7c4      	b.n	8007af0 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b66:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007b6a:	e7c1      	b.n	8007af0 <HAL_SD_ConfigWideBusOperation+0x5c>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b72:	e7bf      	b.n	8007af4 <HAL_SD_ConfigWideBusOperation+0x60>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007b74:	6863      	ldr	r3, [r4, #4]
 8007b76:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007b78:	68a3      	ldr	r3, [r4, #8]
 8007b7a:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007b7c:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 8007b7e:	e9cd 3506 	strd	r3, r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007b82:	6963      	ldr	r3, [r4, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8007b84:	4635      	mov	r5, r6
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007b86:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007b88:	69a3      	ldr	r3, [r4, #24]
 8007b8a:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 8007b8c:	ab0a      	add	r3, sp, #40	; 0x28
 8007b8e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007b92:	ab04      	add	r3, sp, #16
 8007b94:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007b98:	4638      	mov	r0, r7
 8007b9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b9c:	f001 f8bf 	bl	8008d1e <SDMMC_Init>
 8007ba0:	e7b2      	b.n	8007b08 <HAL_SD_ConfigWideBusOperation+0x74>
 8007ba2:	bf00      	nop
 8007ba4:	004005ff 	.word	0x004005ff

08007ba8 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ba8:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8007baa:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007bac:	0409      	lsls	r1, r1, #16
{
 8007bae:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007bb0:	6800      	ldr	r0, [r0, #0]
 8007bb2:	f001 fabb 	bl	800912c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bb6:	4601      	mov	r1, r0
 8007bb8:	b928      	cbnz	r0, 8007bc6 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007bba:	6820      	ldr	r0, [r4, #0]
 8007bbc:	f001 f8ee 	bl	8008d9c <SDMMC_GetResponse>
}
 8007bc0:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8007bc4:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8007bc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007bc8:	4303      	orrs	r3, r0
  uint32_t resp1 = 0;
 8007bca:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 8007bcc:	63a3      	str	r3, [r4, #56]	; 0x38
 8007bce:	e7f7      	b.n	8007bc0 <HAL_SD_GetCardState+0x18>

08007bd0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	b1c8      	cbz	r0, 8007c0c <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007bd8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007bdc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007be0:	b91b      	cbnz	r3, 8007bea <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007be2:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007be6:	f7fa fd77 	bl	80026d8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007bea:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007bec:	1d21      	adds	r1, r4, #4
 8007bee:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007bf0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007bf4:	f001 f809 	bl	8008c0a <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007bf8:	6862      	ldr	r2, [r4, #4]
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	6820      	ldr	r0, [r4, #0]
 8007bfe:	f001 f83c 	bl	8008c7a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007c02:	2301      	movs	r3, #1

  return HAL_OK;
 8007c04:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007c06:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007c0c:	2001      	movs	r0, #1
 8007c0e:	e7fc      	b.n	8007c0a <HAL_SDRAM_Init+0x3a>

08007c10 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007c10:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007c12:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8007c16:	4605      	mov	r5, r0
 8007c18:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007c1a:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007c1c:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8007c1e:	d010      	beq.n	8007c42 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007c20:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8007c24:	2c01      	cmp	r4, #1
 8007c26:	d110      	bne.n	8007c4a <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007c28:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007c2a:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007c2c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007c30:	f001 f859 	bl	8008ce6 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007c34:	6833      	ldr	r3, [r6, #0]
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d104      	bne.n	8007c44 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007c3a:	2305      	movs	r3, #5
 8007c3c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007c40:	2000      	movs	r0, #0
}
 8007c42:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007c44:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8007c48:	e7fa      	b.n	8007c40 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8007c4a:	2001      	movs	r0, #1
 8007c4c:	e7f9      	b.n	8007c42 <HAL_SDRAM_SendCommand+0x32>

08007c4e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007c4e:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007c50:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8007c54:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	b2d8      	uxtb	r0, r3
 8007c5a:	d00d      	beq.n	8007c78 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007c5c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	b2dd      	uxtb	r5, r3
 8007c64:	d109      	bne.n	8007c7a <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007c66:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007c68:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007c6a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007c6e:	f001 f84c 	bl	8008d0a <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007c72:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007c74:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8007c78:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007c7a:	2001      	movs	r0, #1
 8007c7c:	e7fc      	b.n	8007c78 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08007c7e <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8007c7e:	b510      	push	{r4, lr}
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8007c80:	4604      	mov	r4, r0
 8007c82:	2800      	cmp	r0, #0
 8007c84:	d030      	beq.n	8007ce8 <HAL_SPDIFRX_Init+0x6a>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8007c86:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8007c8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007c8e:	b91b      	cbnz	r3, 8007c98 <HAL_SPDIFRX_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8007c90:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8007c94:	f7fa fb04 	bl	80022a0 <HAL_SPDIFRX_MspInit>

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8007c98:	6821      	ldr	r1, [r4, #0]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007c9a:	2302      	movs	r3, #2
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8007c9c:	6860      	ldr	r0, [r4, #4]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007c9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_SPDIFRX_IDLE(hspdif);
 8007ca2:	680b      	ldr	r3, [r1, #0]
 8007ca4:	f023 0303 	bic.w	r3, r3, #3
 8007ca8:	600b      	str	r3, [r1, #0]
  tmpreg |= (hspdif->Init.StereoMode |
 8007caa:	69a3      	ldr	r3, [r4, #24]
  tmpreg = hspdif->Instance->CR;
 8007cac:	680a      	ldr	r2, [r1, #0]
  tmpreg |= (hspdif->Init.StereoMode |
 8007cae:	4303      	orrs	r3, r0
             hspdif->Init.InputSelection |
 8007cb0:	68a0      	ldr	r0, [r4, #8]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8007cb2:	f422 22ef 	bic.w	r2, r2, #489472	; 0x77800
             hspdif->Init.InputSelection |
 8007cb6:	4303      	orrs	r3, r0
             hspdif->Init.Retries |
 8007cb8:	68e0      	ldr	r0, [r4, #12]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8007cba:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
             hspdif->Init.Retries |
 8007cbe:	4303      	orrs	r3, r0
             hspdif->Init.WaitForActivity |
 8007cc0:	6920      	ldr	r0, [r4, #16]
 8007cc2:	4303      	orrs	r3, r0
             hspdif->Init.ChannelSelection |
 8007cc4:	6960      	ldr	r0, [r4, #20]
 8007cc6:	4303      	orrs	r3, r0
             hspdif->Init.DataFormat |
 8007cc8:	69e0      	ldr	r0, [r4, #28]
 8007cca:	4303      	orrs	r3, r0
             hspdif->Init.PreambleTypeMask |
 8007ccc:	6a20      	ldr	r0, [r4, #32]
 8007cce:	4303      	orrs	r3, r0
             hspdif->Init.ChannelStatusMask |
 8007cd0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007cd2:	4303      	orrs	r3, r0
             hspdif->Init.ValidityBitMask |
 8007cd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007cd6:	4303      	orrs	r3, r0
            );


  hspdif->Instance->CR = tmpreg;

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8007cd8:	2000      	movs	r0, #0
  tmpreg |= (hspdif->Init.StereoMode |
 8007cda:	4313      	orrs	r3, r2
  hspdif->Instance->CR = tmpreg;
 8007cdc:	600b      	str	r3, [r1, #0]

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8007cde:	2301      	movs	r3, #1
  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8007ce0:	64a0      	str	r0, [r4, #72]	; 0x48
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8007ce2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

  return HAL_OK;
}
 8007ce6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007ce8:	2001      	movs	r0, #1
 8007cea:	e7fc      	b.n	8007ce6 <HAL_SPDIFRX_Init+0x68>

08007cec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007cec:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007cee:	4604      	mov	r4, r0
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d063      	beq.n	8007dbc <HAL_SPI_Init+0xd0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007cf4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d15c      	bne.n	8007db4 <HAL_SPI_Init+0xc8>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cfa:	6842      	ldr	r2, [r0, #4]
 8007cfc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8007d00:	d000      	beq.n	8007d04 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d02:	61c3      	str	r3, [r0, #28]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d04:	2300      	movs	r3, #0
 8007d06:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d08:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8007d0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007d10:	b923      	cbnz	r3, 8007d1c <HAL_SPI_Init+0x30>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d12:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8007d14:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8007d18:	f7fa fb0c 	bl	8002334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d1c:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d1e:	6822      	ldr	r2, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d20:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007d22:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8007d26:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d28:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8007d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d30:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d32:	f04f 0300 	mov.w	r3, #0
 8007d36:	d843      	bhi.n	8007dc0 <HAL_SPI_Init+0xd4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007d38:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007d3c:	d000      	beq.n	8007d40 <HAL_SPI_Init+0x54>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d3e:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d40:	6863      	ldr	r3, [r4, #4]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d42:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d46:	68a6      	ldr	r6, [r4, #8]
 8007d48:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8007d4c:	69a1      	ldr	r1, [r4, #24]
 8007d4e:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8007d52:	4333      	orrs	r3, r6
 8007d54:	6926      	ldr	r6, [r4, #16]
 8007d56:	f006 0602 	and.w	r6, r6, #2
 8007d5a:	4333      	orrs	r3, r6
 8007d5c:	6966      	ldr	r6, [r4, #20]
 8007d5e:	f006 0601 	and.w	r6, r6, #1
 8007d62:	4333      	orrs	r3, r6
 8007d64:	f401 7600 	and.w	r6, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d68:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d6a:	4333      	orrs	r3, r6
 8007d6c:	69e6      	ldr	r6, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d6e:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d72:	f006 0638 	and.w	r6, r6, #56	; 0x38
 8007d76:	4333      	orrs	r3, r6
 8007d78:	6a26      	ldr	r6, [r4, #32]
 8007d7a:	f006 0680 	and.w	r6, r6, #128	; 0x80
 8007d7e:	4333      	orrs	r3, r6
 8007d80:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d82:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 8007d86:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d88:	6b66      	ldr	r6, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d8a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d8c:	f006 0608 	and.w	r6, r6, #8
 8007d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d92:	f003 0310 	and.w	r3, r3, #16
 8007d96:	4333      	orrs	r3, r6
 8007d98:	4303      	orrs	r3, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d9a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	432b      	orrs	r3, r5
 8007da0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007da2:	69d3      	ldr	r3, [r2, #28]
 8007da4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007da8:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8007daa:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007dac:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007dae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8007db2:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007db4:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dba:	e7a3      	b.n	8007d04 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8007dbc:	2001      	movs	r0, #1
 8007dbe:	e7f8      	b.n	8007db2 <HAL_SPI_Init+0xc6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007dc0:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007dc2:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
 8007dc6:	e7b9      	b.n	8007d3c <HAL_SPI_Init+0x50>

08007dc8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dc8:	6a03      	ldr	r3, [r0, #32]
 8007dca:	f023 0301 	bic.w	r3, r3, #1
{
 8007dce:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dd0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dd2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd4:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dd6:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007dd8:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8007ddc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007dde:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8007de2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007de6:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007de8:	688d      	ldr	r5, [r1, #8]
 8007dea:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007dec:	4d0e      	ldr	r5, [pc, #56]	; (8007e28 <TIM_OC1_SetConfig+0x60>)
 8007dee:	42a8      	cmp	r0, r5
 8007df0:	d002      	beq.n	8007df8 <TIM_OC1_SetConfig+0x30>
 8007df2:	4e0e      	ldr	r6, [pc, #56]	; (8007e2c <TIM_OC1_SetConfig+0x64>)
 8007df4:	42b0      	cmp	r0, r6
 8007df6:	d111      	bne.n	8007e1c <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007df8:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007dfc:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dfe:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 8007e00:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e04:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e08:	d002      	beq.n	8007e10 <TIM_OC1_SetConfig+0x48>
 8007e0a:	4d08      	ldr	r5, [pc, #32]	; (8007e2c <TIM_OC1_SetConfig+0x64>)
 8007e0c:	42a8      	cmp	r0, r5
 8007e0e:	d105      	bne.n	8007e1c <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e14:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8007e18:	4335      	orrs	r5, r6
 8007e1a:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e1c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e1e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007e20:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8007e22:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e24:	6203      	str	r3, [r0, #32]
}
 8007e26:	bd70      	pop	{r4, r5, r6, pc}
 8007e28:	40010000 	.word	0x40010000
 8007e2c:	40010400 	.word	0x40010400

08007e30 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e30:	6a03      	ldr	r3, [r0, #32]
 8007e32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8007e36:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e38:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e3a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e3c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e3e:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8007e44:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e46:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8007e4a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007e4e:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e50:	688d      	ldr	r5, [r1, #8]
 8007e52:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e56:	4d11      	ldr	r5, [pc, #68]	; (8007e9c <TIM_OC3_SetConfig+0x6c>)
 8007e58:	42a8      	cmp	r0, r5
 8007e5a:	d003      	beq.n	8007e64 <TIM_OC3_SetConfig+0x34>
 8007e5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007e60:	42a8      	cmp	r0, r5
 8007e62:	d114      	bne.n	8007e8e <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e64:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e6a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e6e:	4d0b      	ldr	r5, [pc, #44]	; (8007e9c <TIM_OC3_SetConfig+0x6c>)
 8007e70:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e76:	d003      	beq.n	8007e80 <TIM_OC3_SetConfig+0x50>
 8007e78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007e7c:	42a8      	cmp	r0, r5
 8007e7e:	d106      	bne.n	8007e8e <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e80:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e84:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8007e88:	4335      	orrs	r5, r6
 8007e8a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e8e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e90:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007e92:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8007e94:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e96:	6203      	str	r3, [r0, #32]
}
 8007e98:	bd70      	pop	{r4, r5, r6, pc}
 8007e9a:	bf00      	nop
 8007e9c:	40010000 	.word	0x40010000

08007ea0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ea0:	6a03      	ldr	r3, [r0, #32]
 8007ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8007ea6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ea8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eaa:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eae:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007eb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eb4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eba:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ebe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ec2:	688d      	ldr	r5, [r1, #8]
 8007ec4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ec8:	4d08      	ldr	r5, [pc, #32]	; (8007eec <TIM_OC4_SetConfig+0x4c>)
 8007eca:	42a8      	cmp	r0, r5
 8007ecc:	d003      	beq.n	8007ed6 <TIM_OC4_SetConfig+0x36>
 8007ece:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007ed2:	42a8      	cmp	r0, r5
 8007ed4:	d104      	bne.n	8007ee0 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ed6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007eda:	694d      	ldr	r5, [r1, #20]
 8007edc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ee2:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ee4:	684b      	ldr	r3, [r1, #4]
 8007ee6:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ee8:	6202      	str	r2, [r0, #32]
}
 8007eea:	bd30      	pop	{r4, r5, pc}
 8007eec:	40010000 	.word	0x40010000

08007ef0 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ef0:	6a03      	ldr	r3, [r0, #32]
 8007ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8007ef6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ef8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007efa:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007efc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007efe:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f00:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8007f04:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8007f0e:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f10:	688d      	ldr	r5, [r1, #8]
 8007f12:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f16:	4d09      	ldr	r5, [pc, #36]	; (8007f3c <TIM_OC5_SetConfig+0x4c>)
 8007f18:	42a8      	cmp	r0, r5
 8007f1a:	d003      	beq.n	8007f24 <TIM_OC5_SetConfig+0x34>
 8007f1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007f20:	42a8      	cmp	r0, r5
 8007f22:	d104      	bne.n	8007f2e <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f24:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f28:	694d      	ldr	r5, [r1, #20]
 8007f2a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f2e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f30:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f32:	684b      	ldr	r3, [r1, #4]
 8007f34:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f36:	6202      	str	r2, [r0, #32]
}
 8007f38:	bd30      	pop	{r4, r5, pc}
 8007f3a:	bf00      	nop
 8007f3c:	40010000 	.word	0x40010000

08007f40 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f40:	6a03      	ldr	r3, [r0, #32]
 8007f42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8007f46:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f48:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f4a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f4c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f4e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f50:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f54:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f5e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f62:	688d      	ldr	r5, [r1, #8]
 8007f64:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f68:	4d08      	ldr	r5, [pc, #32]	; (8007f8c <TIM_OC6_SetConfig+0x4c>)
 8007f6a:	42a8      	cmp	r0, r5
 8007f6c:	d003      	beq.n	8007f76 <TIM_OC6_SetConfig+0x36>
 8007f6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007f72:	42a8      	cmp	r0, r5
 8007f74:	d104      	bne.n	8007f80 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f76:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f7a:	694d      	ldr	r5, [r1, #20]
 8007f7c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f80:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f82:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f84:	684b      	ldr	r3, [r1, #4]
 8007f86:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f88:	6202      	str	r2, [r0, #32]
}
 8007f8a:	bd30      	pop	{r4, r5, pc}
 8007f8c:	40010000 	.word	0x40010000

08007f90 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007f90:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d133      	bne.n	8008000 <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 8007f98:	2302      	movs	r3, #2
 8007f9a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f9e:	6803      	ldr	r3, [r0, #0]
 8007fa0:	68da      	ldr	r2, [r3, #12]
 8007fa2:	f042 0201 	orr.w	r2, r2, #1
 8007fa6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa8:	4a16      	ldr	r2, [pc, #88]	; (8008004 <HAL_TIM_Base_Start_IT+0x74>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d01a      	beq.n	8007fe4 <HAL_TIM_Base_Start_IT+0x54>
 8007fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb2:	d017      	beq.n	8007fe4 <HAL_TIM_Base_Start_IT+0x54>
 8007fb4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d013      	beq.n	8007fe4 <HAL_TIM_Base_Start_IT+0x54>
 8007fbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00f      	beq.n	8007fe4 <HAL_TIM_Base_Start_IT+0x54>
 8007fc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00b      	beq.n	8007fe4 <HAL_TIM_Base_Start_IT+0x54>
 8007fcc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d007      	beq.n	8007fe4 <HAL_TIM_Base_Start_IT+0x54>
 8007fd4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d003      	beq.n	8007fe4 <HAL_TIM_Base_Start_IT+0x54>
 8007fdc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d107      	bne.n	8007ff4 <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fe4:	6899      	ldr	r1, [r3, #8]
 8007fe6:	4a08      	ldr	r2, [pc, #32]	; (8008008 <HAL_TIM_Base_Start_IT+0x78>)
 8007fe8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fea:	2a06      	cmp	r2, #6
 8007fec:	d006      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x6c>
 8007fee:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007ff2:	d003      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	f042 0201 	orr.w	r2, r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007ffc:	2000      	movs	r0, #0
}
 8007ffe:	4770      	bx	lr
    return HAL_ERROR;
 8008000:	2001      	movs	r0, #1
 8008002:	4770      	bx	lr
 8008004:	40010000 	.word	0x40010000
 8008008:	00010007 	.word	0x00010007

0800800c <HAL_TIM_OC_DelayElapsedCallback>:
 800800c:	4770      	bx	lr

0800800e <HAL_TIM_IC_CaptureCallback>:
 800800e:	4770      	bx	lr

08008010 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008010:	4770      	bx	lr

08008012 <HAL_TIM_TriggerCallback>:
 8008012:	4770      	bx	lr

08008014 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008014:	6803      	ldr	r3, [r0, #0]
 8008016:	691a      	ldr	r2, [r3, #16]
 8008018:	0791      	lsls	r1, r2, #30
{
 800801a:	b510      	push	{r4, lr}
 800801c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800801e:	d50f      	bpl.n	8008040 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	0792      	lsls	r2, r2, #30
 8008024:	d50c      	bpl.n	8008040 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008026:	f06f 0202 	mvn.w	r2, #2
 800802a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800802c:	2201      	movs	r2, #1
 800802e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	0799      	lsls	r1, r3, #30
 8008034:	f000 8085 	beq.w	8008142 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8008038:	f7ff ffe9 	bl	800800e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800803c:	2300      	movs	r3, #0
 800803e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	0752      	lsls	r2, r2, #29
 8008046:	d510      	bpl.n	800806a <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	0750      	lsls	r0, r2, #29
 800804c:	d50d      	bpl.n	800806a <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800804e:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8008052:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008056:	2202      	movs	r2, #2
 8008058:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008060:	d075      	beq.n	800814e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8008062:	f7ff ffd4 	bl	800800e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008066:	2300      	movs	r3, #0
 8008068:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	691a      	ldr	r2, [r3, #16]
 800806e:	0711      	lsls	r1, r2, #28
 8008070:	d50f      	bpl.n	8008092 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008072:	68da      	ldr	r2, [r3, #12]
 8008074:	0712      	lsls	r2, r2, #28
 8008076:	d50c      	bpl.n	8008092 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008078:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800807c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800807e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008080:	2204      	movs	r2, #4
 8008082:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	079b      	lsls	r3, r3, #30
 8008088:	d067      	beq.n	800815a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800808a:	f7ff ffc0 	bl	800800e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808e:	2300      	movs	r3, #0
 8008090:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	691a      	ldr	r2, [r3, #16]
 8008096:	06d0      	lsls	r0, r2, #27
 8008098:	d510      	bpl.n	80080bc <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	06d1      	lsls	r1, r2, #27
 800809e:	d50d      	bpl.n	80080bc <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080a0:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 80080a4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080a8:	2208      	movs	r2, #8
 80080aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	f413 7f40 	tst.w	r3, #768	; 0x300
 80080b2:	d058      	beq.n	8008166 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80080b4:	f7ff ffab 	bl	800800e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080b8:	2300      	movs	r3, #0
 80080ba:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	691a      	ldr	r2, [r3, #16]
 80080c0:	07d2      	lsls	r2, r2, #31
 80080c2:	d508      	bpl.n	80080d6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080c4:	68da      	ldr	r2, [r3, #12]
 80080c6:	07d0      	lsls	r0, r2, #31
 80080c8:	d505      	bpl.n	80080d6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080ca:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80080ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80080d2:	f7f9 fd57 	bl	8001b84 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	691a      	ldr	r2, [r3, #16]
 80080da:	0611      	lsls	r1, r2, #24
 80080dc:	d508      	bpl.n	80080f0 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	0612      	lsls	r2, r2, #24
 80080e2:	d505      	bpl.n	80080f0 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80080e8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080ea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80080ec:	f000 faf1 	bl	80086d2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	691a      	ldr	r2, [r3, #16]
 80080f4:	05d0      	lsls	r0, r2, #23
 80080f6:	d508      	bpl.n	800810a <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	0611      	lsls	r1, r2, #24
 80080fc:	d505      	bpl.n	800810a <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8008102:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008104:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008106:	f000 fae5 	bl	80086d4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	691a      	ldr	r2, [r3, #16]
 800810e:	0652      	lsls	r2, r2, #25
 8008110:	d508      	bpl.n	8008124 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	0650      	lsls	r0, r2, #25
 8008116:	d505      	bpl.n	8008124 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008118:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800811c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800811e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008120:	f7ff ff77 	bl	8008012 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008124:	6823      	ldr	r3, [r4, #0]
 8008126:	691a      	ldr	r2, [r3, #16]
 8008128:	0691      	lsls	r1, r2, #26
 800812a:	d522      	bpl.n	8008172 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	0692      	lsls	r2, r2, #26
 8008130:	d51f      	bpl.n	8008172 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008132:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8008136:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008138:	611a      	str	r2, [r3, #16]
}
 800813a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800813e:	f000 bac7 	b.w	80086d0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008142:	f7ff ff63 	bl	800800c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008146:	4620      	mov	r0, r4
 8008148:	f7ff ff62 	bl	8008010 <HAL_TIM_PWM_PulseFinishedCallback>
 800814c:	e776      	b.n	800803c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800814e:	f7ff ff5d 	bl	800800c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008152:	4620      	mov	r0, r4
 8008154:	f7ff ff5c 	bl	8008010 <HAL_TIM_PWM_PulseFinishedCallback>
 8008158:	e785      	b.n	8008066 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800815a:	f7ff ff57 	bl	800800c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800815e:	4620      	mov	r0, r4
 8008160:	f7ff ff56 	bl	8008010 <HAL_TIM_PWM_PulseFinishedCallback>
 8008164:	e793      	b.n	800808e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008166:	f7ff ff51 	bl	800800c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800816a:	4620      	mov	r0, r4
 800816c:	f7ff ff50 	bl	8008010 <HAL_TIM_PWM_PulseFinishedCallback>
 8008170:	e7a2      	b.n	80080b8 <HAL_TIM_IRQHandler+0xa4>
}
 8008172:	bd10      	pop	{r4, pc}

08008174 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008174:	4a30      	ldr	r2, [pc, #192]	; (8008238 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8008176:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008178:	4290      	cmp	r0, r2
 800817a:	d012      	beq.n	80081a2 <TIM_Base_SetConfig+0x2e>
 800817c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008180:	d00f      	beq.n	80081a2 <TIM_Base_SetConfig+0x2e>
 8008182:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008186:	4290      	cmp	r0, r2
 8008188:	d00b      	beq.n	80081a2 <TIM_Base_SetConfig+0x2e>
 800818a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800818e:	4290      	cmp	r0, r2
 8008190:	d007      	beq.n	80081a2 <TIM_Base_SetConfig+0x2e>
 8008192:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008196:	4290      	cmp	r0, r2
 8008198:	d003      	beq.n	80081a2 <TIM_Base_SetConfig+0x2e>
 800819a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800819e:	4290      	cmp	r0, r2
 80081a0:	d119      	bne.n	80081d6 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80081a2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80081a8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081aa:	4a23      	ldr	r2, [pc, #140]	; (8008238 <TIM_Base_SetConfig+0xc4>)
 80081ac:	4290      	cmp	r0, r2
 80081ae:	d029      	beq.n	8008204 <TIM_Base_SetConfig+0x90>
 80081b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80081b4:	d026      	beq.n	8008204 <TIM_Base_SetConfig+0x90>
 80081b6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80081ba:	4290      	cmp	r0, r2
 80081bc:	d022      	beq.n	8008204 <TIM_Base_SetConfig+0x90>
 80081be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081c2:	4290      	cmp	r0, r2
 80081c4:	d01e      	beq.n	8008204 <TIM_Base_SetConfig+0x90>
 80081c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081ca:	4290      	cmp	r0, r2
 80081cc:	d01a      	beq.n	8008204 <TIM_Base_SetConfig+0x90>
 80081ce:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80081d2:	4290      	cmp	r0, r2
 80081d4:	d016      	beq.n	8008204 <TIM_Base_SetConfig+0x90>
 80081d6:	4a19      	ldr	r2, [pc, #100]	; (800823c <TIM_Base_SetConfig+0xc8>)
 80081d8:	4290      	cmp	r0, r2
 80081da:	d013      	beq.n	8008204 <TIM_Base_SetConfig+0x90>
 80081dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081e0:	4290      	cmp	r0, r2
 80081e2:	d00f      	beq.n	8008204 <TIM_Base_SetConfig+0x90>
 80081e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081e8:	4290      	cmp	r0, r2
 80081ea:	d00b      	beq.n	8008204 <TIM_Base_SetConfig+0x90>
 80081ec:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80081f0:	4290      	cmp	r0, r2
 80081f2:	d007      	beq.n	8008204 <TIM_Base_SetConfig+0x90>
 80081f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081f8:	4290      	cmp	r0, r2
 80081fa:	d003      	beq.n	8008204 <TIM_Base_SetConfig+0x90>
 80081fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008200:	4290      	cmp	r0, r2
 8008202:	d103      	bne.n	800820c <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008208:	68ca      	ldr	r2, [r1, #12]
 800820a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800820c:	694a      	ldr	r2, [r1, #20]
 800820e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008212:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008214:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008216:	688b      	ldr	r3, [r1, #8]
 8008218:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800821a:	680b      	ldr	r3, [r1, #0]
 800821c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800821e:	4b06      	ldr	r3, [pc, #24]	; (8008238 <TIM_Base_SetConfig+0xc4>)
 8008220:	4298      	cmp	r0, r3
 8008222:	d003      	beq.n	800822c <TIM_Base_SetConfig+0xb8>
 8008224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008228:	4298      	cmp	r0, r3
 800822a:	d101      	bne.n	8008230 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800822c:	690b      	ldr	r3, [r1, #16]
 800822e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8008230:	2301      	movs	r3, #1
 8008232:	6143      	str	r3, [r0, #20]
}
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	40010000 	.word	0x40010000
 800823c:	40014000 	.word	0x40014000

08008240 <HAL_TIM_Base_Init>:
{
 8008240:	b510      	push	{r4, lr}
  if (htim == NULL)
 8008242:	4604      	mov	r4, r0
 8008244:	b350      	cbz	r0, 800829c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008246:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800824a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800824e:	b91b      	cbnz	r3, 8008258 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8008250:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008254:	f7fa f8b4 	bl	80023c0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008258:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800825a:	6820      	ldr	r0, [r4, #0]
 800825c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800825e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008262:	f7ff ff87 	bl	8008174 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008266:	2301      	movs	r3, #1
  return HAL_OK;
 8008268:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800826a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800826e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008272:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008276:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800827a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800827e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008286:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800828a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800828e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008292:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008296:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800829a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800829c:	2001      	movs	r0, #1
 800829e:	e7fc      	b.n	800829a <HAL_TIM_Base_Init+0x5a>

080082a0 <HAL_TIM_PWM_Init>:
{
 80082a0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80082a2:	4604      	mov	r4, r0
 80082a4:	b350      	cbz	r0, 80082fc <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80082a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80082aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80082ae:	b91b      	cbnz	r3, 80082b8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80082b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80082b4:	f7fa f918 	bl	80024e8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80082b8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082ba:	6820      	ldr	r0, [r4, #0]
 80082bc:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80082be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082c2:	f7ff ff57 	bl	8008174 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082c6:	2301      	movs	r3, #1
  return HAL_OK;
 80082c8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082ca:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80082d2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80082d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80082da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80082de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80082ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80082f2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80082f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80082fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80082fc:	2001      	movs	r0, #1
 80082fe:	e7fc      	b.n	80082fa <HAL_TIM_PWM_Init+0x5a>

08008300 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008300:	6a03      	ldr	r3, [r0, #32]
 8008302:	f023 0310 	bic.w	r3, r3, #16
{
 8008306:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008308:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800830a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800830c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800830e:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8008310:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008314:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008316:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800831a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800831e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008322:	688d      	ldr	r5, [r1, #8]
 8008324:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008328:	4d10      	ldr	r5, [pc, #64]	; (800836c <TIM_OC2_SetConfig+0x6c>)
 800832a:	42a8      	cmp	r0, r5
 800832c:	d003      	beq.n	8008336 <TIM_OC2_SetConfig+0x36>
 800832e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008332:	42a8      	cmp	r0, r5
 8008334:	d114      	bne.n	8008360 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008336:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800833c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008340:	4d0a      	ldr	r5, [pc, #40]	; (800836c <TIM_OC2_SetConfig+0x6c>)
 8008342:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8008344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008348:	d003      	beq.n	8008352 <TIM_OC2_SetConfig+0x52>
 800834a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800834e:	42a8      	cmp	r0, r5
 8008350:	d106      	bne.n	8008360 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008352:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008356:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800835a:	4335      	orrs	r5, r6
 800835c:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8008360:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8008362:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008364:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8008366:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008368:	6203      	str	r3, [r0, #32]
}
 800836a:	bd70      	pop	{r4, r5, r6, pc}
 800836c:	40010000 	.word	0x40010000

08008370 <HAL_TIM_PWM_ConfigChannel>:
{
 8008370:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8008372:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8008376:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8008378:	2b01      	cmp	r3, #1
 800837a:	d074      	beq.n	8008466 <HAL_TIM_PWM_ConfigChannel+0xf6>
 800837c:	2301      	movs	r3, #1
  switch (Channel)
 800837e:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8008380:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8008384:	d04f      	beq.n	8008426 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8008386:	d809      	bhi.n	800839c <HAL_TIM_PWM_ConfigChannel+0x2c>
 8008388:	2a04      	cmp	r2, #4
 800838a:	d02c      	beq.n	80083e6 <HAL_TIM_PWM_ConfigChannel+0x76>
 800838c:	2a08      	cmp	r2, #8
 800838e:	d03a      	beq.n	8008406 <HAL_TIM_PWM_ConfigChannel+0x96>
 8008390:	b1c2      	cbz	r2, 80083c4 <HAL_TIM_PWM_ConfigChannel+0x54>
 8008392:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8008394:	2300      	movs	r3, #0
 8008396:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800839a:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800839c:	2a10      	cmp	r2, #16
 800839e:	d052      	beq.n	8008446 <HAL_TIM_PWM_ConfigChannel+0xd6>
 80083a0:	2a14      	cmp	r2, #20
 80083a2:	d1f6      	bne.n	8008392 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083a4:	6800      	ldr	r0, [r0, #0]
 80083a6:	f7ff fdcb 	bl	8007f40 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083aa:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083ac:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80083ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80083b2:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083b4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80083b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083ba:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083bc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80083be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80083c2:	e04e      	b.n	8008462 <HAL_TIM_PWM_ConfigChannel+0xf2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083c4:	6800      	ldr	r0, [r0, #0]
 80083c6:	f7ff fcff 	bl	8007dc8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083ca:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083cc:	6983      	ldr	r3, [r0, #24]
 80083ce:	f043 0308 	orr.w	r3, r3, #8
 80083d2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083d4:	6983      	ldr	r3, [r0, #24]
 80083d6:	f023 0304 	bic.w	r3, r3, #4
 80083da:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083dc:	6983      	ldr	r3, [r0, #24]
 80083de:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083e0:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80083e2:	2000      	movs	r0, #0
      break;
 80083e4:	e7d6      	b.n	8008394 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083e6:	6800      	ldr	r0, [r0, #0]
 80083e8:	f7ff ff8a 	bl	8008300 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083ec:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083ee:	6983      	ldr	r3, [r0, #24]
 80083f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80083f4:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083f6:	6983      	ldr	r3, [r0, #24]
 80083f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083fc:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083fe:	6983      	ldr	r3, [r0, #24]
 8008400:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008404:	e7ec      	b.n	80083e0 <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008406:	6800      	ldr	r0, [r0, #0]
 8008408:	f7ff fd12 	bl	8007e30 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800840c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800840e:	69c3      	ldr	r3, [r0, #28]
 8008410:	f043 0308 	orr.w	r3, r3, #8
 8008414:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008416:	69c3      	ldr	r3, [r0, #28]
 8008418:	f023 0304 	bic.w	r3, r3, #4
 800841c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800841e:	69c3      	ldr	r3, [r0, #28]
 8008420:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008422:	61c3      	str	r3, [r0, #28]
      break;
 8008424:	e7dd      	b.n	80083e2 <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008426:	6800      	ldr	r0, [r0, #0]
 8008428:	f7ff fd3a 	bl	8007ea0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800842c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800842e:	69c3      	ldr	r3, [r0, #28]
 8008430:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008434:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008436:	69c3      	ldr	r3, [r0, #28]
 8008438:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800843c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800843e:	69c3      	ldr	r3, [r0, #28]
 8008440:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008444:	e7ed      	b.n	8008422 <HAL_TIM_PWM_ConfigChannel+0xb2>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008446:	6800      	ldr	r0, [r0, #0]
 8008448:	f7ff fd52 	bl	8007ef0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800844c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800844e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008450:	f043 0308 	orr.w	r3, r3, #8
 8008454:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008456:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008458:	f023 0304 	bic.w	r3, r3, #4
 800845c:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800845e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008460:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008462:	6543      	str	r3, [r0, #84]	; 0x54
 8008464:	e7bd      	b.n	80083e2 <HAL_TIM_PWM_ConfigChannel+0x72>
  __HAL_LOCK(htim);
 8008466:	2002      	movs	r0, #2
 8008468:	e797      	b.n	800839a <HAL_TIM_PWM_ConfigChannel+0x2a>

0800846a <TIM_ETR_SetConfig>:

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800846a:	4311      	orrs	r1, r2
{
 800846c:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 800846e:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008470:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008474:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008478:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800847a:	6083      	str	r3, [r0, #8]
}
 800847c:	bd10      	pop	{r4, pc}
	...

08008480 <HAL_TIM_ConfigClockSource>:
{
 8008480:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8008482:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8008486:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8008488:	2b01      	cmp	r3, #1
 800848a:	f04f 0302 	mov.w	r3, #2
 800848e:	f000 808c 	beq.w	80085aa <HAL_TIM_ConfigClockSource+0x12a>
 8008492:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8008494:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008498:	4b45      	ldr	r3, [pc, #276]	; (80085b0 <HAL_TIM_ConfigClockSource+0x130>)
  __HAL_LOCK(htim);
 800849a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800849e:	6800      	ldr	r0, [r0, #0]
 80084a0:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084a2:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80084a4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80084a6:	680b      	ldr	r3, [r1, #0]
 80084a8:	2b60      	cmp	r3, #96	; 0x60
 80084aa:	d04f      	beq.n	800854c <HAL_TIM_ConfigClockSource+0xcc>
 80084ac:	d832      	bhi.n	8008514 <HAL_TIM_ConfigClockSource+0x94>
 80084ae:	2b40      	cmp	r3, #64	; 0x40
 80084b0:	d064      	beq.n	800857c <HAL_TIM_ConfigClockSource+0xfc>
 80084b2:	d816      	bhi.n	80084e2 <HAL_TIM_ConfigClockSource+0x62>
 80084b4:	2b20      	cmp	r3, #32
 80084b6:	d00d      	beq.n	80084d4 <HAL_TIM_ConfigClockSource+0x54>
 80084b8:	d80a      	bhi.n	80084d0 <HAL_TIM_ConfigClockSource+0x50>
 80084ba:	f033 0110 	bics.w	r1, r3, #16
 80084be:	d009      	beq.n	80084d4 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 80084c0:	2301      	movs	r3, #1
 80084c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80084c6:	2300      	movs	r3, #0
 80084c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80084cc:	4610      	mov	r0, r2
 80084ce:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80084d0:	2b30      	cmp	r3, #48	; 0x30
 80084d2:	d1f5      	bne.n	80084c0 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 80084d4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80084d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084da:	4313      	orrs	r3, r2
 80084dc:	f043 0307 	orr.w	r3, r3, #7
 80084e0:	e028      	b.n	8008534 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 80084e2:	2b50      	cmp	r3, #80	; 0x50
 80084e4:	d1ec      	bne.n	80084c0 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 80084e6:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80084e8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80084ea:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ec:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084ee:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084f2:	f023 0301 	bic.w	r3, r3, #1
  tmpccer |= TIM_ICPolarity;
 80084f6:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084f8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084fa:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008500:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008504:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8008506:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008508:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800850a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800850e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8008512:	e00f      	b.n	8008534 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8008514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008518:	d00d      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0xb6>
 800851a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800851e:	d00c      	beq.n	800853a <HAL_TIM_ConfigClockSource+0xba>
 8008520:	2b70      	cmp	r3, #112	; 0x70
 8008522:	d1cd      	bne.n	80084c0 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8008524:	68cb      	ldr	r3, [r1, #12]
 8008526:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800852a:	f7ff ff9e 	bl	800846a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800852e:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008530:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8008534:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008536:	2200      	movs	r2, #0
 8008538:	e7c2      	b.n	80084c0 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 800853a:	68cb      	ldr	r3, [r1, #12]
 800853c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8008540:	f7ff ff93 	bl	800846a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008544:	6883      	ldr	r3, [r0, #8]
 8008546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800854a:	e7f3      	b.n	8008534 <HAL_TIM_ConfigClockSource+0xb4>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800854c:	6a03      	ldr	r3, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 800854e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008550:	f023 0310 	bic.w	r3, r3, #16
                               sClockSourceConfig->ClockFilter);
 8008554:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008556:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008558:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800855a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800855c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008560:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008564:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8008568:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800856c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800856e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008570:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008576:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800857a:	e7db      	b.n	8008534 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 800857c:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800857e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8008580:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008582:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008584:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008588:	f023 0301 	bic.w	r3, r3, #1
  tmpccer |= TIM_ICPolarity;
 800858c:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800858e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008590:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008596:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800859a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800859c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800859e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80085a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085a4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80085a8:	e7c4      	b.n	8008534 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 80085aa:	461a      	mov	r2, r3
 80085ac:	e78e      	b.n	80084cc <HAL_TIM_ConfigClockSource+0x4c>
 80085ae:	bf00      	nop
 80085b0:	fffe0088 	.word	0xfffe0088

080085b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085b4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	f04f 0302 	mov.w	r3, #2
 80085c0:	d03b      	beq.n	800863a <HAL_TIMEx_MasterConfigSynchronization+0x86>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085c6:	4d1e      	ldr	r5, [pc, #120]	; (8008640 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  tmpcr2 = htim->Instance->CR2;
 80085c8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085ca:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80085cc:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80085ce:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085d0:	d002      	beq.n	80085d8 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 80085d2:	4e1c      	ldr	r6, [pc, #112]	; (8008644 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 80085d4:	42b3      	cmp	r3, r6
 80085d6:	d103      	bne.n	80085e0 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085d8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085dc:	684e      	ldr	r6, [r1, #4]
 80085de:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085e0:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80085e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085e6:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085e8:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 80085ec:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085ee:	d019      	beq.n	8008624 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80085f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085f4:	d016      	beq.n	8008624 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80085f6:	4a14      	ldr	r2, [pc, #80]	; (8008648 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d013      	beq.n	8008624 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80085fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008600:	4293      	cmp	r3, r2
 8008602:	d00f      	beq.n	8008624 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8008604:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008608:	4293      	cmp	r3, r2
 800860a:	d00b      	beq.n	8008624 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800860c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008610:	4293      	cmp	r3, r2
 8008612:	d007      	beq.n	8008624 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8008614:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8008618:	4293      	cmp	r3, r2
 800861a:	d003      	beq.n	8008624 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800861c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008620:	4293      	cmp	r3, r2
 8008622:	d104      	bne.n	800862e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008624:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008626:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800862a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800862c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800862e:	2301      	movs	r3, #1
 8008630:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008634:	2300      	movs	r3, #0
 8008636:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800863a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800863c:	bd70      	pop	{r4, r5, r6, pc}
 800863e:	bf00      	nop
 8008640:	40010000 	.word	0x40010000
 8008644:	40010400 	.word	0x40010400
 8008648:	40000400 	.word	0x40000400

0800864c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800864c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800864e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008652:	2b01      	cmp	r3, #1
 8008654:	d038      	beq.n	80086c8 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008656:	68cb      	ldr	r3, [r1, #12]
 8008658:	688a      	ldr	r2, [r1, #8]
 800865a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800865e:	4c1b      	ldr	r4, [pc, #108]	; (80086cc <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008660:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008662:	684a      	ldr	r2, [r1, #4]
 8008664:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008668:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800866a:	680a      	ldr	r2, [r1, #0]
 800866c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008670:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008672:	690a      	ldr	r2, [r1, #16]
 8008674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008678:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800867a:	694a      	ldr	r2, [r1, #20]
 800867c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008680:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008682:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8008684:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008688:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800868a:	698a      	ldr	r2, [r1, #24]
 800868c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8008690:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008694:	6802      	ldr	r2, [r0, #0]
 8008696:	42a2      	cmp	r2, r4
 8008698:	d003      	beq.n	80086a2 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 800869a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800869e:	42a2      	cmp	r2, r4
 80086a0:	d10c      	bne.n	80086bc <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80086a2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80086a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086a8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80086ac:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80086ae:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80086b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086b4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80086b6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80086ba:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086bc:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80086be:	2300      	movs	r3, #0
 80086c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80086c4:	4618      	mov	r0, r3
}
 80086c6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80086c8:	2002      	movs	r0, #2
 80086ca:	e7fc      	b.n	80086c6 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 80086cc:	40010000 	.word	0x40010000

080086d0 <HAL_TIMEx_CommutCallback>:
 80086d0:	4770      	bx	lr

080086d2 <HAL_TIMEx_BreakCallback>:
 80086d2:	4770      	bx	lr

080086d4 <HAL_TIMEx_Break2Callback>:
 80086d4:	4770      	bx	lr
	...

080086d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086dc:	69c0      	ldr	r0, [r0, #28]
 80086de:	6921      	ldr	r1, [r4, #16]
 80086e0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086e2:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086e4:	430a      	orrs	r2, r1
 80086e6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086e8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086ea:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086ec:	498e      	ldr	r1, [pc, #568]	; (8008928 <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086ee:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086f0:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 80086f2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086f4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086f6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086f8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008700:	430a      	orrs	r2, r1
 8008702:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008704:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008706:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8008708:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800870a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800870e:	430a      	orrs	r2, r1
 8008710:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008712:	4a86      	ldr	r2, [pc, #536]	; (800892c <UART_SetConfig+0x254>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d117      	bne.n	8008748 <UART_SetConfig+0x70>
 8008718:	4b85      	ldr	r3, [pc, #532]	; (8008930 <UART_SetConfig+0x258>)
 800871a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	3b01      	subs	r3, #1
 8008724:	2b02      	cmp	r3, #2
 8008726:	f200 80e2 	bhi.w	80088ee <UART_SetConfig+0x216>
 800872a:	4a82      	ldr	r2, [pc, #520]	; (8008934 <UART_SetConfig+0x25c>)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800872c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008730:	5cd3      	ldrb	r3, [r2, r3]
 8008732:	f040 80b3 	bne.w	800889c <UART_SetConfig+0x1c4>
  {
    switch (clocksource)
 8008736:	2b08      	cmp	r3, #8
 8008738:	d822      	bhi.n	8008780 <UART_SetConfig+0xa8>
 800873a:	e8df f003 	tbb	[pc, r3]
 800873e:	db90      	.short	0xdb90
 8008740:	21d52198 	.word	0x21d52198
 8008744:	2121      	.short	0x2121
 8008746:	99          	.byte	0x99
 8008747:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008748:	4a7b      	ldr	r2, [pc, #492]	; (8008938 <UART_SetConfig+0x260>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d106      	bne.n	800875c <UART_SetConfig+0x84>
 800874e:	4b78      	ldr	r3, [pc, #480]	; (8008930 <UART_SetConfig+0x258>)
 8008750:	4a7a      	ldr	r2, [pc, #488]	; (800893c <UART_SetConfig+0x264>)
 8008752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008756:	f003 030c 	and.w	r3, r3, #12
 800875a:	e7e7      	b.n	800872c <UART_SetConfig+0x54>
 800875c:	4a78      	ldr	r2, [pc, #480]	; (8008940 <UART_SetConfig+0x268>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d118      	bne.n	8008794 <UART_SetConfig+0xbc>
 8008762:	4b73      	ldr	r3, [pc, #460]	; (8008930 <UART_SetConfig+0x258>)
 8008764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008768:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800876c:	2b20      	cmp	r3, #32
 800876e:	f000 80b3 	beq.w	80088d8 <UART_SetConfig+0x200>
 8008772:	d807      	bhi.n	8008784 <UART_SetConfig+0xac>
 8008774:	2b00      	cmp	r3, #0
 8008776:	f000 80c0 	beq.w	80088fa <UART_SetConfig+0x222>
 800877a:	2b10      	cmp	r3, #16
 800877c:	f000 80b1 	beq.w	80088e2 <UART_SetConfig+0x20a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008780:	2001      	movs	r0, #1
 8008782:	e070      	b.n	8008866 <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008784:	2b30      	cmp	r3, #48	; 0x30
 8008786:	d1fb      	bne.n	8008780 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008788:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800878c:	d070      	beq.n	8008870 <UART_SetConfig+0x198>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800878e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008792:	e0b9      	b.n	8008908 <UART_SetConfig+0x230>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008794:	4a6b      	ldr	r2, [pc, #428]	; (8008944 <UART_SetConfig+0x26c>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d10f      	bne.n	80087ba <UART_SetConfig+0xe2>
 800879a:	4b65      	ldr	r3, [pc, #404]	; (8008930 <UART_SetConfig+0x258>)
 800879c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80087a4:	2b80      	cmp	r3, #128	; 0x80
 80087a6:	f000 8097 	beq.w	80088d8 <UART_SetConfig+0x200>
 80087aa:	d804      	bhi.n	80087b6 <UART_SetConfig+0xde>
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 80a4 	beq.w	80088fa <UART_SetConfig+0x222>
 80087b2:	2b40      	cmp	r3, #64	; 0x40
 80087b4:	e7e2      	b.n	800877c <UART_SetConfig+0xa4>
 80087b6:	2bc0      	cmp	r3, #192	; 0xc0
 80087b8:	e7e5      	b.n	8008786 <UART_SetConfig+0xae>
 80087ba:	4a63      	ldr	r2, [pc, #396]	; (8008948 <UART_SetConfig+0x270>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d112      	bne.n	80087e6 <UART_SetConfig+0x10e>
 80087c0:	4b5b      	ldr	r3, [pc, #364]	; (8008930 <UART_SetConfig+0x258>)
 80087c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ce:	f000 8083 	beq.w	80088d8 <UART_SetConfig+0x200>
 80087d2:	d805      	bhi.n	80087e0 <UART_SetConfig+0x108>
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f000 8090 	beq.w	80088fa <UART_SetConfig+0x222>
 80087da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087de:	e7cd      	b.n	800877c <UART_SetConfig+0xa4>
 80087e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087e4:	e7cf      	b.n	8008786 <UART_SetConfig+0xae>
 80087e6:	4a59      	ldr	r2, [pc, #356]	; (800894c <UART_SetConfig+0x274>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d110      	bne.n	800880e <UART_SetConfig+0x136>
 80087ec:	4b50      	ldr	r3, [pc, #320]	; (8008930 <UART_SetConfig+0x258>)
 80087ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80087f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087fa:	d06d      	beq.n	80088d8 <UART_SetConfig+0x200>
 80087fc:	d804      	bhi.n	8008808 <UART_SetConfig+0x130>
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d075      	beq.n	80088ee <UART_SetConfig+0x216>
 8008802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008806:	e7b9      	b.n	800877c <UART_SetConfig+0xa4>
 8008808:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800880c:	e7bb      	b.n	8008786 <UART_SetConfig+0xae>
 800880e:	4a50      	ldr	r2, [pc, #320]	; (8008950 <UART_SetConfig+0x278>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d110      	bne.n	8008836 <UART_SetConfig+0x15e>
 8008814:	4b46      	ldr	r3, [pc, #280]	; (8008930 <UART_SetConfig+0x258>)
 8008816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800881a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800881e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008822:	d059      	beq.n	80088d8 <UART_SetConfig+0x200>
 8008824:	d804      	bhi.n	8008830 <UART_SetConfig+0x158>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d067      	beq.n	80088fa <UART_SetConfig+0x222>
 800882a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800882e:	e7a5      	b.n	800877c <UART_SetConfig+0xa4>
 8008830:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008834:	e7a7      	b.n	8008786 <UART_SetConfig+0xae>
 8008836:	4a47      	ldr	r2, [pc, #284]	; (8008954 <UART_SetConfig+0x27c>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d1a1      	bne.n	8008780 <UART_SetConfig+0xa8>
 800883c:	4b3c      	ldr	r3, [pc, #240]	; (8008930 <UART_SetConfig+0x258>)
 800883e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008842:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800884a:	d045      	beq.n	80088d8 <UART_SetConfig+0x200>
 800884c:	d804      	bhi.n	8008858 <UART_SetConfig+0x180>
 800884e:	2b00      	cmp	r3, #0
 8008850:	d053      	beq.n	80088fa <UART_SetConfig+0x222>
 8008852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008856:	e791      	b.n	800877c <UART_SetConfig+0xa4>
 8008858:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800885c:	e793      	b.n	8008786 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetPCLK1Freq();
 800885e:	f7fd fec3 	bl	80065e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008862:	b928      	cbnz	r0, 8008870 <UART_SetConfig+0x198>
 8008864:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008866:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8008868:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68

  return ret;
}
 800886c:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 800886e:	483a      	ldr	r0, [pc, #232]	; (8008958 <UART_SetConfig+0x280>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008870:	6862      	ldr	r2, [r4, #4]
 8008872:	0853      	lsrs	r3, r2, #1
 8008874:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008878:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800887c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008880:	f1a3 0110 	sub.w	r1, r3, #16
 8008884:	4291      	cmp	r1, r2
 8008886:	f63f af7b 	bhi.w	8008780 <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800888a:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800888e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8008892:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008894:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8008896:	4313      	orrs	r3, r2
 8008898:	60cb      	str	r3, [r1, #12]
 800889a:	e7e3      	b.n	8008864 <UART_SetConfig+0x18c>
    switch (clocksource)
 800889c:	2b08      	cmp	r3, #8
 800889e:	f63f af6f 	bhi.w	8008780 <UART_SetConfig+0xa8>
 80088a2:	a201      	add	r2, pc, #4	; (adr r2, 80088a8 <UART_SetConfig+0x1d0>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	08008901 	.word	0x08008901
 80088ac:	080088cd 	.word	0x080088cd
 80088b0:	080088df 	.word	0x080088df
 80088b4:	08008781 	.word	0x08008781
 80088b8:	080088d3 	.word	0x080088d3
 80088bc:	08008781 	.word	0x08008781
 80088c0:	08008781 	.word	0x08008781
 80088c4:	08008781 	.word	0x08008781
 80088c8:	0800878f 	.word	0x0800878f
        pclk = HAL_RCC_GetPCLK2Freq();
 80088cc:	f7fd fe9c 	bl	8006608 <HAL_RCC_GetPCLK2Freq>
        break;
 80088d0:	e018      	b.n	8008904 <UART_SetConfig+0x22c>
        pclk = HAL_RCC_GetSysClockFreq();
 80088d2:	f7fd fdbd 	bl	8006450 <HAL_RCC_GetSysClockFreq>
        break;
 80088d6:	e015      	b.n	8008904 <UART_SetConfig+0x22c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088d8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80088dc:	d0c7      	beq.n	800886e <UART_SetConfig+0x196>
        pclk = (uint32_t) HSI_VALUE;
 80088de:	481e      	ldr	r0, [pc, #120]	; (8008958 <UART_SetConfig+0x280>)
 80088e0:	e012      	b.n	8008908 <UART_SetConfig+0x230>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80088e6:	d1f4      	bne.n	80088d2 <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetSysClockFreq();
 80088e8:	f7fd fdb2 	bl	8006450 <HAL_RCC_GetSysClockFreq>
        break;
 80088ec:	e7b9      	b.n	8008862 <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80088f2:	d1eb      	bne.n	80088cc <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 80088f4:	f7fd fe88 	bl	8006608 <HAL_RCC_GetPCLK2Freq>
        break;
 80088f8:	e7b3      	b.n	8008862 <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088fa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80088fe:	d0ae      	beq.n	800885e <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008900:	f7fd fe72 	bl	80065e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008904:	2800      	cmp	r0, #0
 8008906:	d0ad      	beq.n	8008864 <UART_SetConfig+0x18c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008908:	6862      	ldr	r2, [r4, #4]
 800890a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800890e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008912:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008916:	f1a3 0110 	sub.w	r1, r3, #16
 800891a:	4291      	cmp	r1, r2
 800891c:	f63f af30 	bhi.w	8008780 <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008920:	6822      	ldr	r2, [r4, #0]
 8008922:	60d3      	str	r3, [r2, #12]
 8008924:	e79e      	b.n	8008864 <UART_SetConfig+0x18c>
 8008926:	bf00      	nop
 8008928:	efff69f3 	.word	0xefff69f3
 800892c:	40011000 	.word	0x40011000
 8008930:	40023800 	.word	0x40023800
 8008934:	0800c479 	.word	0x0800c479
 8008938:	40004400 	.word	0x40004400
 800893c:	0800c47c 	.word	0x0800c47c
 8008940:	40004800 	.word	0x40004800
 8008944:	40004c00 	.word	0x40004c00
 8008948:	40005000 	.word	0x40005000
 800894c:	40011400 	.word	0x40011400
 8008950:	40007800 	.word	0x40007800
 8008954:	40007c00 	.word	0x40007c00
 8008958:	00f42400 	.word	0x00f42400

0800895c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800895c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800895e:	07da      	lsls	r2, r3, #31
{
 8008960:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008962:	d506      	bpl.n	8008972 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008964:	6801      	ldr	r1, [r0, #0]
 8008966:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008968:	684a      	ldr	r2, [r1, #4]
 800896a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800896e:	4322      	orrs	r2, r4
 8008970:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008972:	079c      	lsls	r4, r3, #30
 8008974:	d506      	bpl.n	8008984 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008976:	6801      	ldr	r1, [r0, #0]
 8008978:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800897a:	684a      	ldr	r2, [r1, #4]
 800897c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008980:	4322      	orrs	r2, r4
 8008982:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008984:	0759      	lsls	r1, r3, #29
 8008986:	d506      	bpl.n	8008996 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008988:	6801      	ldr	r1, [r0, #0]
 800898a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800898c:	684a      	ldr	r2, [r1, #4]
 800898e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008992:	4322      	orrs	r2, r4
 8008994:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008996:	071a      	lsls	r2, r3, #28
 8008998:	d506      	bpl.n	80089a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800899a:	6801      	ldr	r1, [r0, #0]
 800899c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800899e:	684a      	ldr	r2, [r1, #4]
 80089a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089a4:	4322      	orrs	r2, r4
 80089a6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089a8:	06dc      	lsls	r4, r3, #27
 80089aa:	d506      	bpl.n	80089ba <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089ac:	6801      	ldr	r1, [r0, #0]
 80089ae:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80089b0:	688a      	ldr	r2, [r1, #8]
 80089b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80089b6:	4322      	orrs	r2, r4
 80089b8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089ba:	0699      	lsls	r1, r3, #26
 80089bc:	d506      	bpl.n	80089cc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089be:	6801      	ldr	r1, [r0, #0]
 80089c0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80089c2:	688a      	ldr	r2, [r1, #8]
 80089c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089c8:	4322      	orrs	r2, r4
 80089ca:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089cc:	065a      	lsls	r2, r3, #25
 80089ce:	d510      	bpl.n	80089f2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089d0:	6801      	ldr	r1, [r0, #0]
 80089d2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80089d4:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089d6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089da:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80089de:	ea42 0204 	orr.w	r2, r2, r4
 80089e2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089e4:	d105      	bne.n	80089f2 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089e6:	684a      	ldr	r2, [r1, #4]
 80089e8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80089ea:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80089ee:	4322      	orrs	r2, r4
 80089f0:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089f2:	061b      	lsls	r3, r3, #24
 80089f4:	d506      	bpl.n	8008a04 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089f6:	6802      	ldr	r2, [r0, #0]
 80089f8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80089fa:	6853      	ldr	r3, [r2, #4]
 80089fc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008a00:	430b      	orrs	r3, r1
 8008a02:	6053      	str	r3, [r2, #4]
  }
}
 8008a04:	bd10      	pop	{r4, pc}

08008a06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008a0e:	4604      	mov	r4, r0
 8008a10:	460e      	mov	r6, r1
 8008a12:	4615      	mov	r5, r2
 8008a14:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a16:	6822      	ldr	r2, [r4, #0]
 8008a18:	69d3      	ldr	r3, [r2, #28]
 8008a1a:	ea36 0303 	bics.w	r3, r6, r3
 8008a1e:	bf0c      	ite	eq
 8008a20:	2301      	moveq	r3, #1
 8008a22:	2300      	movne	r3, #0
 8008a24:	42ab      	cmp	r3, r5
 8008a26:	d001      	beq.n	8008a2c <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8008a28:	2000      	movs	r0, #0
 8008a2a:	e026      	b.n	8008a7a <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8008a2c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008a30:	d0f2      	beq.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a32:	f7fb fb1d 	bl	8004070 <HAL_GetTick>
 8008a36:	1bc0      	subs	r0, r0, r7
 8008a38:	4540      	cmp	r0, r8
 8008a3a:	6820      	ldr	r0, [r4, #0]
 8008a3c:	d802      	bhi.n	8008a44 <UART_WaitOnFlagUntilTimeout+0x3e>
 8008a3e:	f1b8 0f00 	cmp.w	r8, #0
 8008a42:	d11c      	bne.n	8008a7e <UART_WaitOnFlagUntilTimeout+0x78>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a44:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	e840 3200 	strex	r2, r3, [r0]
 8008a50:	2a00      	cmp	r2, #0
 8008a52:	d1f7      	bne.n	8008a44 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a54:	f100 0308 	add.w	r3, r0, #8
 8008a58:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a60:	f100 0108 	add.w	r1, r0, #8
 8008a64:	e841 3200 	strex	r2, r3, [r1]
 8008a68:	2a00      	cmp	r2, #0
 8008a6a:	d1f3      	bne.n	8008a54 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8008a6c:	2320      	movs	r3, #32
 8008a6e:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008a70:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 8008a74:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8008a76:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
}
 8008a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a7e:	6803      	ldr	r3, [r0, #0]
 8008a80:	075a      	lsls	r2, r3, #29
 8008a82:	d5c8      	bpl.n	8008a16 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a84:	69c3      	ldr	r3, [r0, #28]
 8008a86:	051b      	lsls	r3, r3, #20
 8008a88:	d5c5      	bpl.n	8008a16 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a8e:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a90:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a98:	e840 3200 	strex	r2, r3, [r0]
 8008a9c:	2a00      	cmp	r2, #0
 8008a9e:	d1f7      	bne.n	8008a90 <UART_WaitOnFlagUntilTimeout+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa0:	f100 0308 	add.w	r3, r0, #8
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aac:	f100 0108 	add.w	r1, r0, #8
 8008ab0:	e841 3200 	strex	r2, r3, [r1]
 8008ab4:	2a00      	cmp	r2, #0
 8008ab6:	d1f3      	bne.n	8008aa0 <UART_WaitOnFlagUntilTimeout+0x9a>
          huart->gState = HAL_UART_STATE_READY;
 8008ab8:	2320      	movs	r3, #32
 8008aba:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008abc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ac0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8008ac4:	e7d6      	b.n	8008a74 <UART_WaitOnFlagUntilTimeout+0x6e>

08008ac6 <HAL_UART_Transmit>:
{
 8008ac6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008aca:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008acc:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8008ace:	4604      	mov	r4, r0
 8008ad0:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8008ad2:	2b20      	cmp	r3, #32
{
 8008ad4:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8008ad6:	d142      	bne.n	8008b5e <HAL_UART_Transmit+0x98>
    if ((pData == NULL) || (Size == 0U))
 8008ad8:	2900      	cmp	r1, #0
 8008ada:	d042      	beq.n	8008b62 <HAL_UART_Transmit+0x9c>
 8008adc:	2a00      	cmp	r2, #0
 8008ade:	d040      	beq.n	8008b62 <HAL_UART_Transmit+0x9c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ae0:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae2:	2500      	movs	r5, #0
 8008ae4:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ae8:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8008aea:	f7fb fac1 	bl	8004070 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aee:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8008af0:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 8008af2:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008af6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8008afa:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008afe:	d103      	bne.n	8008b08 <HAL_UART_Transmit+0x42>
 8008b00:	6922      	ldr	r2, [r4, #16]
 8008b02:	b90a      	cbnz	r2, 8008b08 <HAL_UART_Transmit+0x42>
 8008b04:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8008b06:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 8008b08:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b0c:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8008b10:	b292      	uxth	r2, r2
 8008b12:	b93a      	cbnz	r2, 8008b24 <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b14:	2140      	movs	r1, #64	; 0x40
 8008b16:	4620      	mov	r0, r4
 8008b18:	f7ff ff75 	bl	8008a06 <UART_WaitOnFlagUntilTimeout>
 8008b1c:	b950      	cbnz	r0, 8008b34 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8008b1e:	2320      	movs	r3, #32
 8008b20:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8008b22:	e008      	b.n	8008b36 <HAL_UART_Transmit+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b24:	2200      	movs	r2, #0
 8008b26:	2180      	movs	r1, #128	; 0x80
 8008b28:	4620      	mov	r0, r4
 8008b2a:	9303      	str	r3, [sp, #12]
 8008b2c:	f7ff ff6b 	bl	8008a06 <UART_WaitOnFlagUntilTimeout>
 8008b30:	9b03      	ldr	r3, [sp, #12]
 8008b32:	b118      	cbz	r0, 8008b3c <HAL_UART_Transmit+0x76>
        return HAL_TIMEOUT;
 8008b34:	2003      	movs	r0, #3
}
 8008b36:	b004      	add	sp, #16
 8008b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b3c:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8008b3e:	b95e      	cbnz	r6, 8008b58 <HAL_UART_Transmit+0x92>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b40:	f835 2b02 	ldrh.w	r2, [r5], #2
 8008b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b48:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8008b4a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8008b4e:	3a01      	subs	r2, #1
 8008b50:	b292      	uxth	r2, r2
 8008b52:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8008b56:	e7d7      	b.n	8008b08 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b58:	f816 2b01 	ldrb.w	r2, [r6], #1
 8008b5c:	e7f4      	b.n	8008b48 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8008b5e:	2002      	movs	r0, #2
 8008b60:	e7e9      	b.n	8008b36 <HAL_UART_Transmit+0x70>
      return  HAL_ERROR;
 8008b62:	2001      	movs	r0, #1
 8008b64:	e7e7      	b.n	8008b36 <HAL_UART_Transmit+0x70>

08008b66 <UART_CheckIdleState>:
{
 8008b66:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b68:	2500      	movs	r5, #0
{
 8008b6a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b6c:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8008b70:	f7fb fa7e 	bl	8004070 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b74:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8008b76:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b78:	6812      	ldr	r2, [r2, #0]
 8008b7a:	0712      	lsls	r2, r2, #28
 8008b7c:	d40a      	bmi.n	8008b94 <UART_CheckIdleState+0x2e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b7e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8008b80:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8008b82:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 8008b86:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008b88:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b8c:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b8e:	6660      	str	r0, [r4, #100]	; 0x64
}
 8008b90:	b003      	add	sp, #12
 8008b92:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b94:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8008b98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	9200      	str	r2, [sp, #0]
 8008ba0:	462a      	mov	r2, r5
 8008ba2:	f7ff ff30 	bl	8008a06 <UART_WaitOnFlagUntilTimeout>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d0e9      	beq.n	8008b7e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8008baa:	2003      	movs	r0, #3
 8008bac:	e7f0      	b.n	8008b90 <UART_CheckIdleState+0x2a>

08008bae <HAL_UART_Init>:
{
 8008bae:	b510      	push	{r4, lr}
  if (huart == NULL)
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	b340      	cbz	r0, 8008c06 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008bb4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8008bb6:	b91b      	cbnz	r3, 8008bc0 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8008bb8:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8008bbc:	f7f9 fd04 	bl	80025c8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8008bc0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008bc2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bc4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8008bc6:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8008bc8:	6813      	ldr	r3, [r2, #0]
 8008bca:	f023 0301 	bic.w	r3, r3, #1
 8008bce:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bd0:	f7ff fd82 	bl	80086d8 <UART_SetConfig>
 8008bd4:	2801      	cmp	r0, #1
 8008bd6:	d016      	beq.n	8008c06 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bda:	b113      	cbz	r3, 8008be2 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f7ff febd 	bl	800895c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008be2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8008be4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bf4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	f042 0201 	orr.w	r2, r2, #1
}
 8008bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8008c00:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8008c02:	f7ff bfb0 	b.w	8008b66 <UART_CheckIdleState>
}
 8008c06:	2001      	movs	r0, #1
 8008c08:	bd10      	pop	{r4, pc}

08008c0a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008c0e:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 8008c12:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8008c16:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 8008c1a:	ea43 0308 	orr.w	r3, r3, r8
 8008c1e:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8008c22:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008c26:	6809      	ldr	r1, [r1, #0]
 8008c28:	b991      	cbnz	r1, 8008c50 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008c2a:	ea43 030e 	orr.w	r3, r3, lr
 8008c2e:	6801      	ldr	r1, [r0, #0]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8008c36:	ea43 030c 	orr.w	r3, r3, ip
 8008c3a:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8008c3e:	433b      	orrs	r3, r7
 8008c40:	4333      	orrs	r3, r6
 8008c42:	432b      	orrs	r3, r5
 8008c44:	4323      	orrs	r3, r4
 8008c46:	430b      	orrs	r3, r1
 8008c48:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008c50:	6801      	ldr	r1, [r0, #0]
 8008c52:	ea43 030e 	orr.w	r3, r3, lr
 8008c56:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8008c5a:	430b      	orrs	r3, r1
 8008c5c:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008c5e:	ea42 030c 	orr.w	r3, r2, ip
 8008c62:	6841      	ldr	r1, [r0, #4]
 8008c64:	433b      	orrs	r3, r7
 8008c66:	f421 42ff 	bic.w	r2, r1, #32640	; 0x7f80
 8008c6a:	4333      	orrs	r3, r6
 8008c6c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8008c70:	432b      	orrs	r3, r5
 8008c72:	4323      	orrs	r3, r4
 8008c74:	4313      	orrs	r3, r2
 8008c76:	6043      	str	r3, [r0, #4]
 8008c78:	e7e7      	b.n	8008c4a <FMC_SDRAM_Init+0x40>

08008c7a <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008c7a:	68cb      	ldr	r3, [r1, #12]
 8008c7c:	f103 3cff 	add.w	ip, r3, #4294967295
 8008c80:	694b      	ldr	r3, [r1, #20]
{
 8008c82:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008c84:	3b01      	subs	r3, #1
 8008c86:	680f      	ldr	r7, [r1, #0]
 8008c88:	684c      	ldr	r4, [r1, #4]
 8008c8a:	688e      	ldr	r6, [r1, #8]
 8008c8c:	051b      	lsls	r3, r3, #20
 8008c8e:	690d      	ldr	r5, [r1, #16]
 8008c90:	3c01      	subs	r4, #1
 8008c92:	6989      	ldr	r1, [r1, #24]
 8008c94:	3e01      	subs	r6, #1
 8008c96:	3d01      	subs	r5, #1
 8008c98:	3f01      	subs	r7, #1
 8008c9a:	3901      	subs	r1, #1
 8008c9c:	0124      	lsls	r4, r4, #4
 8008c9e:	0236      	lsls	r6, r6, #8
 8008ca0:	042d      	lsls	r5, r5, #16
 8008ca2:	0609      	lsls	r1, r1, #24
 8008ca4:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8008ca8:	b95a      	cbnz	r2, 8008cc2 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008caa:	433b      	orrs	r3, r7
 8008cac:	6882      	ldr	r2, [r0, #8]
 8008cae:	4323      	orrs	r3, r4
 8008cb0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8008cb4:	4333      	orrs	r3, r6
 8008cb6:	432b      	orrs	r3, r5
 8008cb8:	430b      	orrs	r3, r1
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008cc2:	6882      	ldr	r2, [r0, #8]
 8008cc4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008cc8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8008ccc:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008cce:	ea44 0306 	orr.w	r3, r4, r6
 8008cd2:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008cd4:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008cd6:	68c2      	ldr	r2, [r0, #12]
 8008cd8:	432b      	orrs	r3, r5
 8008cda:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8008cde:	430b      	orrs	r3, r1
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	60c3      	str	r3, [r0, #12]
 8008ce4:	e7eb      	b.n	8008cbe <FMC_SDRAM_Timing_Init+0x44>

08008ce6 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008ce6:	6902      	ldr	r2, [r0, #16]
{
 8008ce8:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008cea:	e9d1 3400 	ldrd	r3, r4, [r1]
 8008cee:	0d92      	lsrs	r2, r2, #22
 8008cf0:	4323      	orrs	r3, r4
 8008cf2:	68cc      	ldr	r4, [r1, #12]
 8008cf4:	0592      	lsls	r2, r2, #22
 8008cf6:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	688a      	ldr	r2, [r1, #8]
 8008cfe:	3a01      	subs	r2, #1
 8008d00:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8008d04:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8008d06:	2000      	movs	r0, #0
 8008d08:	bd10      	pop	{r4, pc}

08008d0a <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008d0a:	6943      	ldr	r3, [r0, #20]
 8008d0c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008d10:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8008d14:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8008d18:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	4770      	bx	lr

08008d1e <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008d1e:	b084      	sub	sp, #16
 8008d20:	b510      	push	{r4, lr}
 8008d22:	ac03      	add	r4, sp, #12
 8008d24:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008d28:	460b      	mov	r3, r1
 8008d2a:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008d2c:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8008d2e:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8008d30:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008d32:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 8008d36:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8008d38:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008d3a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 8008d3e:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8008d40:	9907      	ldr	r1, [sp, #28]
 8008d42:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8008d44:	9908      	ldr	r1, [sp, #32]
 8008d46:	430b      	orrs	r3, r1

  return HAL_OK;
}
 8008d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008d4c:	4313      	orrs	r3, r2
}
 8008d4e:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008d50:	6043      	str	r3, [r0, #4]
}
 8008d52:	2000      	movs	r0, #0
 8008d54:	4770      	bx	lr

08008d56 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008d56:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8008d5a:	4770      	bx	lr

08008d5c <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008d5c:	680b      	ldr	r3, [r1, #0]
 8008d5e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 8008d62:	2000      	movs	r0, #0
 8008d64:	4770      	bx	lr

08008d66 <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008d66:	2303      	movs	r3, #3
 8008d68:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	4770      	bx	lr

08008d6e <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008d6e:	6800      	ldr	r0, [r0, #0]
}
 8008d70:	f000 0003 	and.w	r0, r0, #3
 8008d74:	4770      	bx	lr

08008d76 <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008d76:	680b      	ldr	r3, [r1, #0]
{
 8008d78:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8008d7a:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008d7c:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d7e:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008d82:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d86:	4323      	orrs	r3, r4
                       Command->Response         |\
 8008d88:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8008d8a:	6909      	ldr	r1, [r1, #16]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008d8c:	f022 020f 	bic.w	r2, r2, #15
                       Command->Response         |\
 8008d90:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8008d92:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008d94:	4313      	orrs	r3, r2
 8008d96:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 8008d98:	2000      	movs	r0, #0
 8008d9a:	bd10      	pop	{r4, pc}

08008d9c <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008d9c:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8008d9e:	5840      	ldr	r0, [r0, r1]
}  
 8008da0:	4770      	bx	lr

08008da2 <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008da2:	680b      	ldr	r3, [r1, #0]
{
 8008da4:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008da6:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008da8:	684b      	ldr	r3, [r1, #4]
 8008daa:	6283      	str	r3, [r0, #40]	; 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008dac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008dae:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008db2:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008db6:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8008db8:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8008dba:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8008dbc:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8008dbe:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	bd10      	pop	{r4, pc}

08008dc8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008dc8:	b510      	push	{r4, lr}
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008dca:	2300      	movs	r3, #0
{
 8008dcc:	b086      	sub	sp, #24
 8008dce:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dd0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008dd2:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dd6:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dde:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008de0:	f7ff ffc9 	bl	8008d76 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008de4:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <SDMMC_CmdGoIdleState+0x48>)
 8008de6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8008df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df4:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8008df6:	3b01      	subs	r3, #1
 8008df8:	d307      	bcc.n	8008e0a <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008dfa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008dfc:	0612      	lsls	r2, r2, #24
 8008dfe:	d5fa      	bpl.n	8008df6 <SDMMC_CmdGoIdleState+0x2e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e00:	23c5      	movs	r3, #197	; 0xc5
  
  return SDMMC_ERROR_NONE;
 8008e02:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e04:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8008e06:	b006      	add	sp, #24
 8008e08:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8008e0a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8008e0e:	e7fa      	b.n	8008e06 <SDMMC_CmdGoIdleState+0x3e>
 8008e10:	20000008 	.word	0x20000008

08008e14 <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008e14:	4b45      	ldr	r3, [pc, #276]	; (8008f2c <SDMMC_GetCmdResp1+0x118>)
{
 8008e16:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008e18:	681b      	ldr	r3, [r3, #0]
{
 8008e1a:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008e1c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8008e20:	fbb3 f3f0 	udiv	r3, r3, r0
 8008e24:	435a      	muls	r2, r3
    if (count-- == 0U)
 8008e26:	2a00      	cmp	r2, #0
 8008e28:	d049      	beq.n	8008ebe <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 8008e2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e2c:	f013 0f45 	tst.w	r3, #69	; 0x45
 8008e30:	d007      	beq.n	8008e42 <SDMMC_GetCmdResp1+0x2e>
 8008e32:	051b      	lsls	r3, r3, #20
 8008e34:	d405      	bmi.n	8008e42 <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e38:	0758      	lsls	r0, r3, #29
 8008e3a:	d504      	bpl.n	8008e46 <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e3c:	2004      	movs	r0, #4
 8008e3e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8008e40:	bd10      	pop	{r4, pc}
 8008e42:	3a01      	subs	r2, #1
 8008e44:	e7ef      	b.n	8008e26 <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008e46:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008e48:	f010 0001 	ands.w	r0, r0, #1
 8008e4c:	d002      	beq.n	8008e54 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008e4e:	2301      	movs	r3, #1
 8008e50:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e52:	e7f5      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e54:	23c5      	movs	r3, #197	; 0xc5
 8008e56:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8008e58:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	4299      	cmp	r1, r3
 8008e5e:	d131      	bne.n	8008ec4 <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 8008e60:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008e62:	4833      	ldr	r0, [pc, #204]	; (8008f30 <SDMMC_GetCmdResp1+0x11c>)
 8008e64:	4018      	ands	r0, r3
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d0ea      	beq.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	db2c      	blt.n	8008ec8 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008e6e:	005a      	lsls	r2, r3, #1
 8008e70:	d42d      	bmi.n	8008ece <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008e72:	009c      	lsls	r4, r3, #2
 8008e74:	d42d      	bmi.n	8008ed2 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008e76:	00d9      	lsls	r1, r3, #3
 8008e78:	d42d      	bmi.n	8008ed6 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008e7a:	011a      	lsls	r2, r3, #4
 8008e7c:	d42e      	bmi.n	8008edc <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008e7e:	015c      	lsls	r4, r3, #5
 8008e80:	d42f      	bmi.n	8008ee2 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008e82:	01d9      	lsls	r1, r3, #7
 8008e84:	d430      	bmi.n	8008ee8 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008e86:	021a      	lsls	r2, r3, #8
 8008e88:	d431      	bmi.n	8008eee <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008e8a:	025c      	lsls	r4, r3, #9
 8008e8c:	d432      	bmi.n	8008ef4 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008e8e:	0299      	lsls	r1, r3, #10
 8008e90:	d433      	bmi.n	8008efa <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008e92:	02da      	lsls	r2, r3, #11
 8008e94:	d434      	bmi.n	8008f00 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008e96:	035c      	lsls	r4, r3, #13
 8008e98:	d435      	bmi.n	8008f06 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008e9a:	0399      	lsls	r1, r3, #14
 8008e9c:	d436      	bmi.n	8008f0c <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008e9e:	03da      	lsls	r2, r3, #15
 8008ea0:	d437      	bmi.n	8008f12 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008ea2:	041c      	lsls	r4, r3, #16
 8008ea4:	d438      	bmi.n	8008f18 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008ea6:	0459      	lsls	r1, r3, #17
 8008ea8:	d439      	bmi.n	8008f1e <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008eaa:	049a      	lsls	r2, r3, #18
 8008eac:	d43a      	bmi.n	8008f24 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008eae:	f013 0f08 	tst.w	r3, #8
 8008eb2:	bf14      	ite	ne
 8008eb4:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8008eb8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8008ebc:	e7c0      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8008ebe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008ec2:	e7bd      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	e7bb      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008ec8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8008ecc:	e7b8      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008ece:	2040      	movs	r0, #64	; 0x40
 8008ed0:	e7b6      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008ed2:	2080      	movs	r0, #128	; 0x80
 8008ed4:	e7b4      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008ed6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008eda:	e7b1      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008edc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008ee0:	e7ae      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008ee2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008ee6:	e7ab      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008ee8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008eec:	e7a8      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008eee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008ef2:	e7a5      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008ef4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008ef8:	e7a2      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008efa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008efe:	e79f      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 8008f00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008f04:	e79c      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008f06:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008f0a:	e799      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008f0c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8008f10:	e796      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008f12:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008f16:	e793      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008f18:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008f1c:	e790      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008f1e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8008f22:	e78d      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 8008f24:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8008f28:	e78a      	b.n	8008e40 <SDMMC_GetCmdResp1+0x2c>
 8008f2a:	bf00      	nop
 8008f2c:	20000008 	.word	0x20000008
 8008f30:	fdffe008 	.word	0xfdffe008

08008f34 <SDMMC_CmdBlockLength>:
{
 8008f34:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f36:	2340      	movs	r3, #64	; 0x40
{
 8008f38:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f3a:	2510      	movs	r5, #16
{
 8008f3c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f3e:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008f40:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f42:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f44:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f50:	f7ff ff11 	bl	8008d76 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f58:	4629      	mov	r1, r5
 8008f5a:	4620      	mov	r0, r4
}
 8008f5c:	b007      	add	sp, #28
 8008f5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008f62:	f7ff bf57 	b.w	8008e14 <SDMMC_GetCmdResp1>

08008f66 <SDMMC_CmdReadSingleBlock>:
{
 8008f66:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f68:	2340      	movs	r3, #64	; 0x40
{
 8008f6a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f6c:	2511      	movs	r5, #17
{
 8008f6e:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f70:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008f72:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f74:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f76:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f82:	f7ff fef8 	bl	8008d76 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	4620      	mov	r0, r4
}
 8008f8e:	b007      	add	sp, #28
 8008f90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008f94:	f7ff bf3e 	b.w	8008e14 <SDMMC_GetCmdResp1>

08008f98 <SDMMC_CmdReadMultiBlock>:
{
 8008f98:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f9a:	2340      	movs	r3, #64	; 0x40
{
 8008f9c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f9e:	2512      	movs	r5, #18
{
 8008fa0:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fa2:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008fa4:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fa6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fa8:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fb4:	f7ff fedf 	bl	8008d76 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	4620      	mov	r0, r4
}
 8008fc0:	b007      	add	sp, #28
 8008fc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008fc6:	f7ff bf25 	b.w	8008e14 <SDMMC_GetCmdResp1>

08008fca <SDMMC_CmdWriteSingleBlock>:
{
 8008fca:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fcc:	2340      	movs	r3, #64	; 0x40
{
 8008fce:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fd0:	2518      	movs	r5, #24
{
 8008fd2:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fd4:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008fd6:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fd8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fda:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fe2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fe6:	f7ff fec6 	bl	8008d76 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fee:	4629      	mov	r1, r5
 8008ff0:	4620      	mov	r0, r4
}
 8008ff2:	b007      	add	sp, #28
 8008ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008ff8:	f7ff bf0c 	b.w	8008e14 <SDMMC_GetCmdResp1>

08008ffc <SDMMC_CmdWriteMultiBlock>:
{
 8008ffc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ffe:	2340      	movs	r3, #64	; 0x40
{
 8009000:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009002:	2519      	movs	r5, #25
{
 8009004:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009006:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009008:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800900a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800900c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009014:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009018:	f7ff fead 	bl	8008d76 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800901c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009020:	4629      	mov	r1, r5
 8009022:	4620      	mov	r0, r4
}
 8009024:	b007      	add	sp, #28
 8009026:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800902a:	f7ff bef3 	b.w	8008e14 <SDMMC_GetCmdResp1>
	...

08009030 <SDMMC_CmdStopTransfer>:
{
 8009030:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009032:	2300      	movs	r3, #0
{
 8009034:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009036:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009038:	2240      	movs	r2, #64	; 0x40
{
 800903a:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800903c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800903e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009042:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800904a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800904c:	f7ff fe93 	bl	8008d76 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009050:	4a03      	ldr	r2, [pc, #12]	; (8009060 <SDMMC_CmdStopTransfer+0x30>)
 8009052:	4629      	mov	r1, r5
 8009054:	4620      	mov	r0, r4
}
 8009056:	b007      	add	sp, #28
 8009058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800905c:	f7ff beda 	b.w	8008e14 <SDMMC_GetCmdResp1>
 8009060:	05f5e100 	.word	0x05f5e100

08009064 <SDMMC_CmdSelDesel>:
{
 8009064:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009066:	2340      	movs	r3, #64	; 0x40
{
 8009068:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800906a:	2507      	movs	r5, #7
{
 800906c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800906e:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009070:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009072:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009074:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800907c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009080:	f7ff fe79 	bl	8008d76 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009084:	f241 3288 	movw	r2, #5000	; 0x1388
 8009088:	4629      	mov	r1, r5
 800908a:	4620      	mov	r0, r4
}
 800908c:	b007      	add	sp, #28
 800908e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009092:	f7ff bebf 	b.w	8008e14 <SDMMC_GetCmdResp1>

08009096 <SDMMC_CmdAppCommand>:
{
 8009096:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009098:	2340      	movs	r3, #64	; 0x40
{
 800909a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800909c:	2537      	movs	r5, #55	; 0x37
{
 800909e:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090a0:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80090a2:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090a4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090a6:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090b2:	f7ff fe60 	bl	8008d76 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80090b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ba:	4629      	mov	r1, r5
 80090bc:	4620      	mov	r0, r4
}
 80090be:	b007      	add	sp, #28
 80090c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80090c4:	f7ff bea6 	b.w	8008e14 <SDMMC_GetCmdResp1>

080090c8 <SDMMC_CmdBusWidth>:
{
 80090c8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090ca:	2340      	movs	r3, #64	; 0x40
{
 80090cc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090ce:	2506      	movs	r5, #6
{
 80090d0:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090d2:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80090d4:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090d6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090d8:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090e4:	f7ff fe47 	bl	8008d76 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80090e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ec:	4629      	mov	r1, r5
 80090ee:	4620      	mov	r0, r4
}
 80090f0:	b007      	add	sp, #28
 80090f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80090f6:	f7ff be8d 	b.w	8008e14 <SDMMC_GetCmdResp1>

080090fa <SDMMC_CmdSendSCR>:
{
 80090fa:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80090fc:	2300      	movs	r3, #0
{
 80090fe:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009100:	2533      	movs	r5, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009102:	2240      	movs	r2, #64	; 0x40
{
 8009104:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009106:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009108:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800910c:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009114:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009116:	f7ff fe2e 	bl	8008d76 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800911a:	f241 3288 	movw	r2, #5000	; 0x1388
 800911e:	4629      	mov	r1, r5
 8009120:	4620      	mov	r0, r4
}
 8009122:	b007      	add	sp, #28
 8009124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009128:	f7ff be74 	b.w	8008e14 <SDMMC_GetCmdResp1>

0800912c <SDMMC_CmdSendStatus>:
{
 800912c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800912e:	2340      	movs	r3, #64	; 0x40
{
 8009130:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009132:	250d      	movs	r5, #13
{
 8009134:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009136:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = Argument;
 8009138:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800913a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800913c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009144:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009148:	f7ff fe15 	bl	8008d76 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800914c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009150:	4629      	mov	r1, r5
 8009152:	4620      	mov	r0, r4
}
 8009154:	b007      	add	sp, #28
 8009156:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800915a:	f7ff be5b 	b.w	8008e14 <SDMMC_GetCmdResp1>
	...

08009160 <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009160:	4b11      	ldr	r3, [pc, #68]	; (80091a8 <SDMMC_GetCmdResp2+0x48>)
 8009162:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	fbb3 f3f2 	udiv	r3, r3, r2
 800916c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009170:	4353      	muls	r3, r2
    if (count-- == 0U)
 8009172:	3b01      	subs	r3, #1
 8009174:	d314      	bcc.n	80091a0 <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDMMCx->STA;
 8009176:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009178:	f012 0f45 	tst.w	r2, #69	; 0x45
 800917c:	d0f9      	beq.n	8009172 <SDMMC_GetCmdResp2+0x12>
 800917e:	0512      	lsls	r2, r2, #20
 8009180:	d4f7      	bmi.n	8009172 <SDMMC_GetCmdResp2+0x12>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009182:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009184:	075b      	lsls	r3, r3, #29
 8009186:	d503      	bpl.n	8009190 <SDMMC_GetCmdResp2+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009188:	2304      	movs	r3, #4
 800918a:	6383      	str	r3, [r0, #56]	; 0x38
}
 800918c:	4618      	mov	r0, r3
 800918e:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009190:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009192:	f013 0301 	ands.w	r3, r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009196:	bf14      	ite	ne
 8009198:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800919a:	22c5      	moveq	r2, #197	; 0xc5
 800919c:	6382      	str	r2, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800919e:	e7f5      	b.n	800918c <SDMMC_GetCmdResp2+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80091a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091a4:	e7f2      	b.n	800918c <SDMMC_GetCmdResp2+0x2c>
 80091a6:	bf00      	nop
 80091a8:	20000008 	.word	0x20000008

080091ac <SDMMC_CmdSendCID>:
{
 80091ac:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80091ae:	2300      	movs	r3, #0
{
 80091b0:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80091b2:	2202      	movs	r2, #2
{
 80091b4:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091b6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80091b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80091bc:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091be:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091c6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091c8:	f7ff fdd5 	bl	8008d76 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80091cc:	4620      	mov	r0, r4
}
 80091ce:	b006      	add	sp, #24
 80091d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80091d4:	f7ff bfc4 	b.w	8009160 <SDMMC_GetCmdResp2>

080091d8 <SDMMC_CmdSendCSD>:
{
 80091d8:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80091da:	2209      	movs	r2, #9
{
 80091dc:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80091de:	23c0      	movs	r3, #192	; 0xc0
{
 80091e0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80091e2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091e4:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80091e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091ee:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091f2:	a901      	add	r1, sp, #4
 80091f4:	f7ff fdbf 	bl	8008d76 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80091f8:	4620      	mov	r0, r4
}
 80091fa:	b006      	add	sp, #24
 80091fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009200:	f7ff bfae 	b.w	8009160 <SDMMC_GetCmdResp2>

08009204 <SDMMC_GetCmdResp3>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009204:	4b0f      	ldr	r3, [pc, #60]	; (8009244 <SDMMC_GetCmdResp3+0x40>)
 8009206:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009210:	f241 3288 	movw	r2, #5000	; 0x1388
 8009214:	4353      	muls	r3, r2
    if (count-- == 0U)
 8009216:	3b01      	subs	r3, #1
 8009218:	d310      	bcc.n	800923c <SDMMC_GetCmdResp3+0x38>
    sta_reg = SDMMCx->STA;
 800921a:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800921c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8009220:	d0f9      	beq.n	8009216 <SDMMC_GetCmdResp3+0x12>
 8009222:	0512      	lsls	r2, r2, #20
 8009224:	d4f7      	bmi.n	8009216 <SDMMC_GetCmdResp3+0x12>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009226:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009228:	f013 0304 	ands.w	r3, r3, #4
 800922c:	d003      	beq.n	8009236 <SDMMC_GetCmdResp3+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800922e:	2304      	movs	r3, #4
 8009230:	6383      	str	r3, [r0, #56]	; 0x38
}
 8009232:	4618      	mov	r0, r3
 8009234:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009236:	22c5      	movs	r2, #197	; 0xc5
 8009238:	6382      	str	r2, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800923a:	e7fa      	b.n	8009232 <SDMMC_GetCmdResp3+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800923c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009240:	e7f7      	b.n	8009232 <SDMMC_GetCmdResp3+0x2e>
 8009242:	bf00      	nop
 8009244:	20000008 	.word	0x20000008

08009248 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009248:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800924c:	2229      	movs	r2, #41	; 0x29
 800924e:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
{
 8009254:	b510      	push	{r4, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800925a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800925c:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800925e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009266:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800926a:	a901      	add	r1, sp, #4
 800926c:	f7ff fd83 	bl	8008d76 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009270:	4620      	mov	r0, r4
}
 8009272:	b006      	add	sp, #24
 8009274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009278:	f7ff bfc4 	b.w	8009204 <SDMMC_GetCmdResp3>

0800927c <SDMMC_GetCmdResp6>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800927c:	4b1f      	ldr	r3, [pc, #124]	; (80092fc <SDMMC_GetCmdResp6+0x80>)
{
 800927e:	b510      	push	{r4, lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009280:	681b      	ldr	r3, [r3, #0]
{
 8009282:	4604      	mov	r4, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009284:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8009288:	fbb3 f3f0 	udiv	r3, r3, r0
 800928c:	f241 3088 	movw	r0, #5000	; 0x1388
 8009290:	4343      	muls	r3, r0
    if (count-- == 0U)
 8009292:	3b01      	subs	r3, #1
 8009294:	d329      	bcc.n	80092ea <SDMMC_GetCmdResp6+0x6e>
    sta_reg = SDMMCx->STA;
 8009296:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009298:	f010 0f45 	tst.w	r0, #69	; 0x45
 800929c:	d0f9      	beq.n	8009292 <SDMMC_GetCmdResp6+0x16>
 800929e:	0500      	lsls	r0, r0, #20
 80092a0:	d4f7      	bmi.n	8009292 <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092a4:	0758      	lsls	r0, r3, #29
 80092a6:	d502      	bpl.n	80092ae <SDMMC_GetCmdResp6+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092a8:	2004      	movs	r0, #4
 80092aa:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80092ac:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80092b0:	f010 0001 	ands.w	r0, r0, #1
 80092b4:	d002      	beq.n	80092bc <SDMMC_GetCmdResp6+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80092b6:	2301      	movs	r3, #1
 80092b8:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092ba:	e7f7      	b.n	80092ac <SDMMC_GetCmdResp6+0x30>
  return (uint8_t)(SDMMCx->RESPCMD);
 80092bc:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	4299      	cmp	r1, r3
 80092c2:	d115      	bne.n	80092f0 <SDMMC_GetCmdResp6+0x74>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092c4:	23c5      	movs	r3, #197	; 0xc5
 80092c6:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 80092c8:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80092ca:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 80092ce:	d102      	bne.n	80092d6 <SDMMC_GetCmdResp6+0x5a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80092d0:	0c1b      	lsrs	r3, r3, #16
 80092d2:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 80092d4:	e7ea      	b.n	80092ac <SDMMC_GetCmdResp6+0x30>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80092d6:	045a      	lsls	r2, r3, #17
 80092d8:	d40c      	bmi.n	80092f4 <SDMMC_GetCmdResp6+0x78>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80092da:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80092de:	bf14      	ite	ne
 80092e0:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80092e4:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80092e8:	e7e0      	b.n	80092ac <SDMMC_GetCmdResp6+0x30>
      return SDMMC_ERROR_TIMEOUT;
 80092ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80092ee:	e7dd      	b.n	80092ac <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092f0:	2001      	movs	r0, #1
 80092f2:	e7db      	b.n	80092ac <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80092f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80092f8:	e7d8      	b.n	80092ac <SDMMC_GetCmdResp6+0x30>
 80092fa:	bf00      	nop
 80092fc:	20000008 	.word	0x20000008

08009300 <SDMMC_CmdSetRelAdd>:
{
 8009300:	b530      	push	{r4, r5, lr}
 8009302:	b089      	sub	sp, #36	; 0x24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009304:	2300      	movs	r3, #0
 8009306:	2503      	movs	r5, #3
{
 8009308:	4604      	mov	r4, r0
 800930a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800930c:	2140      	movs	r1, #64	; 0x40
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800930e:	e9cd 3503 	strd	r3, r5, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009312:	e9cd 1305 	strd	r1, r3, [sp, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009316:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800931a:	a903      	add	r1, sp, #12
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800931c:	9307      	str	r3, [sp, #28]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800931e:	f7ff fd2a 	bl	8008d76 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009322:	9a01      	ldr	r2, [sp, #4]
 8009324:	4629      	mov	r1, r5
 8009326:	4620      	mov	r0, r4
}
 8009328:	b009      	add	sp, #36	; 0x24
 800932a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800932e:	f7ff bfa5 	b.w	800927c <SDMMC_GetCmdResp6>
	...

08009334 <SDMMC_GetCmdResp7>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009334:	4b14      	ldr	r3, [pc, #80]	; (8009388 <SDMMC_GetCmdResp7+0x54>)
 8009336:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 800933a:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009342:	f241 3188 	movw	r1, #5000	; 0x1388
 8009346:	434b      	muls	r3, r1
    if (count-- == 0U)
 8009348:	3b01      	subs	r3, #1
 800934a:	d319      	bcc.n	8009380 <SDMMC_GetCmdResp7+0x4c>
    sta_reg = SDMMCx->STA;
 800934c:	6b51      	ldr	r1, [r2, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800934e:	f011 0f45 	tst.w	r1, #69	; 0x45
 8009352:	d0f9      	beq.n	8009348 <SDMMC_GetCmdResp7+0x14>
 8009354:	0509      	lsls	r1, r1, #20
 8009356:	d4f7      	bmi.n	8009348 <SDMMC_GetCmdResp7+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009358:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800935a:	075b      	lsls	r3, r3, #29
 800935c:	d502      	bpl.n	8009364 <SDMMC_GetCmdResp7+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800935e:	2004      	movs	r0, #4
 8009360:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009362:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009364:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8009366:	f011 0101 	ands.w	r1, r1, #1
 800936a:	d003      	beq.n	8009374 <SDMMC_GetCmdResp7+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800936c:	2301      	movs	r3, #1
  return SDMMC_ERROR_NONE;
 800936e:	4608      	mov	r0, r1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009370:	6393      	str	r3, [r2, #56]	; 0x38
 8009372:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009374:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8009376:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800937a:	d003      	beq.n	8009384 <SDMMC_GetCmdResp7+0x50>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800937c:	2340      	movs	r3, #64	; 0x40
 800937e:	e7f6      	b.n	800936e <SDMMC_GetCmdResp7+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 8009380:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	20000008 	.word	0x20000008

0800938c <SDMMC_CmdOperCond>:
{
 800938c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800938e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
{
 8009392:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009394:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009396:	2140      	movs	r1, #64	; 0x40
{
 8009398:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800939a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800939e:	2300      	movs	r3, #0
 80093a0:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093a8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093aa:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093ac:	f7ff fce3 	bl	8008d76 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80093b0:	4620      	mov	r0, r4
}
 80093b2:	b006      	add	sp, #24
 80093b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80093b8:	f7ff bfbc 	b.w	8009334 <SDMMC_GetCmdResp7>

080093bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80093bc:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80093be:	4903      	ldr	r1, [pc, #12]	; (80093cc <MX_FATFS_Init+0x10>)
 80093c0:	4803      	ldr	r0, [pc, #12]	; (80093d0 <MX_FATFS_Init+0x14>)
 80093c2:	f000 f899 	bl	80094f8 <FATFS_LinkDriver>
 80093c6:	4b03      	ldr	r3, [pc, #12]	; (80093d4 <MX_FATFS_Init+0x18>)
 80093c8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80093ca:	bd08      	pop	{r3, pc}
 80093cc:	20001060 	.word	0x20001060
 80093d0:	0800c48c 	.word	0x0800c48c
 80093d4:	20001064 	.word	0x20001064

080093d8 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80093d8:	4b13      	ldr	r3, [pc, #76]	; (8009428 <SD_ioctl+0x50>)
{
 80093da:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80093dc:	781c      	ldrb	r4, [r3, #0]
{
 80093de:	b089      	sub	sp, #36	; 0x24
 80093e0:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80093e2:	f014 0401 	ands.w	r4, r4, #1
 80093e6:	d11b      	bne.n	8009420 <SD_ioctl+0x48>

  switch (cmd)
 80093e8:	2903      	cmp	r1, #3
 80093ea:	d803      	bhi.n	80093f4 <SD_ioctl+0x1c>
 80093ec:	e8df f001 	tbb	[pc, r1]
 80093f0:	120c061a 	.word	0x120c061a
 80093f4:	2404      	movs	r4, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
 80093f6:	4620      	mov	r0, r4
 80093f8:	b009      	add	sp, #36	; 0x24
 80093fa:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80093fc:	4668      	mov	r0, sp
 80093fe:	f7fa fcd7 	bl	8003db0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009402:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009404:	602b      	str	r3, [r5, #0]
    break;
 8009406:	e7f6      	b.n	80093f6 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8009408:	4668      	mov	r0, sp
 800940a:	f7fa fcd1 	bl	8003db0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800940e:	9b07      	ldr	r3, [sp, #28]
 8009410:	802b      	strh	r3, [r5, #0]
    break;
 8009412:	e7f0      	b.n	80093f6 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8009414:	4668      	mov	r0, sp
 8009416:	f7fa fccb 	bl	8003db0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800941a:	9b07      	ldr	r3, [sp, #28]
 800941c:	0a5b      	lsrs	r3, r3, #9
 800941e:	e7f1      	b.n	8009404 <SD_ioctl+0x2c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009420:	2403      	movs	r4, #3
 8009422:	e7e8      	b.n	80093f6 <SD_ioctl+0x1e>
    res = RES_OK;
 8009424:	460c      	mov	r4, r1
 8009426:	e7e6      	b.n	80093f6 <SD_ioctl+0x1e>
 8009428:	20000020 	.word	0x20000020

0800942c <SD_read>:
{
 800942c:	b508      	push	{r3, lr}
 800942e:	4608      	mov	r0, r1
 8009430:	4611      	mov	r1, r2
 8009432:	461a      	mov	r2, r3
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009434:	f04f 33ff 	mov.w	r3, #4294967295
 8009438:	f7fa fb90 	bl	8003b5c <BSP_SD_ReadBlocks>
 800943c:	b920      	cbnz	r0, 8009448 <SD_read+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800943e:	f7fa fcad 	bl	8003d9c <BSP_SD_GetCardState>
 8009442:	2800      	cmp	r0, #0
 8009444:	d1fb      	bne.n	800943e <SD_read+0x12>
}
 8009446:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8009448:	2001      	movs	r0, #1
 800944a:	e7fc      	b.n	8009446 <SD_read+0x1a>

0800944c <SD_status>:
{
 800944c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800944e:	2301      	movs	r3, #1
 8009450:	4c05      	ldr	r4, [pc, #20]	; (8009468 <SD_status+0x1c>)
 8009452:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8009454:	f7fa fca2 	bl	8003d9c <BSP_SD_GetCardState>
 8009458:	b918      	cbnz	r0, 8009462 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800945a:	7823      	ldrb	r3, [r4, #0]
 800945c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009460:	7023      	strb	r3, [r4, #0]
  return Stat;
 8009462:	7820      	ldrb	r0, [r4, #0]
}
 8009464:	bd10      	pop	{r4, pc}
 8009466:	bf00      	nop
 8009468:	20000020 	.word	0x20000020

0800946c <SD_write>:
{
 800946c:	b508      	push	{r3, lr}
 800946e:	4608      	mov	r0, r1
 8009470:	4611      	mov	r1, r2
 8009472:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009474:	f04f 33ff 	mov.w	r3, #4294967295
 8009478:	f7fa fb80 	bl	8003b7c <BSP_SD_WriteBlocks>
 800947c:	b920      	cbnz	r0, 8009488 <SD_write+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800947e:	f7fa fc8d 	bl	8003d9c <BSP_SD_GetCardState>
 8009482:	2800      	cmp	r0, #0
 8009484:	d1fb      	bne.n	800947e <SD_write+0x12>
}
 8009486:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8009488:	2001      	movs	r0, #1
 800948a:	e7fc      	b.n	8009486 <SD_write+0x1a>

0800948c <SD_initialize>:
{
 800948c:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800948e:	4c09      	ldr	r4, [pc, #36]	; (80094b4 <SD_initialize+0x28>)
 8009490:	2501      	movs	r5, #1
 8009492:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_Init() == MSD_OK)
 8009494:	f7fa fc56 	bl	8003d44 <BSP_SD_Init>
 8009498:	b950      	cbnz	r0, 80094b0 <SD_initialize+0x24>
  Stat = STA_NOINIT;
 800949a:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800949c:	f7fa fc7e 	bl	8003d9c <BSP_SD_GetCardState>
 80094a0:	b918      	cbnz	r0, 80094aa <SD_initialize+0x1e>
    Stat &= ~STA_NOINIT;
 80094a2:	7823      	ldrb	r3, [r4, #0]
 80094a4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80094a8:	7023      	strb	r3, [r4, #0]
  return Stat;
 80094aa:	7823      	ldrb	r3, [r4, #0]
 80094ac:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 80094ae:	7023      	strb	r3, [r4, #0]
  return Stat;
 80094b0:	7820      	ldrb	r0, [r4, #0]
}
 80094b2:	bd38      	pop	{r3, r4, r5, pc}
 80094b4:	20000020 	.word	0x20000020

080094b8 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80094b8:	4b0e      	ldr	r3, [pc, #56]	; (80094f4 <FATFS_LinkDriverEx+0x3c>)
{
 80094ba:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 80094bc:	7a5d      	ldrb	r5, [r3, #9]
 80094be:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 80094c2:	b9ad      	cbnz	r5, 80094f0 <FATFS_LinkDriverEx+0x38>
  {
    disk.is_initialized[disk.nbr] = 0;
 80094c4:	7a5d      	ldrb	r5, [r3, #9]
 80094c6:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 80094c8:	7a5d      	ldrb	r5, [r3, #9]
 80094ca:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80094ce:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 80094d0:	7a58      	ldrb	r0, [r3, #9]
 80094d2:	4418      	add	r0, r3
 80094d4:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 80094d6:	7a5a      	ldrb	r2, [r3, #9]
 80094d8:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 80094da:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 80094dc:	b2c0      	uxtb	r0, r0
 80094de:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 80094e0:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 80094e2:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80094e4:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80094e6:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 80094e8:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 80094ea:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 80094ec:	4620      	mov	r0, r4
 80094ee:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80094f0:	2401      	movs	r4, #1
 80094f2:	e7fb      	b.n	80094ec <FATFS_LinkDriverEx+0x34>
 80094f4:	20001068 	.word	0x20001068

080094f8 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 80094f8:	2200      	movs	r2, #0
 80094fa:	f7ff bfdd 	b.w	80094b8 <FATFS_LinkDriverEx>

080094fe <__cvt>:
 80094fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009502:	ec55 4b10 	vmov	r4, r5, d0
 8009506:	2d00      	cmp	r5, #0
 8009508:	460e      	mov	r6, r1
 800950a:	4619      	mov	r1, r3
 800950c:	462b      	mov	r3, r5
 800950e:	bfbb      	ittet	lt
 8009510:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009514:	461d      	movlt	r5, r3
 8009516:	2300      	movge	r3, #0
 8009518:	232d      	movlt	r3, #45	; 0x2d
 800951a:	700b      	strb	r3, [r1, #0]
 800951c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800951e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009522:	4691      	mov	r9, r2
 8009524:	f023 0820 	bic.w	r8, r3, #32
 8009528:	bfbc      	itt	lt
 800952a:	4622      	movlt	r2, r4
 800952c:	4614      	movlt	r4, r2
 800952e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009532:	d005      	beq.n	8009540 <__cvt+0x42>
 8009534:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009538:	d100      	bne.n	800953c <__cvt+0x3e>
 800953a:	3601      	adds	r6, #1
 800953c:	2102      	movs	r1, #2
 800953e:	e000      	b.n	8009542 <__cvt+0x44>
 8009540:	2103      	movs	r1, #3
 8009542:	ab03      	add	r3, sp, #12
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	ab02      	add	r3, sp, #8
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	ec45 4b10 	vmov	d0, r4, r5
 800954e:	4653      	mov	r3, sl
 8009550:	4632      	mov	r2, r6
 8009552:	f000 ff39 	bl	800a3c8 <_dtoa_r>
 8009556:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800955a:	4607      	mov	r7, r0
 800955c:	d102      	bne.n	8009564 <__cvt+0x66>
 800955e:	f019 0f01 	tst.w	r9, #1
 8009562:	d022      	beq.n	80095aa <__cvt+0xac>
 8009564:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009568:	eb07 0906 	add.w	r9, r7, r6
 800956c:	d110      	bne.n	8009590 <__cvt+0x92>
 800956e:	783b      	ldrb	r3, [r7, #0]
 8009570:	2b30      	cmp	r3, #48	; 0x30
 8009572:	d10a      	bne.n	800958a <__cvt+0x8c>
 8009574:	2200      	movs	r2, #0
 8009576:	2300      	movs	r3, #0
 8009578:	4620      	mov	r0, r4
 800957a:	4629      	mov	r1, r5
 800957c:	f7f7 fac4 	bl	8000b08 <__aeabi_dcmpeq>
 8009580:	b918      	cbnz	r0, 800958a <__cvt+0x8c>
 8009582:	f1c6 0601 	rsb	r6, r6, #1
 8009586:	f8ca 6000 	str.w	r6, [sl]
 800958a:	f8da 3000 	ldr.w	r3, [sl]
 800958e:	4499      	add	r9, r3
 8009590:	2200      	movs	r2, #0
 8009592:	2300      	movs	r3, #0
 8009594:	4620      	mov	r0, r4
 8009596:	4629      	mov	r1, r5
 8009598:	f7f7 fab6 	bl	8000b08 <__aeabi_dcmpeq>
 800959c:	b108      	cbz	r0, 80095a2 <__cvt+0xa4>
 800959e:	f8cd 900c 	str.w	r9, [sp, #12]
 80095a2:	2230      	movs	r2, #48	; 0x30
 80095a4:	9b03      	ldr	r3, [sp, #12]
 80095a6:	454b      	cmp	r3, r9
 80095a8:	d307      	bcc.n	80095ba <__cvt+0xbc>
 80095aa:	9b03      	ldr	r3, [sp, #12]
 80095ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095ae:	1bdb      	subs	r3, r3, r7
 80095b0:	4638      	mov	r0, r7
 80095b2:	6013      	str	r3, [r2, #0]
 80095b4:	b004      	add	sp, #16
 80095b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ba:	1c59      	adds	r1, r3, #1
 80095bc:	9103      	str	r1, [sp, #12]
 80095be:	701a      	strb	r2, [r3, #0]
 80095c0:	e7f0      	b.n	80095a4 <__cvt+0xa6>

080095c2 <__exponent>:
 80095c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095c4:	4603      	mov	r3, r0
 80095c6:	2900      	cmp	r1, #0
 80095c8:	bfb8      	it	lt
 80095ca:	4249      	neglt	r1, r1
 80095cc:	f803 2b02 	strb.w	r2, [r3], #2
 80095d0:	bfb4      	ite	lt
 80095d2:	222d      	movlt	r2, #45	; 0x2d
 80095d4:	222b      	movge	r2, #43	; 0x2b
 80095d6:	2909      	cmp	r1, #9
 80095d8:	7042      	strb	r2, [r0, #1]
 80095da:	dd2a      	ble.n	8009632 <__exponent+0x70>
 80095dc:	f10d 0207 	add.w	r2, sp, #7
 80095e0:	4617      	mov	r7, r2
 80095e2:	260a      	movs	r6, #10
 80095e4:	4694      	mov	ip, r2
 80095e6:	fb91 f5f6 	sdiv	r5, r1, r6
 80095ea:	fb06 1415 	mls	r4, r6, r5, r1
 80095ee:	3430      	adds	r4, #48	; 0x30
 80095f0:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80095f4:	460c      	mov	r4, r1
 80095f6:	2c63      	cmp	r4, #99	; 0x63
 80095f8:	f102 32ff 	add.w	r2, r2, #4294967295
 80095fc:	4629      	mov	r1, r5
 80095fe:	dcf1      	bgt.n	80095e4 <__exponent+0x22>
 8009600:	3130      	adds	r1, #48	; 0x30
 8009602:	f1ac 0402 	sub.w	r4, ip, #2
 8009606:	f802 1c01 	strb.w	r1, [r2, #-1]
 800960a:	1c41      	adds	r1, r0, #1
 800960c:	4622      	mov	r2, r4
 800960e:	42ba      	cmp	r2, r7
 8009610:	d30a      	bcc.n	8009628 <__exponent+0x66>
 8009612:	f10d 0209 	add.w	r2, sp, #9
 8009616:	eba2 020c 	sub.w	r2, r2, ip
 800961a:	42bc      	cmp	r4, r7
 800961c:	bf88      	it	hi
 800961e:	2200      	movhi	r2, #0
 8009620:	4413      	add	r3, r2
 8009622:	1a18      	subs	r0, r3, r0
 8009624:	b003      	add	sp, #12
 8009626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009628:	f812 5b01 	ldrb.w	r5, [r2], #1
 800962c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009630:	e7ed      	b.n	800960e <__exponent+0x4c>
 8009632:	2330      	movs	r3, #48	; 0x30
 8009634:	3130      	adds	r1, #48	; 0x30
 8009636:	7083      	strb	r3, [r0, #2]
 8009638:	70c1      	strb	r1, [r0, #3]
 800963a:	1d03      	adds	r3, r0, #4
 800963c:	e7f1      	b.n	8009622 <__exponent+0x60>
	...

08009640 <_printf_float>:
 8009640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009644:	ed2d 8b02 	vpush	{d8}
 8009648:	b08d      	sub	sp, #52	; 0x34
 800964a:	460c      	mov	r4, r1
 800964c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009650:	4616      	mov	r6, r2
 8009652:	461f      	mov	r7, r3
 8009654:	4605      	mov	r5, r0
 8009656:	f000 fdb7 	bl	800a1c8 <_localeconv_r>
 800965a:	f8d0 a000 	ldr.w	sl, [r0]
 800965e:	4650      	mov	r0, sl
 8009660:	f7f6 fe26 	bl	80002b0 <strlen>
 8009664:	2300      	movs	r3, #0
 8009666:	930a      	str	r3, [sp, #40]	; 0x28
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	9305      	str	r3, [sp, #20]
 800966c:	f8d8 3000 	ldr.w	r3, [r8]
 8009670:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009674:	3307      	adds	r3, #7
 8009676:	f023 0307 	bic.w	r3, r3, #7
 800967a:	f103 0208 	add.w	r2, r3, #8
 800967e:	f8c8 2000 	str.w	r2, [r8]
 8009682:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009686:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800968a:	9307      	str	r3, [sp, #28]
 800968c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009690:	ee08 0a10 	vmov	s16, r0
 8009694:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009698:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800969c:	4b9e      	ldr	r3, [pc, #632]	; (8009918 <_printf_float+0x2d8>)
 800969e:	f04f 32ff 	mov.w	r2, #4294967295
 80096a2:	f7f7 fa63 	bl	8000b6c <__aeabi_dcmpun>
 80096a6:	bb88      	cbnz	r0, 800970c <_printf_float+0xcc>
 80096a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096ac:	4b9a      	ldr	r3, [pc, #616]	; (8009918 <_printf_float+0x2d8>)
 80096ae:	f04f 32ff 	mov.w	r2, #4294967295
 80096b2:	f7f7 fa3d 	bl	8000b30 <__aeabi_dcmple>
 80096b6:	bb48      	cbnz	r0, 800970c <_printf_float+0xcc>
 80096b8:	2200      	movs	r2, #0
 80096ba:	2300      	movs	r3, #0
 80096bc:	4640      	mov	r0, r8
 80096be:	4649      	mov	r1, r9
 80096c0:	f7f7 fa2c 	bl	8000b1c <__aeabi_dcmplt>
 80096c4:	b110      	cbz	r0, 80096cc <_printf_float+0x8c>
 80096c6:	232d      	movs	r3, #45	; 0x2d
 80096c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096cc:	4a93      	ldr	r2, [pc, #588]	; (800991c <_printf_float+0x2dc>)
 80096ce:	4b94      	ldr	r3, [pc, #592]	; (8009920 <_printf_float+0x2e0>)
 80096d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80096d4:	bf94      	ite	ls
 80096d6:	4690      	movls	r8, r2
 80096d8:	4698      	movhi	r8, r3
 80096da:	2303      	movs	r3, #3
 80096dc:	6123      	str	r3, [r4, #16]
 80096de:	9b05      	ldr	r3, [sp, #20]
 80096e0:	f023 0304 	bic.w	r3, r3, #4
 80096e4:	6023      	str	r3, [r4, #0]
 80096e6:	f04f 0900 	mov.w	r9, #0
 80096ea:	9700      	str	r7, [sp, #0]
 80096ec:	4633      	mov	r3, r6
 80096ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80096f0:	4621      	mov	r1, r4
 80096f2:	4628      	mov	r0, r5
 80096f4:	f000 f9da 	bl	8009aac <_printf_common>
 80096f8:	3001      	adds	r0, #1
 80096fa:	f040 8090 	bne.w	800981e <_printf_float+0x1de>
 80096fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009702:	b00d      	add	sp, #52	; 0x34
 8009704:	ecbd 8b02 	vpop	{d8}
 8009708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800970c:	4642      	mov	r2, r8
 800970e:	464b      	mov	r3, r9
 8009710:	4640      	mov	r0, r8
 8009712:	4649      	mov	r1, r9
 8009714:	f7f7 fa2a 	bl	8000b6c <__aeabi_dcmpun>
 8009718:	b140      	cbz	r0, 800972c <_printf_float+0xec>
 800971a:	464b      	mov	r3, r9
 800971c:	2b00      	cmp	r3, #0
 800971e:	bfbc      	itt	lt
 8009720:	232d      	movlt	r3, #45	; 0x2d
 8009722:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009726:	4a7f      	ldr	r2, [pc, #508]	; (8009924 <_printf_float+0x2e4>)
 8009728:	4b7f      	ldr	r3, [pc, #508]	; (8009928 <_printf_float+0x2e8>)
 800972a:	e7d1      	b.n	80096d0 <_printf_float+0x90>
 800972c:	6863      	ldr	r3, [r4, #4]
 800972e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009732:	9206      	str	r2, [sp, #24]
 8009734:	1c5a      	adds	r2, r3, #1
 8009736:	d13f      	bne.n	80097b8 <_printf_float+0x178>
 8009738:	2306      	movs	r3, #6
 800973a:	6063      	str	r3, [r4, #4]
 800973c:	9b05      	ldr	r3, [sp, #20]
 800973e:	6861      	ldr	r1, [r4, #4]
 8009740:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009744:	2300      	movs	r3, #0
 8009746:	9303      	str	r3, [sp, #12]
 8009748:	ab0a      	add	r3, sp, #40	; 0x28
 800974a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800974e:	ab09      	add	r3, sp, #36	; 0x24
 8009750:	ec49 8b10 	vmov	d0, r8, r9
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	6022      	str	r2, [r4, #0]
 8009758:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800975c:	4628      	mov	r0, r5
 800975e:	f7ff fece 	bl	80094fe <__cvt>
 8009762:	9b06      	ldr	r3, [sp, #24]
 8009764:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009766:	2b47      	cmp	r3, #71	; 0x47
 8009768:	4680      	mov	r8, r0
 800976a:	d108      	bne.n	800977e <_printf_float+0x13e>
 800976c:	1cc8      	adds	r0, r1, #3
 800976e:	db02      	blt.n	8009776 <_printf_float+0x136>
 8009770:	6863      	ldr	r3, [r4, #4]
 8009772:	4299      	cmp	r1, r3
 8009774:	dd41      	ble.n	80097fa <_printf_float+0x1ba>
 8009776:	f1ab 0302 	sub.w	r3, fp, #2
 800977a:	fa5f fb83 	uxtb.w	fp, r3
 800977e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009782:	d820      	bhi.n	80097c6 <_printf_float+0x186>
 8009784:	3901      	subs	r1, #1
 8009786:	465a      	mov	r2, fp
 8009788:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800978c:	9109      	str	r1, [sp, #36]	; 0x24
 800978e:	f7ff ff18 	bl	80095c2 <__exponent>
 8009792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009794:	1813      	adds	r3, r2, r0
 8009796:	2a01      	cmp	r2, #1
 8009798:	4681      	mov	r9, r0
 800979a:	6123      	str	r3, [r4, #16]
 800979c:	dc02      	bgt.n	80097a4 <_printf_float+0x164>
 800979e:	6822      	ldr	r2, [r4, #0]
 80097a0:	07d2      	lsls	r2, r2, #31
 80097a2:	d501      	bpl.n	80097a8 <_printf_float+0x168>
 80097a4:	3301      	adds	r3, #1
 80097a6:	6123      	str	r3, [r4, #16]
 80097a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d09c      	beq.n	80096ea <_printf_float+0xaa>
 80097b0:	232d      	movs	r3, #45	; 0x2d
 80097b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097b6:	e798      	b.n	80096ea <_printf_float+0xaa>
 80097b8:	9a06      	ldr	r2, [sp, #24]
 80097ba:	2a47      	cmp	r2, #71	; 0x47
 80097bc:	d1be      	bne.n	800973c <_printf_float+0xfc>
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1bc      	bne.n	800973c <_printf_float+0xfc>
 80097c2:	2301      	movs	r3, #1
 80097c4:	e7b9      	b.n	800973a <_printf_float+0xfa>
 80097c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80097ca:	d118      	bne.n	80097fe <_printf_float+0x1be>
 80097cc:	2900      	cmp	r1, #0
 80097ce:	6863      	ldr	r3, [r4, #4]
 80097d0:	dd0b      	ble.n	80097ea <_printf_float+0x1aa>
 80097d2:	6121      	str	r1, [r4, #16]
 80097d4:	b913      	cbnz	r3, 80097dc <_printf_float+0x19c>
 80097d6:	6822      	ldr	r2, [r4, #0]
 80097d8:	07d0      	lsls	r0, r2, #31
 80097da:	d502      	bpl.n	80097e2 <_printf_float+0x1a2>
 80097dc:	3301      	adds	r3, #1
 80097de:	440b      	add	r3, r1
 80097e0:	6123      	str	r3, [r4, #16]
 80097e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80097e4:	f04f 0900 	mov.w	r9, #0
 80097e8:	e7de      	b.n	80097a8 <_printf_float+0x168>
 80097ea:	b913      	cbnz	r3, 80097f2 <_printf_float+0x1b2>
 80097ec:	6822      	ldr	r2, [r4, #0]
 80097ee:	07d2      	lsls	r2, r2, #31
 80097f0:	d501      	bpl.n	80097f6 <_printf_float+0x1b6>
 80097f2:	3302      	adds	r3, #2
 80097f4:	e7f4      	b.n	80097e0 <_printf_float+0x1a0>
 80097f6:	2301      	movs	r3, #1
 80097f8:	e7f2      	b.n	80097e0 <_printf_float+0x1a0>
 80097fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80097fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009800:	4299      	cmp	r1, r3
 8009802:	db05      	blt.n	8009810 <_printf_float+0x1d0>
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	6121      	str	r1, [r4, #16]
 8009808:	07d8      	lsls	r0, r3, #31
 800980a:	d5ea      	bpl.n	80097e2 <_printf_float+0x1a2>
 800980c:	1c4b      	adds	r3, r1, #1
 800980e:	e7e7      	b.n	80097e0 <_printf_float+0x1a0>
 8009810:	2900      	cmp	r1, #0
 8009812:	bfd4      	ite	le
 8009814:	f1c1 0202 	rsble	r2, r1, #2
 8009818:	2201      	movgt	r2, #1
 800981a:	4413      	add	r3, r2
 800981c:	e7e0      	b.n	80097e0 <_printf_float+0x1a0>
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	055a      	lsls	r2, r3, #21
 8009822:	d407      	bmi.n	8009834 <_printf_float+0x1f4>
 8009824:	6923      	ldr	r3, [r4, #16]
 8009826:	4642      	mov	r2, r8
 8009828:	4631      	mov	r1, r6
 800982a:	4628      	mov	r0, r5
 800982c:	47b8      	blx	r7
 800982e:	3001      	adds	r0, #1
 8009830:	d12c      	bne.n	800988c <_printf_float+0x24c>
 8009832:	e764      	b.n	80096fe <_printf_float+0xbe>
 8009834:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009838:	f240 80e0 	bls.w	80099fc <_printf_float+0x3bc>
 800983c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009840:	2200      	movs	r2, #0
 8009842:	2300      	movs	r3, #0
 8009844:	f7f7 f960 	bl	8000b08 <__aeabi_dcmpeq>
 8009848:	2800      	cmp	r0, #0
 800984a:	d034      	beq.n	80098b6 <_printf_float+0x276>
 800984c:	4a37      	ldr	r2, [pc, #220]	; (800992c <_printf_float+0x2ec>)
 800984e:	2301      	movs	r3, #1
 8009850:	4631      	mov	r1, r6
 8009852:	4628      	mov	r0, r5
 8009854:	47b8      	blx	r7
 8009856:	3001      	adds	r0, #1
 8009858:	f43f af51 	beq.w	80096fe <_printf_float+0xbe>
 800985c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009860:	429a      	cmp	r2, r3
 8009862:	db02      	blt.n	800986a <_printf_float+0x22a>
 8009864:	6823      	ldr	r3, [r4, #0]
 8009866:	07d8      	lsls	r0, r3, #31
 8009868:	d510      	bpl.n	800988c <_printf_float+0x24c>
 800986a:	ee18 3a10 	vmov	r3, s16
 800986e:	4652      	mov	r2, sl
 8009870:	4631      	mov	r1, r6
 8009872:	4628      	mov	r0, r5
 8009874:	47b8      	blx	r7
 8009876:	3001      	adds	r0, #1
 8009878:	f43f af41 	beq.w	80096fe <_printf_float+0xbe>
 800987c:	f04f 0800 	mov.w	r8, #0
 8009880:	f104 091a 	add.w	r9, r4, #26
 8009884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009886:	3b01      	subs	r3, #1
 8009888:	4543      	cmp	r3, r8
 800988a:	dc09      	bgt.n	80098a0 <_printf_float+0x260>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	079b      	lsls	r3, r3, #30
 8009890:	f100 8107 	bmi.w	8009aa2 <_printf_float+0x462>
 8009894:	68e0      	ldr	r0, [r4, #12]
 8009896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009898:	4298      	cmp	r0, r3
 800989a:	bfb8      	it	lt
 800989c:	4618      	movlt	r0, r3
 800989e:	e730      	b.n	8009702 <_printf_float+0xc2>
 80098a0:	2301      	movs	r3, #1
 80098a2:	464a      	mov	r2, r9
 80098a4:	4631      	mov	r1, r6
 80098a6:	4628      	mov	r0, r5
 80098a8:	47b8      	blx	r7
 80098aa:	3001      	adds	r0, #1
 80098ac:	f43f af27 	beq.w	80096fe <_printf_float+0xbe>
 80098b0:	f108 0801 	add.w	r8, r8, #1
 80098b4:	e7e6      	b.n	8009884 <_printf_float+0x244>
 80098b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	dc39      	bgt.n	8009930 <_printf_float+0x2f0>
 80098bc:	4a1b      	ldr	r2, [pc, #108]	; (800992c <_printf_float+0x2ec>)
 80098be:	2301      	movs	r3, #1
 80098c0:	4631      	mov	r1, r6
 80098c2:	4628      	mov	r0, r5
 80098c4:	47b8      	blx	r7
 80098c6:	3001      	adds	r0, #1
 80098c8:	f43f af19 	beq.w	80096fe <_printf_float+0xbe>
 80098cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80098d0:	4313      	orrs	r3, r2
 80098d2:	d102      	bne.n	80098da <_printf_float+0x29a>
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	07d9      	lsls	r1, r3, #31
 80098d8:	d5d8      	bpl.n	800988c <_printf_float+0x24c>
 80098da:	ee18 3a10 	vmov	r3, s16
 80098de:	4652      	mov	r2, sl
 80098e0:	4631      	mov	r1, r6
 80098e2:	4628      	mov	r0, r5
 80098e4:	47b8      	blx	r7
 80098e6:	3001      	adds	r0, #1
 80098e8:	f43f af09 	beq.w	80096fe <_printf_float+0xbe>
 80098ec:	f04f 0900 	mov.w	r9, #0
 80098f0:	f104 0a1a 	add.w	sl, r4, #26
 80098f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f6:	425b      	negs	r3, r3
 80098f8:	454b      	cmp	r3, r9
 80098fa:	dc01      	bgt.n	8009900 <_printf_float+0x2c0>
 80098fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098fe:	e792      	b.n	8009826 <_printf_float+0x1e6>
 8009900:	2301      	movs	r3, #1
 8009902:	4652      	mov	r2, sl
 8009904:	4631      	mov	r1, r6
 8009906:	4628      	mov	r0, r5
 8009908:	47b8      	blx	r7
 800990a:	3001      	adds	r0, #1
 800990c:	f43f aef7 	beq.w	80096fe <_printf_float+0xbe>
 8009910:	f109 0901 	add.w	r9, r9, #1
 8009914:	e7ee      	b.n	80098f4 <_printf_float+0x2b4>
 8009916:	bf00      	nop
 8009918:	7fefffff 	.word	0x7fefffff
 800991c:	0800c4a0 	.word	0x0800c4a0
 8009920:	0800c4a4 	.word	0x0800c4a4
 8009924:	0800c4a8 	.word	0x0800c4a8
 8009928:	0800c4ac 	.word	0x0800c4ac
 800992c:	0800c4b0 	.word	0x0800c4b0
 8009930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009932:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009934:	429a      	cmp	r2, r3
 8009936:	bfa8      	it	ge
 8009938:	461a      	movge	r2, r3
 800993a:	2a00      	cmp	r2, #0
 800993c:	4691      	mov	r9, r2
 800993e:	dc37      	bgt.n	80099b0 <_printf_float+0x370>
 8009940:	f04f 0b00 	mov.w	fp, #0
 8009944:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009948:	f104 021a 	add.w	r2, r4, #26
 800994c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800994e:	9305      	str	r3, [sp, #20]
 8009950:	eba3 0309 	sub.w	r3, r3, r9
 8009954:	455b      	cmp	r3, fp
 8009956:	dc33      	bgt.n	80099c0 <_printf_float+0x380>
 8009958:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800995c:	429a      	cmp	r2, r3
 800995e:	db3b      	blt.n	80099d8 <_printf_float+0x398>
 8009960:	6823      	ldr	r3, [r4, #0]
 8009962:	07da      	lsls	r2, r3, #31
 8009964:	d438      	bmi.n	80099d8 <_printf_float+0x398>
 8009966:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800996a:	eba2 0903 	sub.w	r9, r2, r3
 800996e:	9b05      	ldr	r3, [sp, #20]
 8009970:	1ad2      	subs	r2, r2, r3
 8009972:	4591      	cmp	r9, r2
 8009974:	bfa8      	it	ge
 8009976:	4691      	movge	r9, r2
 8009978:	f1b9 0f00 	cmp.w	r9, #0
 800997c:	dc35      	bgt.n	80099ea <_printf_float+0x3aa>
 800997e:	f04f 0800 	mov.w	r8, #0
 8009982:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009986:	f104 0a1a 	add.w	sl, r4, #26
 800998a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800998e:	1a9b      	subs	r3, r3, r2
 8009990:	eba3 0309 	sub.w	r3, r3, r9
 8009994:	4543      	cmp	r3, r8
 8009996:	f77f af79 	ble.w	800988c <_printf_float+0x24c>
 800999a:	2301      	movs	r3, #1
 800999c:	4652      	mov	r2, sl
 800999e:	4631      	mov	r1, r6
 80099a0:	4628      	mov	r0, r5
 80099a2:	47b8      	blx	r7
 80099a4:	3001      	adds	r0, #1
 80099a6:	f43f aeaa 	beq.w	80096fe <_printf_float+0xbe>
 80099aa:	f108 0801 	add.w	r8, r8, #1
 80099ae:	e7ec      	b.n	800998a <_printf_float+0x34a>
 80099b0:	4613      	mov	r3, r2
 80099b2:	4631      	mov	r1, r6
 80099b4:	4642      	mov	r2, r8
 80099b6:	4628      	mov	r0, r5
 80099b8:	47b8      	blx	r7
 80099ba:	3001      	adds	r0, #1
 80099bc:	d1c0      	bne.n	8009940 <_printf_float+0x300>
 80099be:	e69e      	b.n	80096fe <_printf_float+0xbe>
 80099c0:	2301      	movs	r3, #1
 80099c2:	4631      	mov	r1, r6
 80099c4:	4628      	mov	r0, r5
 80099c6:	9205      	str	r2, [sp, #20]
 80099c8:	47b8      	blx	r7
 80099ca:	3001      	adds	r0, #1
 80099cc:	f43f ae97 	beq.w	80096fe <_printf_float+0xbe>
 80099d0:	9a05      	ldr	r2, [sp, #20]
 80099d2:	f10b 0b01 	add.w	fp, fp, #1
 80099d6:	e7b9      	b.n	800994c <_printf_float+0x30c>
 80099d8:	ee18 3a10 	vmov	r3, s16
 80099dc:	4652      	mov	r2, sl
 80099de:	4631      	mov	r1, r6
 80099e0:	4628      	mov	r0, r5
 80099e2:	47b8      	blx	r7
 80099e4:	3001      	adds	r0, #1
 80099e6:	d1be      	bne.n	8009966 <_printf_float+0x326>
 80099e8:	e689      	b.n	80096fe <_printf_float+0xbe>
 80099ea:	9a05      	ldr	r2, [sp, #20]
 80099ec:	464b      	mov	r3, r9
 80099ee:	4442      	add	r2, r8
 80099f0:	4631      	mov	r1, r6
 80099f2:	4628      	mov	r0, r5
 80099f4:	47b8      	blx	r7
 80099f6:	3001      	adds	r0, #1
 80099f8:	d1c1      	bne.n	800997e <_printf_float+0x33e>
 80099fa:	e680      	b.n	80096fe <_printf_float+0xbe>
 80099fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099fe:	2a01      	cmp	r2, #1
 8009a00:	dc01      	bgt.n	8009a06 <_printf_float+0x3c6>
 8009a02:	07db      	lsls	r3, r3, #31
 8009a04:	d53a      	bpl.n	8009a7c <_printf_float+0x43c>
 8009a06:	2301      	movs	r3, #1
 8009a08:	4642      	mov	r2, r8
 8009a0a:	4631      	mov	r1, r6
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	47b8      	blx	r7
 8009a10:	3001      	adds	r0, #1
 8009a12:	f43f ae74 	beq.w	80096fe <_printf_float+0xbe>
 8009a16:	ee18 3a10 	vmov	r3, s16
 8009a1a:	4652      	mov	r2, sl
 8009a1c:	4631      	mov	r1, r6
 8009a1e:	4628      	mov	r0, r5
 8009a20:	47b8      	blx	r7
 8009a22:	3001      	adds	r0, #1
 8009a24:	f43f ae6b 	beq.w	80096fe <_printf_float+0xbe>
 8009a28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	2300      	movs	r3, #0
 8009a30:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009a34:	f7f7 f868 	bl	8000b08 <__aeabi_dcmpeq>
 8009a38:	b9d8      	cbnz	r0, 8009a72 <_printf_float+0x432>
 8009a3a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009a3e:	f108 0201 	add.w	r2, r8, #1
 8009a42:	4631      	mov	r1, r6
 8009a44:	4628      	mov	r0, r5
 8009a46:	47b8      	blx	r7
 8009a48:	3001      	adds	r0, #1
 8009a4a:	d10e      	bne.n	8009a6a <_printf_float+0x42a>
 8009a4c:	e657      	b.n	80096fe <_printf_float+0xbe>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	4652      	mov	r2, sl
 8009a52:	4631      	mov	r1, r6
 8009a54:	4628      	mov	r0, r5
 8009a56:	47b8      	blx	r7
 8009a58:	3001      	adds	r0, #1
 8009a5a:	f43f ae50 	beq.w	80096fe <_printf_float+0xbe>
 8009a5e:	f108 0801 	add.w	r8, r8, #1
 8009a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a64:	3b01      	subs	r3, #1
 8009a66:	4543      	cmp	r3, r8
 8009a68:	dcf1      	bgt.n	8009a4e <_printf_float+0x40e>
 8009a6a:	464b      	mov	r3, r9
 8009a6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a70:	e6da      	b.n	8009828 <_printf_float+0x1e8>
 8009a72:	f04f 0800 	mov.w	r8, #0
 8009a76:	f104 0a1a 	add.w	sl, r4, #26
 8009a7a:	e7f2      	b.n	8009a62 <_printf_float+0x422>
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	4642      	mov	r2, r8
 8009a80:	e7df      	b.n	8009a42 <_printf_float+0x402>
 8009a82:	2301      	movs	r3, #1
 8009a84:	464a      	mov	r2, r9
 8009a86:	4631      	mov	r1, r6
 8009a88:	4628      	mov	r0, r5
 8009a8a:	47b8      	blx	r7
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	f43f ae36 	beq.w	80096fe <_printf_float+0xbe>
 8009a92:	f108 0801 	add.w	r8, r8, #1
 8009a96:	68e3      	ldr	r3, [r4, #12]
 8009a98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a9a:	1a5b      	subs	r3, r3, r1
 8009a9c:	4543      	cmp	r3, r8
 8009a9e:	dcf0      	bgt.n	8009a82 <_printf_float+0x442>
 8009aa0:	e6f8      	b.n	8009894 <_printf_float+0x254>
 8009aa2:	f04f 0800 	mov.w	r8, #0
 8009aa6:	f104 0919 	add.w	r9, r4, #25
 8009aaa:	e7f4      	b.n	8009a96 <_printf_float+0x456>

08009aac <_printf_common>:
 8009aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab0:	4616      	mov	r6, r2
 8009ab2:	4699      	mov	r9, r3
 8009ab4:	688a      	ldr	r2, [r1, #8]
 8009ab6:	690b      	ldr	r3, [r1, #16]
 8009ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009abc:	4293      	cmp	r3, r2
 8009abe:	bfb8      	it	lt
 8009ac0:	4613      	movlt	r3, r2
 8009ac2:	6033      	str	r3, [r6, #0]
 8009ac4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ac8:	4607      	mov	r7, r0
 8009aca:	460c      	mov	r4, r1
 8009acc:	b10a      	cbz	r2, 8009ad2 <_printf_common+0x26>
 8009ace:	3301      	adds	r3, #1
 8009ad0:	6033      	str	r3, [r6, #0]
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	0699      	lsls	r1, r3, #26
 8009ad6:	bf42      	ittt	mi
 8009ad8:	6833      	ldrmi	r3, [r6, #0]
 8009ada:	3302      	addmi	r3, #2
 8009adc:	6033      	strmi	r3, [r6, #0]
 8009ade:	6825      	ldr	r5, [r4, #0]
 8009ae0:	f015 0506 	ands.w	r5, r5, #6
 8009ae4:	d106      	bne.n	8009af4 <_printf_common+0x48>
 8009ae6:	f104 0a19 	add.w	sl, r4, #25
 8009aea:	68e3      	ldr	r3, [r4, #12]
 8009aec:	6832      	ldr	r2, [r6, #0]
 8009aee:	1a9b      	subs	r3, r3, r2
 8009af0:	42ab      	cmp	r3, r5
 8009af2:	dc26      	bgt.n	8009b42 <_printf_common+0x96>
 8009af4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009af8:	1e13      	subs	r3, r2, #0
 8009afa:	6822      	ldr	r2, [r4, #0]
 8009afc:	bf18      	it	ne
 8009afe:	2301      	movne	r3, #1
 8009b00:	0692      	lsls	r2, r2, #26
 8009b02:	d42b      	bmi.n	8009b5c <_printf_common+0xb0>
 8009b04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b08:	4649      	mov	r1, r9
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	47c0      	blx	r8
 8009b0e:	3001      	adds	r0, #1
 8009b10:	d01e      	beq.n	8009b50 <_printf_common+0xa4>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	6922      	ldr	r2, [r4, #16]
 8009b16:	f003 0306 	and.w	r3, r3, #6
 8009b1a:	2b04      	cmp	r3, #4
 8009b1c:	bf02      	ittt	eq
 8009b1e:	68e5      	ldreq	r5, [r4, #12]
 8009b20:	6833      	ldreq	r3, [r6, #0]
 8009b22:	1aed      	subeq	r5, r5, r3
 8009b24:	68a3      	ldr	r3, [r4, #8]
 8009b26:	bf0c      	ite	eq
 8009b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b2c:	2500      	movne	r5, #0
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	bfc4      	itt	gt
 8009b32:	1a9b      	subgt	r3, r3, r2
 8009b34:	18ed      	addgt	r5, r5, r3
 8009b36:	2600      	movs	r6, #0
 8009b38:	341a      	adds	r4, #26
 8009b3a:	42b5      	cmp	r5, r6
 8009b3c:	d11a      	bne.n	8009b74 <_printf_common+0xc8>
 8009b3e:	2000      	movs	r0, #0
 8009b40:	e008      	b.n	8009b54 <_printf_common+0xa8>
 8009b42:	2301      	movs	r3, #1
 8009b44:	4652      	mov	r2, sl
 8009b46:	4649      	mov	r1, r9
 8009b48:	4638      	mov	r0, r7
 8009b4a:	47c0      	blx	r8
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d103      	bne.n	8009b58 <_printf_common+0xac>
 8009b50:	f04f 30ff 	mov.w	r0, #4294967295
 8009b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b58:	3501      	adds	r5, #1
 8009b5a:	e7c6      	b.n	8009aea <_printf_common+0x3e>
 8009b5c:	18e1      	adds	r1, r4, r3
 8009b5e:	1c5a      	adds	r2, r3, #1
 8009b60:	2030      	movs	r0, #48	; 0x30
 8009b62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b66:	4422      	add	r2, r4
 8009b68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b70:	3302      	adds	r3, #2
 8009b72:	e7c7      	b.n	8009b04 <_printf_common+0x58>
 8009b74:	2301      	movs	r3, #1
 8009b76:	4622      	mov	r2, r4
 8009b78:	4649      	mov	r1, r9
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	47c0      	blx	r8
 8009b7e:	3001      	adds	r0, #1
 8009b80:	d0e6      	beq.n	8009b50 <_printf_common+0xa4>
 8009b82:	3601      	adds	r6, #1
 8009b84:	e7d9      	b.n	8009b3a <_printf_common+0x8e>
	...

08009b88 <_printf_i>:
 8009b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b8c:	7e0f      	ldrb	r7, [r1, #24]
 8009b8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b90:	2f78      	cmp	r7, #120	; 0x78
 8009b92:	4691      	mov	r9, r2
 8009b94:	4680      	mov	r8, r0
 8009b96:	460c      	mov	r4, r1
 8009b98:	469a      	mov	sl, r3
 8009b9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b9e:	d807      	bhi.n	8009bb0 <_printf_i+0x28>
 8009ba0:	2f62      	cmp	r7, #98	; 0x62
 8009ba2:	d80a      	bhi.n	8009bba <_printf_i+0x32>
 8009ba4:	2f00      	cmp	r7, #0
 8009ba6:	f000 80d4 	beq.w	8009d52 <_printf_i+0x1ca>
 8009baa:	2f58      	cmp	r7, #88	; 0x58
 8009bac:	f000 80c0 	beq.w	8009d30 <_printf_i+0x1a8>
 8009bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bb8:	e03a      	b.n	8009c30 <_printf_i+0xa8>
 8009bba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bbe:	2b15      	cmp	r3, #21
 8009bc0:	d8f6      	bhi.n	8009bb0 <_printf_i+0x28>
 8009bc2:	a101      	add	r1, pc, #4	; (adr r1, 8009bc8 <_printf_i+0x40>)
 8009bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bc8:	08009c21 	.word	0x08009c21
 8009bcc:	08009c35 	.word	0x08009c35
 8009bd0:	08009bb1 	.word	0x08009bb1
 8009bd4:	08009bb1 	.word	0x08009bb1
 8009bd8:	08009bb1 	.word	0x08009bb1
 8009bdc:	08009bb1 	.word	0x08009bb1
 8009be0:	08009c35 	.word	0x08009c35
 8009be4:	08009bb1 	.word	0x08009bb1
 8009be8:	08009bb1 	.word	0x08009bb1
 8009bec:	08009bb1 	.word	0x08009bb1
 8009bf0:	08009bb1 	.word	0x08009bb1
 8009bf4:	08009d39 	.word	0x08009d39
 8009bf8:	08009c61 	.word	0x08009c61
 8009bfc:	08009cf3 	.word	0x08009cf3
 8009c00:	08009bb1 	.word	0x08009bb1
 8009c04:	08009bb1 	.word	0x08009bb1
 8009c08:	08009d5b 	.word	0x08009d5b
 8009c0c:	08009bb1 	.word	0x08009bb1
 8009c10:	08009c61 	.word	0x08009c61
 8009c14:	08009bb1 	.word	0x08009bb1
 8009c18:	08009bb1 	.word	0x08009bb1
 8009c1c:	08009cfb 	.word	0x08009cfb
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	1d1a      	adds	r2, r3, #4
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	602a      	str	r2, [r5, #0]
 8009c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c30:	2301      	movs	r3, #1
 8009c32:	e09f      	b.n	8009d74 <_printf_i+0x1ec>
 8009c34:	6820      	ldr	r0, [r4, #0]
 8009c36:	682b      	ldr	r3, [r5, #0]
 8009c38:	0607      	lsls	r7, r0, #24
 8009c3a:	f103 0104 	add.w	r1, r3, #4
 8009c3e:	6029      	str	r1, [r5, #0]
 8009c40:	d501      	bpl.n	8009c46 <_printf_i+0xbe>
 8009c42:	681e      	ldr	r6, [r3, #0]
 8009c44:	e003      	b.n	8009c4e <_printf_i+0xc6>
 8009c46:	0646      	lsls	r6, r0, #25
 8009c48:	d5fb      	bpl.n	8009c42 <_printf_i+0xba>
 8009c4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c4e:	2e00      	cmp	r6, #0
 8009c50:	da03      	bge.n	8009c5a <_printf_i+0xd2>
 8009c52:	232d      	movs	r3, #45	; 0x2d
 8009c54:	4276      	negs	r6, r6
 8009c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c5a:	485a      	ldr	r0, [pc, #360]	; (8009dc4 <_printf_i+0x23c>)
 8009c5c:	230a      	movs	r3, #10
 8009c5e:	e012      	b.n	8009c86 <_printf_i+0xfe>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	6820      	ldr	r0, [r4, #0]
 8009c64:	1d19      	adds	r1, r3, #4
 8009c66:	6029      	str	r1, [r5, #0]
 8009c68:	0605      	lsls	r5, r0, #24
 8009c6a:	d501      	bpl.n	8009c70 <_printf_i+0xe8>
 8009c6c:	681e      	ldr	r6, [r3, #0]
 8009c6e:	e002      	b.n	8009c76 <_printf_i+0xee>
 8009c70:	0641      	lsls	r1, r0, #25
 8009c72:	d5fb      	bpl.n	8009c6c <_printf_i+0xe4>
 8009c74:	881e      	ldrh	r6, [r3, #0]
 8009c76:	4853      	ldr	r0, [pc, #332]	; (8009dc4 <_printf_i+0x23c>)
 8009c78:	2f6f      	cmp	r7, #111	; 0x6f
 8009c7a:	bf0c      	ite	eq
 8009c7c:	2308      	moveq	r3, #8
 8009c7e:	230a      	movne	r3, #10
 8009c80:	2100      	movs	r1, #0
 8009c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c86:	6865      	ldr	r5, [r4, #4]
 8009c88:	60a5      	str	r5, [r4, #8]
 8009c8a:	2d00      	cmp	r5, #0
 8009c8c:	bfa2      	ittt	ge
 8009c8e:	6821      	ldrge	r1, [r4, #0]
 8009c90:	f021 0104 	bicge.w	r1, r1, #4
 8009c94:	6021      	strge	r1, [r4, #0]
 8009c96:	b90e      	cbnz	r6, 8009c9c <_printf_i+0x114>
 8009c98:	2d00      	cmp	r5, #0
 8009c9a:	d04b      	beq.n	8009d34 <_printf_i+0x1ac>
 8009c9c:	4615      	mov	r5, r2
 8009c9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ca2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ca6:	5dc7      	ldrb	r7, [r0, r7]
 8009ca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cac:	4637      	mov	r7, r6
 8009cae:	42bb      	cmp	r3, r7
 8009cb0:	460e      	mov	r6, r1
 8009cb2:	d9f4      	bls.n	8009c9e <_printf_i+0x116>
 8009cb4:	2b08      	cmp	r3, #8
 8009cb6:	d10b      	bne.n	8009cd0 <_printf_i+0x148>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	07de      	lsls	r6, r3, #31
 8009cbc:	d508      	bpl.n	8009cd0 <_printf_i+0x148>
 8009cbe:	6923      	ldr	r3, [r4, #16]
 8009cc0:	6861      	ldr	r1, [r4, #4]
 8009cc2:	4299      	cmp	r1, r3
 8009cc4:	bfde      	ittt	le
 8009cc6:	2330      	movle	r3, #48	; 0x30
 8009cc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ccc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cd0:	1b52      	subs	r2, r2, r5
 8009cd2:	6122      	str	r2, [r4, #16]
 8009cd4:	f8cd a000 	str.w	sl, [sp]
 8009cd8:	464b      	mov	r3, r9
 8009cda:	aa03      	add	r2, sp, #12
 8009cdc:	4621      	mov	r1, r4
 8009cde:	4640      	mov	r0, r8
 8009ce0:	f7ff fee4 	bl	8009aac <_printf_common>
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d14a      	bne.n	8009d7e <_printf_i+0x1f6>
 8009ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cec:	b004      	add	sp, #16
 8009cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	f043 0320 	orr.w	r3, r3, #32
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	4833      	ldr	r0, [pc, #204]	; (8009dc8 <_printf_i+0x240>)
 8009cfc:	2778      	movs	r7, #120	; 0x78
 8009cfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	6829      	ldr	r1, [r5, #0]
 8009d06:	061f      	lsls	r7, r3, #24
 8009d08:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d0c:	d402      	bmi.n	8009d14 <_printf_i+0x18c>
 8009d0e:	065f      	lsls	r7, r3, #25
 8009d10:	bf48      	it	mi
 8009d12:	b2b6      	uxthmi	r6, r6
 8009d14:	07df      	lsls	r7, r3, #31
 8009d16:	bf48      	it	mi
 8009d18:	f043 0320 	orrmi.w	r3, r3, #32
 8009d1c:	6029      	str	r1, [r5, #0]
 8009d1e:	bf48      	it	mi
 8009d20:	6023      	strmi	r3, [r4, #0]
 8009d22:	b91e      	cbnz	r6, 8009d2c <_printf_i+0x1a4>
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	f023 0320 	bic.w	r3, r3, #32
 8009d2a:	6023      	str	r3, [r4, #0]
 8009d2c:	2310      	movs	r3, #16
 8009d2e:	e7a7      	b.n	8009c80 <_printf_i+0xf8>
 8009d30:	4824      	ldr	r0, [pc, #144]	; (8009dc4 <_printf_i+0x23c>)
 8009d32:	e7e4      	b.n	8009cfe <_printf_i+0x176>
 8009d34:	4615      	mov	r5, r2
 8009d36:	e7bd      	b.n	8009cb4 <_printf_i+0x12c>
 8009d38:	682b      	ldr	r3, [r5, #0]
 8009d3a:	6826      	ldr	r6, [r4, #0]
 8009d3c:	6961      	ldr	r1, [r4, #20]
 8009d3e:	1d18      	adds	r0, r3, #4
 8009d40:	6028      	str	r0, [r5, #0]
 8009d42:	0635      	lsls	r5, r6, #24
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	d501      	bpl.n	8009d4c <_printf_i+0x1c4>
 8009d48:	6019      	str	r1, [r3, #0]
 8009d4a:	e002      	b.n	8009d52 <_printf_i+0x1ca>
 8009d4c:	0670      	lsls	r0, r6, #25
 8009d4e:	d5fb      	bpl.n	8009d48 <_printf_i+0x1c0>
 8009d50:	8019      	strh	r1, [r3, #0]
 8009d52:	2300      	movs	r3, #0
 8009d54:	6123      	str	r3, [r4, #16]
 8009d56:	4615      	mov	r5, r2
 8009d58:	e7bc      	b.n	8009cd4 <_printf_i+0x14c>
 8009d5a:	682b      	ldr	r3, [r5, #0]
 8009d5c:	1d1a      	adds	r2, r3, #4
 8009d5e:	602a      	str	r2, [r5, #0]
 8009d60:	681d      	ldr	r5, [r3, #0]
 8009d62:	6862      	ldr	r2, [r4, #4]
 8009d64:	2100      	movs	r1, #0
 8009d66:	4628      	mov	r0, r5
 8009d68:	f7f6 fa52 	bl	8000210 <memchr>
 8009d6c:	b108      	cbz	r0, 8009d72 <_printf_i+0x1ea>
 8009d6e:	1b40      	subs	r0, r0, r5
 8009d70:	6060      	str	r0, [r4, #4]
 8009d72:	6863      	ldr	r3, [r4, #4]
 8009d74:	6123      	str	r3, [r4, #16]
 8009d76:	2300      	movs	r3, #0
 8009d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d7c:	e7aa      	b.n	8009cd4 <_printf_i+0x14c>
 8009d7e:	6923      	ldr	r3, [r4, #16]
 8009d80:	462a      	mov	r2, r5
 8009d82:	4649      	mov	r1, r9
 8009d84:	4640      	mov	r0, r8
 8009d86:	47d0      	blx	sl
 8009d88:	3001      	adds	r0, #1
 8009d8a:	d0ad      	beq.n	8009ce8 <_printf_i+0x160>
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	079b      	lsls	r3, r3, #30
 8009d90:	d413      	bmi.n	8009dba <_printf_i+0x232>
 8009d92:	68e0      	ldr	r0, [r4, #12]
 8009d94:	9b03      	ldr	r3, [sp, #12]
 8009d96:	4298      	cmp	r0, r3
 8009d98:	bfb8      	it	lt
 8009d9a:	4618      	movlt	r0, r3
 8009d9c:	e7a6      	b.n	8009cec <_printf_i+0x164>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	4632      	mov	r2, r6
 8009da2:	4649      	mov	r1, r9
 8009da4:	4640      	mov	r0, r8
 8009da6:	47d0      	blx	sl
 8009da8:	3001      	adds	r0, #1
 8009daa:	d09d      	beq.n	8009ce8 <_printf_i+0x160>
 8009dac:	3501      	adds	r5, #1
 8009dae:	68e3      	ldr	r3, [r4, #12]
 8009db0:	9903      	ldr	r1, [sp, #12]
 8009db2:	1a5b      	subs	r3, r3, r1
 8009db4:	42ab      	cmp	r3, r5
 8009db6:	dcf2      	bgt.n	8009d9e <_printf_i+0x216>
 8009db8:	e7eb      	b.n	8009d92 <_printf_i+0x20a>
 8009dba:	2500      	movs	r5, #0
 8009dbc:	f104 0619 	add.w	r6, r4, #25
 8009dc0:	e7f5      	b.n	8009dae <_printf_i+0x226>
 8009dc2:	bf00      	nop
 8009dc4:	0800c4b2 	.word	0x0800c4b2
 8009dc8:	0800c4c3 	.word	0x0800c4c3

08009dcc <std>:
 8009dcc:	2300      	movs	r3, #0
 8009dce:	b510      	push	{r4, lr}
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	e9c0 3300 	strd	r3, r3, [r0]
 8009dd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dda:	6083      	str	r3, [r0, #8]
 8009ddc:	8181      	strh	r1, [r0, #12]
 8009dde:	6643      	str	r3, [r0, #100]	; 0x64
 8009de0:	81c2      	strh	r2, [r0, #14]
 8009de2:	6183      	str	r3, [r0, #24]
 8009de4:	4619      	mov	r1, r3
 8009de6:	2208      	movs	r2, #8
 8009de8:	305c      	adds	r0, #92	; 0x5c
 8009dea:	f000 f9e5 	bl	800a1b8 <memset>
 8009dee:	4b05      	ldr	r3, [pc, #20]	; (8009e04 <std+0x38>)
 8009df0:	6263      	str	r3, [r4, #36]	; 0x24
 8009df2:	4b05      	ldr	r3, [pc, #20]	; (8009e08 <std+0x3c>)
 8009df4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009df6:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <std+0x40>)
 8009df8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009dfa:	4b05      	ldr	r3, [pc, #20]	; (8009e10 <std+0x44>)
 8009dfc:	6224      	str	r4, [r4, #32]
 8009dfe:	6323      	str	r3, [r4, #48]	; 0x30
 8009e00:	bd10      	pop	{r4, pc}
 8009e02:	bf00      	nop
 8009e04:	0800a009 	.word	0x0800a009
 8009e08:	0800a02b 	.word	0x0800a02b
 8009e0c:	0800a063 	.word	0x0800a063
 8009e10:	0800a087 	.word	0x0800a087

08009e14 <stdio_exit_handler>:
 8009e14:	4a02      	ldr	r2, [pc, #8]	; (8009e20 <stdio_exit_handler+0xc>)
 8009e16:	4903      	ldr	r1, [pc, #12]	; (8009e24 <stdio_exit_handler+0x10>)
 8009e18:	4803      	ldr	r0, [pc, #12]	; (8009e28 <stdio_exit_handler+0x14>)
 8009e1a:	f000 b869 	b.w	8009ef0 <_fwalk_sglue>
 8009e1e:	bf00      	nop
 8009e20:	20000024 	.word	0x20000024
 8009e24:	0800bc39 	.word	0x0800bc39
 8009e28:	20000030 	.word	0x20000030

08009e2c <cleanup_stdio>:
 8009e2c:	6841      	ldr	r1, [r0, #4]
 8009e2e:	4b0c      	ldr	r3, [pc, #48]	; (8009e60 <cleanup_stdio+0x34>)
 8009e30:	4299      	cmp	r1, r3
 8009e32:	b510      	push	{r4, lr}
 8009e34:	4604      	mov	r4, r0
 8009e36:	d001      	beq.n	8009e3c <cleanup_stdio+0x10>
 8009e38:	f001 fefe 	bl	800bc38 <_fflush_r>
 8009e3c:	68a1      	ldr	r1, [r4, #8]
 8009e3e:	4b09      	ldr	r3, [pc, #36]	; (8009e64 <cleanup_stdio+0x38>)
 8009e40:	4299      	cmp	r1, r3
 8009e42:	d002      	beq.n	8009e4a <cleanup_stdio+0x1e>
 8009e44:	4620      	mov	r0, r4
 8009e46:	f001 fef7 	bl	800bc38 <_fflush_r>
 8009e4a:	68e1      	ldr	r1, [r4, #12]
 8009e4c:	4b06      	ldr	r3, [pc, #24]	; (8009e68 <cleanup_stdio+0x3c>)
 8009e4e:	4299      	cmp	r1, r3
 8009e50:	d004      	beq.n	8009e5c <cleanup_stdio+0x30>
 8009e52:	4620      	mov	r0, r4
 8009e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e58:	f001 beee 	b.w	800bc38 <_fflush_r>
 8009e5c:	bd10      	pop	{r4, pc}
 8009e5e:	bf00      	nop
 8009e60:	20001074 	.word	0x20001074
 8009e64:	200010dc 	.word	0x200010dc
 8009e68:	20001144 	.word	0x20001144

08009e6c <global_stdio_init.part.0>:
 8009e6c:	b510      	push	{r4, lr}
 8009e6e:	4b0b      	ldr	r3, [pc, #44]	; (8009e9c <global_stdio_init.part.0+0x30>)
 8009e70:	4c0b      	ldr	r4, [pc, #44]	; (8009ea0 <global_stdio_init.part.0+0x34>)
 8009e72:	4a0c      	ldr	r2, [pc, #48]	; (8009ea4 <global_stdio_init.part.0+0x38>)
 8009e74:	601a      	str	r2, [r3, #0]
 8009e76:	4620      	mov	r0, r4
 8009e78:	2200      	movs	r2, #0
 8009e7a:	2104      	movs	r1, #4
 8009e7c:	f7ff ffa6 	bl	8009dcc <std>
 8009e80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009e84:	2201      	movs	r2, #1
 8009e86:	2109      	movs	r1, #9
 8009e88:	f7ff ffa0 	bl	8009dcc <std>
 8009e8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009e90:	2202      	movs	r2, #2
 8009e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e96:	2112      	movs	r1, #18
 8009e98:	f7ff bf98 	b.w	8009dcc <std>
 8009e9c:	200011ac 	.word	0x200011ac
 8009ea0:	20001074 	.word	0x20001074
 8009ea4:	08009e15 	.word	0x08009e15

08009ea8 <__sfp_lock_acquire>:
 8009ea8:	4801      	ldr	r0, [pc, #4]	; (8009eb0 <__sfp_lock_acquire+0x8>)
 8009eaa:	f000 ba01 	b.w	800a2b0 <__retarget_lock_acquire_recursive>
 8009eae:	bf00      	nop
 8009eb0:	200011b5 	.word	0x200011b5

08009eb4 <__sfp_lock_release>:
 8009eb4:	4801      	ldr	r0, [pc, #4]	; (8009ebc <__sfp_lock_release+0x8>)
 8009eb6:	f000 b9fc 	b.w	800a2b2 <__retarget_lock_release_recursive>
 8009eba:	bf00      	nop
 8009ebc:	200011b5 	.word	0x200011b5

08009ec0 <__sinit>:
 8009ec0:	b510      	push	{r4, lr}
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	f7ff fff0 	bl	8009ea8 <__sfp_lock_acquire>
 8009ec8:	6a23      	ldr	r3, [r4, #32]
 8009eca:	b11b      	cbz	r3, 8009ed4 <__sinit+0x14>
 8009ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ed0:	f7ff bff0 	b.w	8009eb4 <__sfp_lock_release>
 8009ed4:	4b04      	ldr	r3, [pc, #16]	; (8009ee8 <__sinit+0x28>)
 8009ed6:	6223      	str	r3, [r4, #32]
 8009ed8:	4b04      	ldr	r3, [pc, #16]	; (8009eec <__sinit+0x2c>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1f5      	bne.n	8009ecc <__sinit+0xc>
 8009ee0:	f7ff ffc4 	bl	8009e6c <global_stdio_init.part.0>
 8009ee4:	e7f2      	b.n	8009ecc <__sinit+0xc>
 8009ee6:	bf00      	nop
 8009ee8:	08009e2d 	.word	0x08009e2d
 8009eec:	200011ac 	.word	0x200011ac

08009ef0 <_fwalk_sglue>:
 8009ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ef4:	4607      	mov	r7, r0
 8009ef6:	4688      	mov	r8, r1
 8009ef8:	4614      	mov	r4, r2
 8009efa:	2600      	movs	r6, #0
 8009efc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f00:	f1b9 0901 	subs.w	r9, r9, #1
 8009f04:	d505      	bpl.n	8009f12 <_fwalk_sglue+0x22>
 8009f06:	6824      	ldr	r4, [r4, #0]
 8009f08:	2c00      	cmp	r4, #0
 8009f0a:	d1f7      	bne.n	8009efc <_fwalk_sglue+0xc>
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f12:	89ab      	ldrh	r3, [r5, #12]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d907      	bls.n	8009f28 <_fwalk_sglue+0x38>
 8009f18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	d003      	beq.n	8009f28 <_fwalk_sglue+0x38>
 8009f20:	4629      	mov	r1, r5
 8009f22:	4638      	mov	r0, r7
 8009f24:	47c0      	blx	r8
 8009f26:	4306      	orrs	r6, r0
 8009f28:	3568      	adds	r5, #104	; 0x68
 8009f2a:	e7e9      	b.n	8009f00 <_fwalk_sglue+0x10>

08009f2c <iprintf>:
 8009f2c:	b40f      	push	{r0, r1, r2, r3}
 8009f2e:	b507      	push	{r0, r1, r2, lr}
 8009f30:	4906      	ldr	r1, [pc, #24]	; (8009f4c <iprintf+0x20>)
 8009f32:	ab04      	add	r3, sp, #16
 8009f34:	6808      	ldr	r0, [r1, #0]
 8009f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f3a:	6881      	ldr	r1, [r0, #8]
 8009f3c:	9301      	str	r3, [sp, #4]
 8009f3e:	f001 fcdb 	bl	800b8f8 <_vfiprintf_r>
 8009f42:	b003      	add	sp, #12
 8009f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f48:	b004      	add	sp, #16
 8009f4a:	4770      	bx	lr
 8009f4c:	2000007c 	.word	0x2000007c

08009f50 <_puts_r>:
 8009f50:	6a03      	ldr	r3, [r0, #32]
 8009f52:	b570      	push	{r4, r5, r6, lr}
 8009f54:	6884      	ldr	r4, [r0, #8]
 8009f56:	4605      	mov	r5, r0
 8009f58:	460e      	mov	r6, r1
 8009f5a:	b90b      	cbnz	r3, 8009f60 <_puts_r+0x10>
 8009f5c:	f7ff ffb0 	bl	8009ec0 <__sinit>
 8009f60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f62:	07db      	lsls	r3, r3, #31
 8009f64:	d405      	bmi.n	8009f72 <_puts_r+0x22>
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	0598      	lsls	r0, r3, #22
 8009f6a:	d402      	bmi.n	8009f72 <_puts_r+0x22>
 8009f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f6e:	f000 f99f 	bl	800a2b0 <__retarget_lock_acquire_recursive>
 8009f72:	89a3      	ldrh	r3, [r4, #12]
 8009f74:	0719      	lsls	r1, r3, #28
 8009f76:	d513      	bpl.n	8009fa0 <_puts_r+0x50>
 8009f78:	6923      	ldr	r3, [r4, #16]
 8009f7a:	b18b      	cbz	r3, 8009fa0 <_puts_r+0x50>
 8009f7c:	3e01      	subs	r6, #1
 8009f7e:	68a3      	ldr	r3, [r4, #8]
 8009f80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f84:	3b01      	subs	r3, #1
 8009f86:	60a3      	str	r3, [r4, #8]
 8009f88:	b9e9      	cbnz	r1, 8009fc6 <_puts_r+0x76>
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	da2e      	bge.n	8009fec <_puts_r+0x9c>
 8009f8e:	4622      	mov	r2, r4
 8009f90:	210a      	movs	r1, #10
 8009f92:	4628      	mov	r0, r5
 8009f94:	f000 f87b 	bl	800a08e <__swbuf_r>
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d007      	beq.n	8009fac <_puts_r+0x5c>
 8009f9c:	250a      	movs	r5, #10
 8009f9e:	e007      	b.n	8009fb0 <_puts_r+0x60>
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	f000 f8b0 	bl	800a108 <__swsetup_r>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d0e7      	beq.n	8009f7c <_puts_r+0x2c>
 8009fac:	f04f 35ff 	mov.w	r5, #4294967295
 8009fb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fb2:	07da      	lsls	r2, r3, #31
 8009fb4:	d405      	bmi.n	8009fc2 <_puts_r+0x72>
 8009fb6:	89a3      	ldrh	r3, [r4, #12]
 8009fb8:	059b      	lsls	r3, r3, #22
 8009fba:	d402      	bmi.n	8009fc2 <_puts_r+0x72>
 8009fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fbe:	f000 f978 	bl	800a2b2 <__retarget_lock_release_recursive>
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	bd70      	pop	{r4, r5, r6, pc}
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	da04      	bge.n	8009fd4 <_puts_r+0x84>
 8009fca:	69a2      	ldr	r2, [r4, #24]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	dc06      	bgt.n	8009fde <_puts_r+0x8e>
 8009fd0:	290a      	cmp	r1, #10
 8009fd2:	d004      	beq.n	8009fde <_puts_r+0x8e>
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	1c5a      	adds	r2, r3, #1
 8009fd8:	6022      	str	r2, [r4, #0]
 8009fda:	7019      	strb	r1, [r3, #0]
 8009fdc:	e7cf      	b.n	8009f7e <_puts_r+0x2e>
 8009fde:	4622      	mov	r2, r4
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	f000 f854 	bl	800a08e <__swbuf_r>
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	d1c9      	bne.n	8009f7e <_puts_r+0x2e>
 8009fea:	e7df      	b.n	8009fac <_puts_r+0x5c>
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	250a      	movs	r5, #10
 8009ff0:	1c5a      	adds	r2, r3, #1
 8009ff2:	6022      	str	r2, [r4, #0]
 8009ff4:	701d      	strb	r5, [r3, #0]
 8009ff6:	e7db      	b.n	8009fb0 <_puts_r+0x60>

08009ff8 <puts>:
 8009ff8:	4b02      	ldr	r3, [pc, #8]	; (800a004 <puts+0xc>)
 8009ffa:	4601      	mov	r1, r0
 8009ffc:	6818      	ldr	r0, [r3, #0]
 8009ffe:	f7ff bfa7 	b.w	8009f50 <_puts_r>
 800a002:	bf00      	nop
 800a004:	2000007c 	.word	0x2000007c

0800a008 <__sread>:
 800a008:	b510      	push	{r4, lr}
 800a00a:	460c      	mov	r4, r1
 800a00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a010:	f000 f900 	bl	800a214 <_read_r>
 800a014:	2800      	cmp	r0, #0
 800a016:	bfab      	itete	ge
 800a018:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a01a:	89a3      	ldrhlt	r3, [r4, #12]
 800a01c:	181b      	addge	r3, r3, r0
 800a01e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a022:	bfac      	ite	ge
 800a024:	6563      	strge	r3, [r4, #84]	; 0x54
 800a026:	81a3      	strhlt	r3, [r4, #12]
 800a028:	bd10      	pop	{r4, pc}

0800a02a <__swrite>:
 800a02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a02e:	461f      	mov	r7, r3
 800a030:	898b      	ldrh	r3, [r1, #12]
 800a032:	05db      	lsls	r3, r3, #23
 800a034:	4605      	mov	r5, r0
 800a036:	460c      	mov	r4, r1
 800a038:	4616      	mov	r6, r2
 800a03a:	d505      	bpl.n	800a048 <__swrite+0x1e>
 800a03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a040:	2302      	movs	r3, #2
 800a042:	2200      	movs	r2, #0
 800a044:	f000 f8d4 	bl	800a1f0 <_lseek_r>
 800a048:	89a3      	ldrh	r3, [r4, #12]
 800a04a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a04e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a052:	81a3      	strh	r3, [r4, #12]
 800a054:	4632      	mov	r2, r6
 800a056:	463b      	mov	r3, r7
 800a058:	4628      	mov	r0, r5
 800a05a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a05e:	f000 b8eb 	b.w	800a238 <_write_r>

0800a062 <__sseek>:
 800a062:	b510      	push	{r4, lr}
 800a064:	460c      	mov	r4, r1
 800a066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a06a:	f000 f8c1 	bl	800a1f0 <_lseek_r>
 800a06e:	1c43      	adds	r3, r0, #1
 800a070:	89a3      	ldrh	r3, [r4, #12]
 800a072:	bf15      	itete	ne
 800a074:	6560      	strne	r0, [r4, #84]	; 0x54
 800a076:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a07a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a07e:	81a3      	strheq	r3, [r4, #12]
 800a080:	bf18      	it	ne
 800a082:	81a3      	strhne	r3, [r4, #12]
 800a084:	bd10      	pop	{r4, pc}

0800a086 <__sclose>:
 800a086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a08a:	f000 b8a1 	b.w	800a1d0 <_close_r>

0800a08e <__swbuf_r>:
 800a08e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a090:	460e      	mov	r6, r1
 800a092:	4614      	mov	r4, r2
 800a094:	4605      	mov	r5, r0
 800a096:	b118      	cbz	r0, 800a0a0 <__swbuf_r+0x12>
 800a098:	6a03      	ldr	r3, [r0, #32]
 800a09a:	b90b      	cbnz	r3, 800a0a0 <__swbuf_r+0x12>
 800a09c:	f7ff ff10 	bl	8009ec0 <__sinit>
 800a0a0:	69a3      	ldr	r3, [r4, #24]
 800a0a2:	60a3      	str	r3, [r4, #8]
 800a0a4:	89a3      	ldrh	r3, [r4, #12]
 800a0a6:	071a      	lsls	r2, r3, #28
 800a0a8:	d525      	bpl.n	800a0f6 <__swbuf_r+0x68>
 800a0aa:	6923      	ldr	r3, [r4, #16]
 800a0ac:	b31b      	cbz	r3, 800a0f6 <__swbuf_r+0x68>
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	6922      	ldr	r2, [r4, #16]
 800a0b2:	1a98      	subs	r0, r3, r2
 800a0b4:	6963      	ldr	r3, [r4, #20]
 800a0b6:	b2f6      	uxtb	r6, r6
 800a0b8:	4283      	cmp	r3, r0
 800a0ba:	4637      	mov	r7, r6
 800a0bc:	dc04      	bgt.n	800a0c8 <__swbuf_r+0x3a>
 800a0be:	4621      	mov	r1, r4
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f001 fdb9 	bl	800bc38 <_fflush_r>
 800a0c6:	b9e0      	cbnz	r0, 800a102 <__swbuf_r+0x74>
 800a0c8:	68a3      	ldr	r3, [r4, #8]
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	60a3      	str	r3, [r4, #8]
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	1c5a      	adds	r2, r3, #1
 800a0d2:	6022      	str	r2, [r4, #0]
 800a0d4:	701e      	strb	r6, [r3, #0]
 800a0d6:	6962      	ldr	r2, [r4, #20]
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d004      	beq.n	800a0e8 <__swbuf_r+0x5a>
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	07db      	lsls	r3, r3, #31
 800a0e2:	d506      	bpl.n	800a0f2 <__swbuf_r+0x64>
 800a0e4:	2e0a      	cmp	r6, #10
 800a0e6:	d104      	bne.n	800a0f2 <__swbuf_r+0x64>
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	f001 fda4 	bl	800bc38 <_fflush_r>
 800a0f0:	b938      	cbnz	r0, 800a102 <__swbuf_r+0x74>
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	f000 f805 	bl	800a108 <__swsetup_r>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d0d5      	beq.n	800a0ae <__swbuf_r+0x20>
 800a102:	f04f 37ff 	mov.w	r7, #4294967295
 800a106:	e7f4      	b.n	800a0f2 <__swbuf_r+0x64>

0800a108 <__swsetup_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	4b2a      	ldr	r3, [pc, #168]	; (800a1b4 <__swsetup_r+0xac>)
 800a10c:	4605      	mov	r5, r0
 800a10e:	6818      	ldr	r0, [r3, #0]
 800a110:	460c      	mov	r4, r1
 800a112:	b118      	cbz	r0, 800a11c <__swsetup_r+0x14>
 800a114:	6a03      	ldr	r3, [r0, #32]
 800a116:	b90b      	cbnz	r3, 800a11c <__swsetup_r+0x14>
 800a118:	f7ff fed2 	bl	8009ec0 <__sinit>
 800a11c:	89a3      	ldrh	r3, [r4, #12]
 800a11e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a122:	0718      	lsls	r0, r3, #28
 800a124:	d422      	bmi.n	800a16c <__swsetup_r+0x64>
 800a126:	06d9      	lsls	r1, r3, #27
 800a128:	d407      	bmi.n	800a13a <__swsetup_r+0x32>
 800a12a:	2309      	movs	r3, #9
 800a12c:	602b      	str	r3, [r5, #0]
 800a12e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a132:	81a3      	strh	r3, [r4, #12]
 800a134:	f04f 30ff 	mov.w	r0, #4294967295
 800a138:	e034      	b.n	800a1a4 <__swsetup_r+0x9c>
 800a13a:	0758      	lsls	r0, r3, #29
 800a13c:	d512      	bpl.n	800a164 <__swsetup_r+0x5c>
 800a13e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a140:	b141      	cbz	r1, 800a154 <__swsetup_r+0x4c>
 800a142:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a146:	4299      	cmp	r1, r3
 800a148:	d002      	beq.n	800a150 <__swsetup_r+0x48>
 800a14a:	4628      	mov	r0, r5
 800a14c:	f000 ff2e 	bl	800afac <_free_r>
 800a150:	2300      	movs	r3, #0
 800a152:	6363      	str	r3, [r4, #52]	; 0x34
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a15a:	81a3      	strh	r3, [r4, #12]
 800a15c:	2300      	movs	r3, #0
 800a15e:	6063      	str	r3, [r4, #4]
 800a160:	6923      	ldr	r3, [r4, #16]
 800a162:	6023      	str	r3, [r4, #0]
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	f043 0308 	orr.w	r3, r3, #8
 800a16a:	81a3      	strh	r3, [r4, #12]
 800a16c:	6923      	ldr	r3, [r4, #16]
 800a16e:	b94b      	cbnz	r3, 800a184 <__swsetup_r+0x7c>
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a17a:	d003      	beq.n	800a184 <__swsetup_r+0x7c>
 800a17c:	4621      	mov	r1, r4
 800a17e:	4628      	mov	r0, r5
 800a180:	f001 fda8 	bl	800bcd4 <__smakebuf_r>
 800a184:	89a0      	ldrh	r0, [r4, #12]
 800a186:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a18a:	f010 0301 	ands.w	r3, r0, #1
 800a18e:	d00a      	beq.n	800a1a6 <__swsetup_r+0x9e>
 800a190:	2300      	movs	r3, #0
 800a192:	60a3      	str	r3, [r4, #8]
 800a194:	6963      	ldr	r3, [r4, #20]
 800a196:	425b      	negs	r3, r3
 800a198:	61a3      	str	r3, [r4, #24]
 800a19a:	6923      	ldr	r3, [r4, #16]
 800a19c:	b943      	cbnz	r3, 800a1b0 <__swsetup_r+0xa8>
 800a19e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1a2:	d1c4      	bne.n	800a12e <__swsetup_r+0x26>
 800a1a4:	bd38      	pop	{r3, r4, r5, pc}
 800a1a6:	0781      	lsls	r1, r0, #30
 800a1a8:	bf58      	it	pl
 800a1aa:	6963      	ldrpl	r3, [r4, #20]
 800a1ac:	60a3      	str	r3, [r4, #8]
 800a1ae:	e7f4      	b.n	800a19a <__swsetup_r+0x92>
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	e7f7      	b.n	800a1a4 <__swsetup_r+0x9c>
 800a1b4:	2000007c 	.word	0x2000007c

0800a1b8 <memset>:
 800a1b8:	4402      	add	r2, r0
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d100      	bne.n	800a1c2 <memset+0xa>
 800a1c0:	4770      	bx	lr
 800a1c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a1c6:	e7f9      	b.n	800a1bc <memset+0x4>

0800a1c8 <_localeconv_r>:
 800a1c8:	4800      	ldr	r0, [pc, #0]	; (800a1cc <_localeconv_r+0x4>)
 800a1ca:	4770      	bx	lr
 800a1cc:	20000170 	.word	0x20000170

0800a1d0 <_close_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4d06      	ldr	r5, [pc, #24]	; (800a1ec <_close_r+0x1c>)
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	4608      	mov	r0, r1
 800a1da:	602b      	str	r3, [r5, #0]
 800a1dc:	f7f8 fbfa 	bl	80029d4 <_close>
 800a1e0:	1c43      	adds	r3, r0, #1
 800a1e2:	d102      	bne.n	800a1ea <_close_r+0x1a>
 800a1e4:	682b      	ldr	r3, [r5, #0]
 800a1e6:	b103      	cbz	r3, 800a1ea <_close_r+0x1a>
 800a1e8:	6023      	str	r3, [r4, #0]
 800a1ea:	bd38      	pop	{r3, r4, r5, pc}
 800a1ec:	200011b0 	.word	0x200011b0

0800a1f0 <_lseek_r>:
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	4d07      	ldr	r5, [pc, #28]	; (800a210 <_lseek_r+0x20>)
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	4608      	mov	r0, r1
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	602a      	str	r2, [r5, #0]
 800a1fe:	461a      	mov	r2, r3
 800a200:	f7f8 fbf2 	bl	80029e8 <_lseek>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	d102      	bne.n	800a20e <_lseek_r+0x1e>
 800a208:	682b      	ldr	r3, [r5, #0]
 800a20a:	b103      	cbz	r3, 800a20e <_lseek_r+0x1e>
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	bd38      	pop	{r3, r4, r5, pc}
 800a210:	200011b0 	.word	0x200011b0

0800a214 <_read_r>:
 800a214:	b538      	push	{r3, r4, r5, lr}
 800a216:	4d07      	ldr	r5, [pc, #28]	; (800a234 <_read_r+0x20>)
 800a218:	4604      	mov	r4, r0
 800a21a:	4608      	mov	r0, r1
 800a21c:	4611      	mov	r1, r2
 800a21e:	2200      	movs	r2, #0
 800a220:	602a      	str	r2, [r5, #0]
 800a222:	461a      	mov	r2, r3
 800a224:	f7f8 fbc8 	bl	80029b8 <_read>
 800a228:	1c43      	adds	r3, r0, #1
 800a22a:	d102      	bne.n	800a232 <_read_r+0x1e>
 800a22c:	682b      	ldr	r3, [r5, #0]
 800a22e:	b103      	cbz	r3, 800a232 <_read_r+0x1e>
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	200011b0 	.word	0x200011b0

0800a238 <_write_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4d07      	ldr	r5, [pc, #28]	; (800a258 <_write_r+0x20>)
 800a23c:	4604      	mov	r4, r0
 800a23e:	4608      	mov	r0, r1
 800a240:	4611      	mov	r1, r2
 800a242:	2200      	movs	r2, #0
 800a244:	602a      	str	r2, [r5, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	f7f6 fe4c 	bl	8000ee4 <_write>
 800a24c:	1c43      	adds	r3, r0, #1
 800a24e:	d102      	bne.n	800a256 <_write_r+0x1e>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	b103      	cbz	r3, 800a256 <_write_r+0x1e>
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	bd38      	pop	{r3, r4, r5, pc}
 800a258:	200011b0 	.word	0x200011b0

0800a25c <__errno>:
 800a25c:	4b01      	ldr	r3, [pc, #4]	; (800a264 <__errno+0x8>)
 800a25e:	6818      	ldr	r0, [r3, #0]
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	2000007c 	.word	0x2000007c

0800a268 <__libc_init_array>:
 800a268:	b570      	push	{r4, r5, r6, lr}
 800a26a:	4d0d      	ldr	r5, [pc, #52]	; (800a2a0 <__libc_init_array+0x38>)
 800a26c:	4c0d      	ldr	r4, [pc, #52]	; (800a2a4 <__libc_init_array+0x3c>)
 800a26e:	1b64      	subs	r4, r4, r5
 800a270:	10a4      	asrs	r4, r4, #2
 800a272:	2600      	movs	r6, #0
 800a274:	42a6      	cmp	r6, r4
 800a276:	d109      	bne.n	800a28c <__libc_init_array+0x24>
 800a278:	4d0b      	ldr	r5, [pc, #44]	; (800a2a8 <__libc_init_array+0x40>)
 800a27a:	4c0c      	ldr	r4, [pc, #48]	; (800a2ac <__libc_init_array+0x44>)
 800a27c:	f001 fe58 	bl	800bf30 <_init>
 800a280:	1b64      	subs	r4, r4, r5
 800a282:	10a4      	asrs	r4, r4, #2
 800a284:	2600      	movs	r6, #0
 800a286:	42a6      	cmp	r6, r4
 800a288:	d105      	bne.n	800a296 <__libc_init_array+0x2e>
 800a28a:	bd70      	pop	{r4, r5, r6, pc}
 800a28c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a290:	4798      	blx	r3
 800a292:	3601      	adds	r6, #1
 800a294:	e7ee      	b.n	800a274 <__libc_init_array+0xc>
 800a296:	f855 3b04 	ldr.w	r3, [r5], #4
 800a29a:	4798      	blx	r3
 800a29c:	3601      	adds	r6, #1
 800a29e:	e7f2      	b.n	800a286 <__libc_init_array+0x1e>
 800a2a0:	0800c81c 	.word	0x0800c81c
 800a2a4:	0800c81c 	.word	0x0800c81c
 800a2a8:	0800c81c 	.word	0x0800c81c
 800a2ac:	0800c820 	.word	0x0800c820

0800a2b0 <__retarget_lock_acquire_recursive>:
 800a2b0:	4770      	bx	lr

0800a2b2 <__retarget_lock_release_recursive>:
 800a2b2:	4770      	bx	lr

0800a2b4 <quorem>:
 800a2b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b8:	6903      	ldr	r3, [r0, #16]
 800a2ba:	690c      	ldr	r4, [r1, #16]
 800a2bc:	42a3      	cmp	r3, r4
 800a2be:	4607      	mov	r7, r0
 800a2c0:	db7e      	blt.n	800a3c0 <quorem+0x10c>
 800a2c2:	3c01      	subs	r4, #1
 800a2c4:	f101 0814 	add.w	r8, r1, #20
 800a2c8:	f100 0514 	add.w	r5, r0, #20
 800a2cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2d0:	9301      	str	r3, [sp, #4]
 800a2d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a2d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a2e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a2e6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2ea:	d331      	bcc.n	800a350 <quorem+0x9c>
 800a2ec:	f04f 0e00 	mov.w	lr, #0
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	46ac      	mov	ip, r5
 800a2f4:	46f2      	mov	sl, lr
 800a2f6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a2fa:	b293      	uxth	r3, r2
 800a2fc:	fb06 e303 	mla	r3, r6, r3, lr
 800a300:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a304:	0c1a      	lsrs	r2, r3, #16
 800a306:	b29b      	uxth	r3, r3
 800a308:	ebaa 0303 	sub.w	r3, sl, r3
 800a30c:	f8dc a000 	ldr.w	sl, [ip]
 800a310:	fa13 f38a 	uxtah	r3, r3, sl
 800a314:	fb06 220e 	mla	r2, r6, lr, r2
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	9b00      	ldr	r3, [sp, #0]
 800a31c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a320:	b292      	uxth	r2, r2
 800a322:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a326:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a32a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a32e:	4581      	cmp	r9, r0
 800a330:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a334:	f84c 3b04 	str.w	r3, [ip], #4
 800a338:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a33c:	d2db      	bcs.n	800a2f6 <quorem+0x42>
 800a33e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a342:	b92b      	cbnz	r3, 800a350 <quorem+0x9c>
 800a344:	9b01      	ldr	r3, [sp, #4]
 800a346:	3b04      	subs	r3, #4
 800a348:	429d      	cmp	r5, r3
 800a34a:	461a      	mov	r2, r3
 800a34c:	d32c      	bcc.n	800a3a8 <quorem+0xf4>
 800a34e:	613c      	str	r4, [r7, #16]
 800a350:	4638      	mov	r0, r7
 800a352:	f001 f9a7 	bl	800b6a4 <__mcmp>
 800a356:	2800      	cmp	r0, #0
 800a358:	db22      	blt.n	800a3a0 <quorem+0xec>
 800a35a:	3601      	adds	r6, #1
 800a35c:	4629      	mov	r1, r5
 800a35e:	2000      	movs	r0, #0
 800a360:	f858 2b04 	ldr.w	r2, [r8], #4
 800a364:	f8d1 c000 	ldr.w	ip, [r1]
 800a368:	b293      	uxth	r3, r2
 800a36a:	1ac3      	subs	r3, r0, r3
 800a36c:	0c12      	lsrs	r2, r2, #16
 800a36e:	fa13 f38c 	uxtah	r3, r3, ip
 800a372:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a376:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a380:	45c1      	cmp	r9, r8
 800a382:	f841 3b04 	str.w	r3, [r1], #4
 800a386:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a38a:	d2e9      	bcs.n	800a360 <quorem+0xac>
 800a38c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a390:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a394:	b922      	cbnz	r2, 800a3a0 <quorem+0xec>
 800a396:	3b04      	subs	r3, #4
 800a398:	429d      	cmp	r5, r3
 800a39a:	461a      	mov	r2, r3
 800a39c:	d30a      	bcc.n	800a3b4 <quorem+0x100>
 800a39e:	613c      	str	r4, [r7, #16]
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	b003      	add	sp, #12
 800a3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a8:	6812      	ldr	r2, [r2, #0]
 800a3aa:	3b04      	subs	r3, #4
 800a3ac:	2a00      	cmp	r2, #0
 800a3ae:	d1ce      	bne.n	800a34e <quorem+0x9a>
 800a3b0:	3c01      	subs	r4, #1
 800a3b2:	e7c9      	b.n	800a348 <quorem+0x94>
 800a3b4:	6812      	ldr	r2, [r2, #0]
 800a3b6:	3b04      	subs	r3, #4
 800a3b8:	2a00      	cmp	r2, #0
 800a3ba:	d1f0      	bne.n	800a39e <quorem+0xea>
 800a3bc:	3c01      	subs	r4, #1
 800a3be:	e7eb      	b.n	800a398 <quorem+0xe4>
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	e7ee      	b.n	800a3a2 <quorem+0xee>
 800a3c4:	0000      	movs	r0, r0
	...

0800a3c8 <_dtoa_r>:
 800a3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3cc:	ed2d 8b04 	vpush	{d8-d9}
 800a3d0:	69c5      	ldr	r5, [r0, #28]
 800a3d2:	b093      	sub	sp, #76	; 0x4c
 800a3d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a3d8:	ec57 6b10 	vmov	r6, r7, d0
 800a3dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a3e0:	9107      	str	r1, [sp, #28]
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	920a      	str	r2, [sp, #40]	; 0x28
 800a3e6:	930d      	str	r3, [sp, #52]	; 0x34
 800a3e8:	b975      	cbnz	r5, 800a408 <_dtoa_r+0x40>
 800a3ea:	2010      	movs	r0, #16
 800a3ec:	f000 fe2a 	bl	800b044 <malloc>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	61e0      	str	r0, [r4, #28]
 800a3f4:	b920      	cbnz	r0, 800a400 <_dtoa_r+0x38>
 800a3f6:	4bae      	ldr	r3, [pc, #696]	; (800a6b0 <_dtoa_r+0x2e8>)
 800a3f8:	21ef      	movs	r1, #239	; 0xef
 800a3fa:	48ae      	ldr	r0, [pc, #696]	; (800a6b4 <_dtoa_r+0x2ec>)
 800a3fc:	f001 fce6 	bl	800bdcc <__assert_func>
 800a400:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a404:	6005      	str	r5, [r0, #0]
 800a406:	60c5      	str	r5, [r0, #12]
 800a408:	69e3      	ldr	r3, [r4, #28]
 800a40a:	6819      	ldr	r1, [r3, #0]
 800a40c:	b151      	cbz	r1, 800a424 <_dtoa_r+0x5c>
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	604a      	str	r2, [r1, #4]
 800a412:	2301      	movs	r3, #1
 800a414:	4093      	lsls	r3, r2
 800a416:	608b      	str	r3, [r1, #8]
 800a418:	4620      	mov	r0, r4
 800a41a:	f000 ff07 	bl	800b22c <_Bfree>
 800a41e:	69e3      	ldr	r3, [r4, #28]
 800a420:	2200      	movs	r2, #0
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	1e3b      	subs	r3, r7, #0
 800a426:	bfbb      	ittet	lt
 800a428:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a42c:	9303      	strlt	r3, [sp, #12]
 800a42e:	2300      	movge	r3, #0
 800a430:	2201      	movlt	r2, #1
 800a432:	bfac      	ite	ge
 800a434:	f8c8 3000 	strge.w	r3, [r8]
 800a438:	f8c8 2000 	strlt.w	r2, [r8]
 800a43c:	4b9e      	ldr	r3, [pc, #632]	; (800a6b8 <_dtoa_r+0x2f0>)
 800a43e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a442:	ea33 0308 	bics.w	r3, r3, r8
 800a446:	d11b      	bne.n	800a480 <_dtoa_r+0xb8>
 800a448:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a44a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a44e:	6013      	str	r3, [r2, #0]
 800a450:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a454:	4333      	orrs	r3, r6
 800a456:	f000 8593 	beq.w	800af80 <_dtoa_r+0xbb8>
 800a45a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a45c:	b963      	cbnz	r3, 800a478 <_dtoa_r+0xb0>
 800a45e:	4b97      	ldr	r3, [pc, #604]	; (800a6bc <_dtoa_r+0x2f4>)
 800a460:	e027      	b.n	800a4b2 <_dtoa_r+0xea>
 800a462:	4b97      	ldr	r3, [pc, #604]	; (800a6c0 <_dtoa_r+0x2f8>)
 800a464:	9300      	str	r3, [sp, #0]
 800a466:	3308      	adds	r3, #8
 800a468:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	9800      	ldr	r0, [sp, #0]
 800a46e:	b013      	add	sp, #76	; 0x4c
 800a470:	ecbd 8b04 	vpop	{d8-d9}
 800a474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a478:	4b90      	ldr	r3, [pc, #576]	; (800a6bc <_dtoa_r+0x2f4>)
 800a47a:	9300      	str	r3, [sp, #0]
 800a47c:	3303      	adds	r3, #3
 800a47e:	e7f3      	b.n	800a468 <_dtoa_r+0xa0>
 800a480:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a484:	2200      	movs	r2, #0
 800a486:	ec51 0b17 	vmov	r0, r1, d7
 800a48a:	eeb0 8a47 	vmov.f32	s16, s14
 800a48e:	eef0 8a67 	vmov.f32	s17, s15
 800a492:	2300      	movs	r3, #0
 800a494:	f7f6 fb38 	bl	8000b08 <__aeabi_dcmpeq>
 800a498:	4681      	mov	r9, r0
 800a49a:	b160      	cbz	r0, 800a4b6 <_dtoa_r+0xee>
 800a49c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a49e:	2301      	movs	r3, #1
 800a4a0:	6013      	str	r3, [r2, #0]
 800a4a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 8568 	beq.w	800af7a <_dtoa_r+0xbb2>
 800a4aa:	4b86      	ldr	r3, [pc, #536]	; (800a6c4 <_dtoa_r+0x2fc>)
 800a4ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	e7da      	b.n	800a46c <_dtoa_r+0xa4>
 800a4b6:	aa10      	add	r2, sp, #64	; 0x40
 800a4b8:	a911      	add	r1, sp, #68	; 0x44
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	eeb0 0a48 	vmov.f32	s0, s16
 800a4c0:	eef0 0a68 	vmov.f32	s1, s17
 800a4c4:	f001 f994 	bl	800b7f0 <__d2b>
 800a4c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a4cc:	4682      	mov	sl, r0
 800a4ce:	2d00      	cmp	r5, #0
 800a4d0:	d07f      	beq.n	800a5d2 <_dtoa_r+0x20a>
 800a4d2:	ee18 3a90 	vmov	r3, s17
 800a4d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a4de:	ec51 0b18 	vmov	r0, r1, d8
 800a4e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a4e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a4ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	4b75      	ldr	r3, [pc, #468]	; (800a6c8 <_dtoa_r+0x300>)
 800a4f4:	f7f5 fee8 	bl	80002c8 <__aeabi_dsub>
 800a4f8:	a367      	add	r3, pc, #412	; (adr r3, 800a698 <_dtoa_r+0x2d0>)
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	f7f6 f89b 	bl	8000638 <__aeabi_dmul>
 800a502:	a367      	add	r3, pc, #412	; (adr r3, 800a6a0 <_dtoa_r+0x2d8>)
 800a504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a508:	f7f5 fee0 	bl	80002cc <__adddf3>
 800a50c:	4606      	mov	r6, r0
 800a50e:	4628      	mov	r0, r5
 800a510:	460f      	mov	r7, r1
 800a512:	f7f6 f827 	bl	8000564 <__aeabi_i2d>
 800a516:	a364      	add	r3, pc, #400	; (adr r3, 800a6a8 <_dtoa_r+0x2e0>)
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	f7f6 f88c 	bl	8000638 <__aeabi_dmul>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	4630      	mov	r0, r6
 800a526:	4639      	mov	r1, r7
 800a528:	f7f5 fed0 	bl	80002cc <__adddf3>
 800a52c:	4606      	mov	r6, r0
 800a52e:	460f      	mov	r7, r1
 800a530:	f7f6 fb32 	bl	8000b98 <__aeabi_d2iz>
 800a534:	2200      	movs	r2, #0
 800a536:	4683      	mov	fp, r0
 800a538:	2300      	movs	r3, #0
 800a53a:	4630      	mov	r0, r6
 800a53c:	4639      	mov	r1, r7
 800a53e:	f7f6 faed 	bl	8000b1c <__aeabi_dcmplt>
 800a542:	b148      	cbz	r0, 800a558 <_dtoa_r+0x190>
 800a544:	4658      	mov	r0, fp
 800a546:	f7f6 f80d 	bl	8000564 <__aeabi_i2d>
 800a54a:	4632      	mov	r2, r6
 800a54c:	463b      	mov	r3, r7
 800a54e:	f7f6 fadb 	bl	8000b08 <__aeabi_dcmpeq>
 800a552:	b908      	cbnz	r0, 800a558 <_dtoa_r+0x190>
 800a554:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a558:	f1bb 0f16 	cmp.w	fp, #22
 800a55c:	d857      	bhi.n	800a60e <_dtoa_r+0x246>
 800a55e:	4b5b      	ldr	r3, [pc, #364]	; (800a6cc <_dtoa_r+0x304>)
 800a560:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a568:	ec51 0b18 	vmov	r0, r1, d8
 800a56c:	f7f6 fad6 	bl	8000b1c <__aeabi_dcmplt>
 800a570:	2800      	cmp	r0, #0
 800a572:	d04e      	beq.n	800a612 <_dtoa_r+0x24a>
 800a574:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a578:	2300      	movs	r3, #0
 800a57a:	930c      	str	r3, [sp, #48]	; 0x30
 800a57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a57e:	1b5b      	subs	r3, r3, r5
 800a580:	1e5a      	subs	r2, r3, #1
 800a582:	bf45      	ittet	mi
 800a584:	f1c3 0301 	rsbmi	r3, r3, #1
 800a588:	9305      	strmi	r3, [sp, #20]
 800a58a:	2300      	movpl	r3, #0
 800a58c:	2300      	movmi	r3, #0
 800a58e:	9206      	str	r2, [sp, #24]
 800a590:	bf54      	ite	pl
 800a592:	9305      	strpl	r3, [sp, #20]
 800a594:	9306      	strmi	r3, [sp, #24]
 800a596:	f1bb 0f00 	cmp.w	fp, #0
 800a59a:	db3c      	blt.n	800a616 <_dtoa_r+0x24e>
 800a59c:	9b06      	ldr	r3, [sp, #24]
 800a59e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a5a2:	445b      	add	r3, fp
 800a5a4:	9306      	str	r3, [sp, #24]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	9308      	str	r3, [sp, #32]
 800a5aa:	9b07      	ldr	r3, [sp, #28]
 800a5ac:	2b09      	cmp	r3, #9
 800a5ae:	d868      	bhi.n	800a682 <_dtoa_r+0x2ba>
 800a5b0:	2b05      	cmp	r3, #5
 800a5b2:	bfc4      	itt	gt
 800a5b4:	3b04      	subgt	r3, #4
 800a5b6:	9307      	strgt	r3, [sp, #28]
 800a5b8:	9b07      	ldr	r3, [sp, #28]
 800a5ba:	f1a3 0302 	sub.w	r3, r3, #2
 800a5be:	bfcc      	ite	gt
 800a5c0:	2500      	movgt	r5, #0
 800a5c2:	2501      	movle	r5, #1
 800a5c4:	2b03      	cmp	r3, #3
 800a5c6:	f200 8085 	bhi.w	800a6d4 <_dtoa_r+0x30c>
 800a5ca:	e8df f003 	tbb	[pc, r3]
 800a5ce:	3b2e      	.short	0x3b2e
 800a5d0:	5839      	.short	0x5839
 800a5d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a5d6:	441d      	add	r5, r3
 800a5d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a5dc:	2b20      	cmp	r3, #32
 800a5de:	bfc1      	itttt	gt
 800a5e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a5e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a5e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a5ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a5f0:	bfd6      	itet	le
 800a5f2:	f1c3 0320 	rsble	r3, r3, #32
 800a5f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a5fa:	fa06 f003 	lslle.w	r0, r6, r3
 800a5fe:	f7f5 ffa1 	bl	8000544 <__aeabi_ui2d>
 800a602:	2201      	movs	r2, #1
 800a604:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a608:	3d01      	subs	r5, #1
 800a60a:	920e      	str	r2, [sp, #56]	; 0x38
 800a60c:	e76f      	b.n	800a4ee <_dtoa_r+0x126>
 800a60e:	2301      	movs	r3, #1
 800a610:	e7b3      	b.n	800a57a <_dtoa_r+0x1b2>
 800a612:	900c      	str	r0, [sp, #48]	; 0x30
 800a614:	e7b2      	b.n	800a57c <_dtoa_r+0x1b4>
 800a616:	9b05      	ldr	r3, [sp, #20]
 800a618:	eba3 030b 	sub.w	r3, r3, fp
 800a61c:	9305      	str	r3, [sp, #20]
 800a61e:	f1cb 0300 	rsb	r3, fp, #0
 800a622:	9308      	str	r3, [sp, #32]
 800a624:	2300      	movs	r3, #0
 800a626:	930b      	str	r3, [sp, #44]	; 0x2c
 800a628:	e7bf      	b.n	800a5aa <_dtoa_r+0x1e2>
 800a62a:	2300      	movs	r3, #0
 800a62c:	9309      	str	r3, [sp, #36]	; 0x24
 800a62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a630:	2b00      	cmp	r3, #0
 800a632:	dc52      	bgt.n	800a6da <_dtoa_r+0x312>
 800a634:	2301      	movs	r3, #1
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	9304      	str	r3, [sp, #16]
 800a63a:	461a      	mov	r2, r3
 800a63c:	920a      	str	r2, [sp, #40]	; 0x28
 800a63e:	e00b      	b.n	800a658 <_dtoa_r+0x290>
 800a640:	2301      	movs	r3, #1
 800a642:	e7f3      	b.n	800a62c <_dtoa_r+0x264>
 800a644:	2300      	movs	r3, #0
 800a646:	9309      	str	r3, [sp, #36]	; 0x24
 800a648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a64a:	445b      	add	r3, fp
 800a64c:	9301      	str	r3, [sp, #4]
 800a64e:	3301      	adds	r3, #1
 800a650:	2b01      	cmp	r3, #1
 800a652:	9304      	str	r3, [sp, #16]
 800a654:	bfb8      	it	lt
 800a656:	2301      	movlt	r3, #1
 800a658:	69e0      	ldr	r0, [r4, #28]
 800a65a:	2100      	movs	r1, #0
 800a65c:	2204      	movs	r2, #4
 800a65e:	f102 0614 	add.w	r6, r2, #20
 800a662:	429e      	cmp	r6, r3
 800a664:	d93d      	bls.n	800a6e2 <_dtoa_r+0x31a>
 800a666:	6041      	str	r1, [r0, #4]
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 fd9f 	bl	800b1ac <_Balloc>
 800a66e:	9000      	str	r0, [sp, #0]
 800a670:	2800      	cmp	r0, #0
 800a672:	d139      	bne.n	800a6e8 <_dtoa_r+0x320>
 800a674:	4b16      	ldr	r3, [pc, #88]	; (800a6d0 <_dtoa_r+0x308>)
 800a676:	4602      	mov	r2, r0
 800a678:	f240 11af 	movw	r1, #431	; 0x1af
 800a67c:	e6bd      	b.n	800a3fa <_dtoa_r+0x32>
 800a67e:	2301      	movs	r3, #1
 800a680:	e7e1      	b.n	800a646 <_dtoa_r+0x27e>
 800a682:	2501      	movs	r5, #1
 800a684:	2300      	movs	r3, #0
 800a686:	9307      	str	r3, [sp, #28]
 800a688:	9509      	str	r5, [sp, #36]	; 0x24
 800a68a:	f04f 33ff 	mov.w	r3, #4294967295
 800a68e:	9301      	str	r3, [sp, #4]
 800a690:	9304      	str	r3, [sp, #16]
 800a692:	2200      	movs	r2, #0
 800a694:	2312      	movs	r3, #18
 800a696:	e7d1      	b.n	800a63c <_dtoa_r+0x274>
 800a698:	636f4361 	.word	0x636f4361
 800a69c:	3fd287a7 	.word	0x3fd287a7
 800a6a0:	8b60c8b3 	.word	0x8b60c8b3
 800a6a4:	3fc68a28 	.word	0x3fc68a28
 800a6a8:	509f79fb 	.word	0x509f79fb
 800a6ac:	3fd34413 	.word	0x3fd34413
 800a6b0:	0800c4e1 	.word	0x0800c4e1
 800a6b4:	0800c4f8 	.word	0x0800c4f8
 800a6b8:	7ff00000 	.word	0x7ff00000
 800a6bc:	0800c4dd 	.word	0x0800c4dd
 800a6c0:	0800c4d4 	.word	0x0800c4d4
 800a6c4:	0800c4b1 	.word	0x0800c4b1
 800a6c8:	3ff80000 	.word	0x3ff80000
 800a6cc:	0800c5e8 	.word	0x0800c5e8
 800a6d0:	0800c550 	.word	0x0800c550
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d8:	e7d7      	b.n	800a68a <_dtoa_r+0x2c2>
 800a6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6dc:	9301      	str	r3, [sp, #4]
 800a6de:	9304      	str	r3, [sp, #16]
 800a6e0:	e7ba      	b.n	800a658 <_dtoa_r+0x290>
 800a6e2:	3101      	adds	r1, #1
 800a6e4:	0052      	lsls	r2, r2, #1
 800a6e6:	e7ba      	b.n	800a65e <_dtoa_r+0x296>
 800a6e8:	69e3      	ldr	r3, [r4, #28]
 800a6ea:	9a00      	ldr	r2, [sp, #0]
 800a6ec:	601a      	str	r2, [r3, #0]
 800a6ee:	9b04      	ldr	r3, [sp, #16]
 800a6f0:	2b0e      	cmp	r3, #14
 800a6f2:	f200 80a8 	bhi.w	800a846 <_dtoa_r+0x47e>
 800a6f6:	2d00      	cmp	r5, #0
 800a6f8:	f000 80a5 	beq.w	800a846 <_dtoa_r+0x47e>
 800a6fc:	f1bb 0f00 	cmp.w	fp, #0
 800a700:	dd38      	ble.n	800a774 <_dtoa_r+0x3ac>
 800a702:	4bc0      	ldr	r3, [pc, #768]	; (800aa04 <_dtoa_r+0x63c>)
 800a704:	f00b 020f 	and.w	r2, fp, #15
 800a708:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a70c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a710:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a714:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a718:	d019      	beq.n	800a74e <_dtoa_r+0x386>
 800a71a:	4bbb      	ldr	r3, [pc, #748]	; (800aa08 <_dtoa_r+0x640>)
 800a71c:	ec51 0b18 	vmov	r0, r1, d8
 800a720:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a724:	f7f6 f8b2 	bl	800088c <__aeabi_ddiv>
 800a728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a72c:	f008 080f 	and.w	r8, r8, #15
 800a730:	2503      	movs	r5, #3
 800a732:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800aa08 <_dtoa_r+0x640>
 800a736:	f1b8 0f00 	cmp.w	r8, #0
 800a73a:	d10a      	bne.n	800a752 <_dtoa_r+0x38a>
 800a73c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a740:	4632      	mov	r2, r6
 800a742:	463b      	mov	r3, r7
 800a744:	f7f6 f8a2 	bl	800088c <__aeabi_ddiv>
 800a748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a74c:	e02b      	b.n	800a7a6 <_dtoa_r+0x3de>
 800a74e:	2502      	movs	r5, #2
 800a750:	e7ef      	b.n	800a732 <_dtoa_r+0x36a>
 800a752:	f018 0f01 	tst.w	r8, #1
 800a756:	d008      	beq.n	800a76a <_dtoa_r+0x3a2>
 800a758:	4630      	mov	r0, r6
 800a75a:	4639      	mov	r1, r7
 800a75c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a760:	f7f5 ff6a 	bl	8000638 <__aeabi_dmul>
 800a764:	3501      	adds	r5, #1
 800a766:	4606      	mov	r6, r0
 800a768:	460f      	mov	r7, r1
 800a76a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a76e:	f109 0908 	add.w	r9, r9, #8
 800a772:	e7e0      	b.n	800a736 <_dtoa_r+0x36e>
 800a774:	f000 809f 	beq.w	800a8b6 <_dtoa_r+0x4ee>
 800a778:	f1cb 0600 	rsb	r6, fp, #0
 800a77c:	4ba1      	ldr	r3, [pc, #644]	; (800aa04 <_dtoa_r+0x63c>)
 800a77e:	4fa2      	ldr	r7, [pc, #648]	; (800aa08 <_dtoa_r+0x640>)
 800a780:	f006 020f 	and.w	r2, r6, #15
 800a784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78c:	ec51 0b18 	vmov	r0, r1, d8
 800a790:	f7f5 ff52 	bl	8000638 <__aeabi_dmul>
 800a794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a798:	1136      	asrs	r6, r6, #4
 800a79a:	2300      	movs	r3, #0
 800a79c:	2502      	movs	r5, #2
 800a79e:	2e00      	cmp	r6, #0
 800a7a0:	d17e      	bne.n	800a8a0 <_dtoa_r+0x4d8>
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1d0      	bne.n	800a748 <_dtoa_r+0x380>
 800a7a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f000 8084 	beq.w	800a8ba <_dtoa_r+0x4f2>
 800a7b2:	4b96      	ldr	r3, [pc, #600]	; (800aa0c <_dtoa_r+0x644>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	f7f6 f9af 	bl	8000b1c <__aeabi_dcmplt>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d07b      	beq.n	800a8ba <_dtoa_r+0x4f2>
 800a7c2:	9b04      	ldr	r3, [sp, #16]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d078      	beq.n	800a8ba <_dtoa_r+0x4f2>
 800a7c8:	9b01      	ldr	r3, [sp, #4]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	dd39      	ble.n	800a842 <_dtoa_r+0x47a>
 800a7ce:	4b90      	ldr	r3, [pc, #576]	; (800aa10 <_dtoa_r+0x648>)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	4640      	mov	r0, r8
 800a7d4:	4649      	mov	r1, r9
 800a7d6:	f7f5 ff2f 	bl	8000638 <__aeabi_dmul>
 800a7da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7de:	9e01      	ldr	r6, [sp, #4]
 800a7e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a7e4:	3501      	adds	r5, #1
 800a7e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f7f5 feba 	bl	8000564 <__aeabi_i2d>
 800a7f0:	4642      	mov	r2, r8
 800a7f2:	464b      	mov	r3, r9
 800a7f4:	f7f5 ff20 	bl	8000638 <__aeabi_dmul>
 800a7f8:	4b86      	ldr	r3, [pc, #536]	; (800aa14 <_dtoa_r+0x64c>)
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f7f5 fd66 	bl	80002cc <__adddf3>
 800a800:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a808:	9303      	str	r3, [sp, #12]
 800a80a:	2e00      	cmp	r6, #0
 800a80c:	d158      	bne.n	800a8c0 <_dtoa_r+0x4f8>
 800a80e:	4b82      	ldr	r3, [pc, #520]	; (800aa18 <_dtoa_r+0x650>)
 800a810:	2200      	movs	r2, #0
 800a812:	4640      	mov	r0, r8
 800a814:	4649      	mov	r1, r9
 800a816:	f7f5 fd57 	bl	80002c8 <__aeabi_dsub>
 800a81a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a81e:	4680      	mov	r8, r0
 800a820:	4689      	mov	r9, r1
 800a822:	f7f6 f999 	bl	8000b58 <__aeabi_dcmpgt>
 800a826:	2800      	cmp	r0, #0
 800a828:	f040 8296 	bne.w	800ad58 <_dtoa_r+0x990>
 800a82c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a830:	4640      	mov	r0, r8
 800a832:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a836:	4649      	mov	r1, r9
 800a838:	f7f6 f970 	bl	8000b1c <__aeabi_dcmplt>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	f040 8289 	bne.w	800ad54 <_dtoa_r+0x98c>
 800a842:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a846:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f2c0 814e 	blt.w	800aaea <_dtoa_r+0x722>
 800a84e:	f1bb 0f0e 	cmp.w	fp, #14
 800a852:	f300 814a 	bgt.w	800aaea <_dtoa_r+0x722>
 800a856:	4b6b      	ldr	r3, [pc, #428]	; (800aa04 <_dtoa_r+0x63c>)
 800a858:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a85c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a862:	2b00      	cmp	r3, #0
 800a864:	f280 80dc 	bge.w	800aa20 <_dtoa_r+0x658>
 800a868:	9b04      	ldr	r3, [sp, #16]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f300 80d8 	bgt.w	800aa20 <_dtoa_r+0x658>
 800a870:	f040 826f 	bne.w	800ad52 <_dtoa_r+0x98a>
 800a874:	4b68      	ldr	r3, [pc, #416]	; (800aa18 <_dtoa_r+0x650>)
 800a876:	2200      	movs	r2, #0
 800a878:	4640      	mov	r0, r8
 800a87a:	4649      	mov	r1, r9
 800a87c:	f7f5 fedc 	bl	8000638 <__aeabi_dmul>
 800a880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a884:	f7f6 f95e 	bl	8000b44 <__aeabi_dcmpge>
 800a888:	9e04      	ldr	r6, [sp, #16]
 800a88a:	4637      	mov	r7, r6
 800a88c:	2800      	cmp	r0, #0
 800a88e:	f040 8245 	bne.w	800ad1c <_dtoa_r+0x954>
 800a892:	9d00      	ldr	r5, [sp, #0]
 800a894:	2331      	movs	r3, #49	; 0x31
 800a896:	f805 3b01 	strb.w	r3, [r5], #1
 800a89a:	f10b 0b01 	add.w	fp, fp, #1
 800a89e:	e241      	b.n	800ad24 <_dtoa_r+0x95c>
 800a8a0:	07f2      	lsls	r2, r6, #31
 800a8a2:	d505      	bpl.n	800a8b0 <_dtoa_r+0x4e8>
 800a8a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8a8:	f7f5 fec6 	bl	8000638 <__aeabi_dmul>
 800a8ac:	3501      	adds	r5, #1
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	1076      	asrs	r6, r6, #1
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	e773      	b.n	800a79e <_dtoa_r+0x3d6>
 800a8b6:	2502      	movs	r5, #2
 800a8b8:	e775      	b.n	800a7a6 <_dtoa_r+0x3de>
 800a8ba:	9e04      	ldr	r6, [sp, #16]
 800a8bc:	465f      	mov	r7, fp
 800a8be:	e792      	b.n	800a7e6 <_dtoa_r+0x41e>
 800a8c0:	9900      	ldr	r1, [sp, #0]
 800a8c2:	4b50      	ldr	r3, [pc, #320]	; (800aa04 <_dtoa_r+0x63c>)
 800a8c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8c8:	4431      	add	r1, r6
 800a8ca:	9102      	str	r1, [sp, #8]
 800a8cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8ce:	eeb0 9a47 	vmov.f32	s18, s14
 800a8d2:	eef0 9a67 	vmov.f32	s19, s15
 800a8d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a8da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8de:	2900      	cmp	r1, #0
 800a8e0:	d044      	beq.n	800a96c <_dtoa_r+0x5a4>
 800a8e2:	494e      	ldr	r1, [pc, #312]	; (800aa1c <_dtoa_r+0x654>)
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	f7f5 ffd1 	bl	800088c <__aeabi_ddiv>
 800a8ea:	ec53 2b19 	vmov	r2, r3, d9
 800a8ee:	f7f5 fceb 	bl	80002c8 <__aeabi_dsub>
 800a8f2:	9d00      	ldr	r5, [sp, #0]
 800a8f4:	ec41 0b19 	vmov	d9, r0, r1
 800a8f8:	4649      	mov	r1, r9
 800a8fa:	4640      	mov	r0, r8
 800a8fc:	f7f6 f94c 	bl	8000b98 <__aeabi_d2iz>
 800a900:	4606      	mov	r6, r0
 800a902:	f7f5 fe2f 	bl	8000564 <__aeabi_i2d>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	4640      	mov	r0, r8
 800a90c:	4649      	mov	r1, r9
 800a90e:	f7f5 fcdb 	bl	80002c8 <__aeabi_dsub>
 800a912:	3630      	adds	r6, #48	; 0x30
 800a914:	f805 6b01 	strb.w	r6, [r5], #1
 800a918:	ec53 2b19 	vmov	r2, r3, d9
 800a91c:	4680      	mov	r8, r0
 800a91e:	4689      	mov	r9, r1
 800a920:	f7f6 f8fc 	bl	8000b1c <__aeabi_dcmplt>
 800a924:	2800      	cmp	r0, #0
 800a926:	d164      	bne.n	800a9f2 <_dtoa_r+0x62a>
 800a928:	4642      	mov	r2, r8
 800a92a:	464b      	mov	r3, r9
 800a92c:	4937      	ldr	r1, [pc, #220]	; (800aa0c <_dtoa_r+0x644>)
 800a92e:	2000      	movs	r0, #0
 800a930:	f7f5 fcca 	bl	80002c8 <__aeabi_dsub>
 800a934:	ec53 2b19 	vmov	r2, r3, d9
 800a938:	f7f6 f8f0 	bl	8000b1c <__aeabi_dcmplt>
 800a93c:	2800      	cmp	r0, #0
 800a93e:	f040 80b6 	bne.w	800aaae <_dtoa_r+0x6e6>
 800a942:	9b02      	ldr	r3, [sp, #8]
 800a944:	429d      	cmp	r5, r3
 800a946:	f43f af7c 	beq.w	800a842 <_dtoa_r+0x47a>
 800a94a:	4b31      	ldr	r3, [pc, #196]	; (800aa10 <_dtoa_r+0x648>)
 800a94c:	ec51 0b19 	vmov	r0, r1, d9
 800a950:	2200      	movs	r2, #0
 800a952:	f7f5 fe71 	bl	8000638 <__aeabi_dmul>
 800a956:	4b2e      	ldr	r3, [pc, #184]	; (800aa10 <_dtoa_r+0x648>)
 800a958:	ec41 0b19 	vmov	d9, r0, r1
 800a95c:	2200      	movs	r2, #0
 800a95e:	4640      	mov	r0, r8
 800a960:	4649      	mov	r1, r9
 800a962:	f7f5 fe69 	bl	8000638 <__aeabi_dmul>
 800a966:	4680      	mov	r8, r0
 800a968:	4689      	mov	r9, r1
 800a96a:	e7c5      	b.n	800a8f8 <_dtoa_r+0x530>
 800a96c:	ec51 0b17 	vmov	r0, r1, d7
 800a970:	f7f5 fe62 	bl	8000638 <__aeabi_dmul>
 800a974:	9b02      	ldr	r3, [sp, #8]
 800a976:	9d00      	ldr	r5, [sp, #0]
 800a978:	930f      	str	r3, [sp, #60]	; 0x3c
 800a97a:	ec41 0b19 	vmov	d9, r0, r1
 800a97e:	4649      	mov	r1, r9
 800a980:	4640      	mov	r0, r8
 800a982:	f7f6 f909 	bl	8000b98 <__aeabi_d2iz>
 800a986:	4606      	mov	r6, r0
 800a988:	f7f5 fdec 	bl	8000564 <__aeabi_i2d>
 800a98c:	3630      	adds	r6, #48	; 0x30
 800a98e:	4602      	mov	r2, r0
 800a990:	460b      	mov	r3, r1
 800a992:	4640      	mov	r0, r8
 800a994:	4649      	mov	r1, r9
 800a996:	f7f5 fc97 	bl	80002c8 <__aeabi_dsub>
 800a99a:	f805 6b01 	strb.w	r6, [r5], #1
 800a99e:	9b02      	ldr	r3, [sp, #8]
 800a9a0:	429d      	cmp	r5, r3
 800a9a2:	4680      	mov	r8, r0
 800a9a4:	4689      	mov	r9, r1
 800a9a6:	f04f 0200 	mov.w	r2, #0
 800a9aa:	d124      	bne.n	800a9f6 <_dtoa_r+0x62e>
 800a9ac:	4b1b      	ldr	r3, [pc, #108]	; (800aa1c <_dtoa_r+0x654>)
 800a9ae:	ec51 0b19 	vmov	r0, r1, d9
 800a9b2:	f7f5 fc8b 	bl	80002cc <__adddf3>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	4640      	mov	r0, r8
 800a9bc:	4649      	mov	r1, r9
 800a9be:	f7f6 f8cb 	bl	8000b58 <__aeabi_dcmpgt>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	d173      	bne.n	800aaae <_dtoa_r+0x6e6>
 800a9c6:	ec53 2b19 	vmov	r2, r3, d9
 800a9ca:	4914      	ldr	r1, [pc, #80]	; (800aa1c <_dtoa_r+0x654>)
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	f7f5 fc7b 	bl	80002c8 <__aeabi_dsub>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	4640      	mov	r0, r8
 800a9d8:	4649      	mov	r1, r9
 800a9da:	f7f6 f89f 	bl	8000b1c <__aeabi_dcmplt>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	f43f af2f 	beq.w	800a842 <_dtoa_r+0x47a>
 800a9e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a9e6:	1e6b      	subs	r3, r5, #1
 800a9e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a9ee:	2b30      	cmp	r3, #48	; 0x30
 800a9f0:	d0f8      	beq.n	800a9e4 <_dtoa_r+0x61c>
 800a9f2:	46bb      	mov	fp, r7
 800a9f4:	e04a      	b.n	800aa8c <_dtoa_r+0x6c4>
 800a9f6:	4b06      	ldr	r3, [pc, #24]	; (800aa10 <_dtoa_r+0x648>)
 800a9f8:	f7f5 fe1e 	bl	8000638 <__aeabi_dmul>
 800a9fc:	4680      	mov	r8, r0
 800a9fe:	4689      	mov	r9, r1
 800aa00:	e7bd      	b.n	800a97e <_dtoa_r+0x5b6>
 800aa02:	bf00      	nop
 800aa04:	0800c5e8 	.word	0x0800c5e8
 800aa08:	0800c5c0 	.word	0x0800c5c0
 800aa0c:	3ff00000 	.word	0x3ff00000
 800aa10:	40240000 	.word	0x40240000
 800aa14:	401c0000 	.word	0x401c0000
 800aa18:	40140000 	.word	0x40140000
 800aa1c:	3fe00000 	.word	0x3fe00000
 800aa20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa24:	9d00      	ldr	r5, [sp, #0]
 800aa26:	4642      	mov	r2, r8
 800aa28:	464b      	mov	r3, r9
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	f7f5 ff2d 	bl	800088c <__aeabi_ddiv>
 800aa32:	f7f6 f8b1 	bl	8000b98 <__aeabi_d2iz>
 800aa36:	9001      	str	r0, [sp, #4]
 800aa38:	f7f5 fd94 	bl	8000564 <__aeabi_i2d>
 800aa3c:	4642      	mov	r2, r8
 800aa3e:	464b      	mov	r3, r9
 800aa40:	f7f5 fdfa 	bl	8000638 <__aeabi_dmul>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4630      	mov	r0, r6
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	f7f5 fc3c 	bl	80002c8 <__aeabi_dsub>
 800aa50:	9e01      	ldr	r6, [sp, #4]
 800aa52:	9f04      	ldr	r7, [sp, #16]
 800aa54:	3630      	adds	r6, #48	; 0x30
 800aa56:	f805 6b01 	strb.w	r6, [r5], #1
 800aa5a:	9e00      	ldr	r6, [sp, #0]
 800aa5c:	1bae      	subs	r6, r5, r6
 800aa5e:	42b7      	cmp	r7, r6
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	d134      	bne.n	800aad0 <_dtoa_r+0x708>
 800aa66:	f7f5 fc31 	bl	80002cc <__adddf3>
 800aa6a:	4642      	mov	r2, r8
 800aa6c:	464b      	mov	r3, r9
 800aa6e:	4606      	mov	r6, r0
 800aa70:	460f      	mov	r7, r1
 800aa72:	f7f6 f871 	bl	8000b58 <__aeabi_dcmpgt>
 800aa76:	b9c8      	cbnz	r0, 800aaac <_dtoa_r+0x6e4>
 800aa78:	4642      	mov	r2, r8
 800aa7a:	464b      	mov	r3, r9
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	4639      	mov	r1, r7
 800aa80:	f7f6 f842 	bl	8000b08 <__aeabi_dcmpeq>
 800aa84:	b110      	cbz	r0, 800aa8c <_dtoa_r+0x6c4>
 800aa86:	9b01      	ldr	r3, [sp, #4]
 800aa88:	07db      	lsls	r3, r3, #31
 800aa8a:	d40f      	bmi.n	800aaac <_dtoa_r+0x6e4>
 800aa8c:	4651      	mov	r1, sl
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f000 fbcc 	bl	800b22c <_Bfree>
 800aa94:	2300      	movs	r3, #0
 800aa96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa98:	702b      	strb	r3, [r5, #0]
 800aa9a:	f10b 0301 	add.w	r3, fp, #1
 800aa9e:	6013      	str	r3, [r2, #0]
 800aaa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f43f ace2 	beq.w	800a46c <_dtoa_r+0xa4>
 800aaa8:	601d      	str	r5, [r3, #0]
 800aaaa:	e4df      	b.n	800a46c <_dtoa_r+0xa4>
 800aaac:	465f      	mov	r7, fp
 800aaae:	462b      	mov	r3, r5
 800aab0:	461d      	mov	r5, r3
 800aab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aab6:	2a39      	cmp	r2, #57	; 0x39
 800aab8:	d106      	bne.n	800aac8 <_dtoa_r+0x700>
 800aaba:	9a00      	ldr	r2, [sp, #0]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d1f7      	bne.n	800aab0 <_dtoa_r+0x6e8>
 800aac0:	9900      	ldr	r1, [sp, #0]
 800aac2:	2230      	movs	r2, #48	; 0x30
 800aac4:	3701      	adds	r7, #1
 800aac6:	700a      	strb	r2, [r1, #0]
 800aac8:	781a      	ldrb	r2, [r3, #0]
 800aaca:	3201      	adds	r2, #1
 800aacc:	701a      	strb	r2, [r3, #0]
 800aace:	e790      	b.n	800a9f2 <_dtoa_r+0x62a>
 800aad0:	4ba3      	ldr	r3, [pc, #652]	; (800ad60 <_dtoa_r+0x998>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	f7f5 fdb0 	bl	8000638 <__aeabi_dmul>
 800aad8:	2200      	movs	r2, #0
 800aada:	2300      	movs	r3, #0
 800aadc:	4606      	mov	r6, r0
 800aade:	460f      	mov	r7, r1
 800aae0:	f7f6 f812 	bl	8000b08 <__aeabi_dcmpeq>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d09e      	beq.n	800aa26 <_dtoa_r+0x65e>
 800aae8:	e7d0      	b.n	800aa8c <_dtoa_r+0x6c4>
 800aaea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaec:	2a00      	cmp	r2, #0
 800aaee:	f000 80ca 	beq.w	800ac86 <_dtoa_r+0x8be>
 800aaf2:	9a07      	ldr	r2, [sp, #28]
 800aaf4:	2a01      	cmp	r2, #1
 800aaf6:	f300 80ad 	bgt.w	800ac54 <_dtoa_r+0x88c>
 800aafa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aafc:	2a00      	cmp	r2, #0
 800aafe:	f000 80a5 	beq.w	800ac4c <_dtoa_r+0x884>
 800ab02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab06:	9e08      	ldr	r6, [sp, #32]
 800ab08:	9d05      	ldr	r5, [sp, #20]
 800ab0a:	9a05      	ldr	r2, [sp, #20]
 800ab0c:	441a      	add	r2, r3
 800ab0e:	9205      	str	r2, [sp, #20]
 800ab10:	9a06      	ldr	r2, [sp, #24]
 800ab12:	2101      	movs	r1, #1
 800ab14:	441a      	add	r2, r3
 800ab16:	4620      	mov	r0, r4
 800ab18:	9206      	str	r2, [sp, #24]
 800ab1a:	f000 fc3d 	bl	800b398 <__i2b>
 800ab1e:	4607      	mov	r7, r0
 800ab20:	b165      	cbz	r5, 800ab3c <_dtoa_r+0x774>
 800ab22:	9b06      	ldr	r3, [sp, #24]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	dd09      	ble.n	800ab3c <_dtoa_r+0x774>
 800ab28:	42ab      	cmp	r3, r5
 800ab2a:	9a05      	ldr	r2, [sp, #20]
 800ab2c:	bfa8      	it	ge
 800ab2e:	462b      	movge	r3, r5
 800ab30:	1ad2      	subs	r2, r2, r3
 800ab32:	9205      	str	r2, [sp, #20]
 800ab34:	9a06      	ldr	r2, [sp, #24]
 800ab36:	1aed      	subs	r5, r5, r3
 800ab38:	1ad3      	subs	r3, r2, r3
 800ab3a:	9306      	str	r3, [sp, #24]
 800ab3c:	9b08      	ldr	r3, [sp, #32]
 800ab3e:	b1f3      	cbz	r3, 800ab7e <_dtoa_r+0x7b6>
 800ab40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f000 80a3 	beq.w	800ac8e <_dtoa_r+0x8c6>
 800ab48:	2e00      	cmp	r6, #0
 800ab4a:	dd10      	ble.n	800ab6e <_dtoa_r+0x7a6>
 800ab4c:	4639      	mov	r1, r7
 800ab4e:	4632      	mov	r2, r6
 800ab50:	4620      	mov	r0, r4
 800ab52:	f000 fce1 	bl	800b518 <__pow5mult>
 800ab56:	4652      	mov	r2, sl
 800ab58:	4601      	mov	r1, r0
 800ab5a:	4607      	mov	r7, r0
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	f000 fc31 	bl	800b3c4 <__multiply>
 800ab62:	4651      	mov	r1, sl
 800ab64:	4680      	mov	r8, r0
 800ab66:	4620      	mov	r0, r4
 800ab68:	f000 fb60 	bl	800b22c <_Bfree>
 800ab6c:	46c2      	mov	sl, r8
 800ab6e:	9b08      	ldr	r3, [sp, #32]
 800ab70:	1b9a      	subs	r2, r3, r6
 800ab72:	d004      	beq.n	800ab7e <_dtoa_r+0x7b6>
 800ab74:	4651      	mov	r1, sl
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 fcce 	bl	800b518 <__pow5mult>
 800ab7c:	4682      	mov	sl, r0
 800ab7e:	2101      	movs	r1, #1
 800ab80:	4620      	mov	r0, r4
 800ab82:	f000 fc09 	bl	800b398 <__i2b>
 800ab86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	f340 8081 	ble.w	800ac92 <_dtoa_r+0x8ca>
 800ab90:	461a      	mov	r2, r3
 800ab92:	4601      	mov	r1, r0
 800ab94:	4620      	mov	r0, r4
 800ab96:	f000 fcbf 	bl	800b518 <__pow5mult>
 800ab9a:	9b07      	ldr	r3, [sp, #28]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	4606      	mov	r6, r0
 800aba0:	dd7a      	ble.n	800ac98 <_dtoa_r+0x8d0>
 800aba2:	f04f 0800 	mov.w	r8, #0
 800aba6:	6933      	ldr	r3, [r6, #16]
 800aba8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800abac:	6918      	ldr	r0, [r3, #16]
 800abae:	f000 fba5 	bl	800b2fc <__hi0bits>
 800abb2:	f1c0 0020 	rsb	r0, r0, #32
 800abb6:	9b06      	ldr	r3, [sp, #24]
 800abb8:	4418      	add	r0, r3
 800abba:	f010 001f 	ands.w	r0, r0, #31
 800abbe:	f000 8094 	beq.w	800acea <_dtoa_r+0x922>
 800abc2:	f1c0 0320 	rsb	r3, r0, #32
 800abc6:	2b04      	cmp	r3, #4
 800abc8:	f340 8085 	ble.w	800acd6 <_dtoa_r+0x90e>
 800abcc:	9b05      	ldr	r3, [sp, #20]
 800abce:	f1c0 001c 	rsb	r0, r0, #28
 800abd2:	4403      	add	r3, r0
 800abd4:	9305      	str	r3, [sp, #20]
 800abd6:	9b06      	ldr	r3, [sp, #24]
 800abd8:	4403      	add	r3, r0
 800abda:	4405      	add	r5, r0
 800abdc:	9306      	str	r3, [sp, #24]
 800abde:	9b05      	ldr	r3, [sp, #20]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	dd05      	ble.n	800abf0 <_dtoa_r+0x828>
 800abe4:	4651      	mov	r1, sl
 800abe6:	461a      	mov	r2, r3
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 fcef 	bl	800b5cc <__lshift>
 800abee:	4682      	mov	sl, r0
 800abf0:	9b06      	ldr	r3, [sp, #24]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	dd05      	ble.n	800ac02 <_dtoa_r+0x83a>
 800abf6:	4631      	mov	r1, r6
 800abf8:	461a      	mov	r2, r3
 800abfa:	4620      	mov	r0, r4
 800abfc:	f000 fce6 	bl	800b5cc <__lshift>
 800ac00:	4606      	mov	r6, r0
 800ac02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d072      	beq.n	800acee <_dtoa_r+0x926>
 800ac08:	4631      	mov	r1, r6
 800ac0a:	4650      	mov	r0, sl
 800ac0c:	f000 fd4a 	bl	800b6a4 <__mcmp>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	da6c      	bge.n	800acee <_dtoa_r+0x926>
 800ac14:	2300      	movs	r3, #0
 800ac16:	4651      	mov	r1, sl
 800ac18:	220a      	movs	r2, #10
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f000 fb28 	bl	800b270 <__multadd>
 800ac20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac26:	4682      	mov	sl, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f000 81b0 	beq.w	800af8e <_dtoa_r+0xbc6>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	4639      	mov	r1, r7
 800ac32:	220a      	movs	r2, #10
 800ac34:	4620      	mov	r0, r4
 800ac36:	f000 fb1b 	bl	800b270 <__multadd>
 800ac3a:	9b01      	ldr	r3, [sp, #4]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	4607      	mov	r7, r0
 800ac40:	f300 8096 	bgt.w	800ad70 <_dtoa_r+0x9a8>
 800ac44:	9b07      	ldr	r3, [sp, #28]
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	dc59      	bgt.n	800acfe <_dtoa_r+0x936>
 800ac4a:	e091      	b.n	800ad70 <_dtoa_r+0x9a8>
 800ac4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac52:	e758      	b.n	800ab06 <_dtoa_r+0x73e>
 800ac54:	9b04      	ldr	r3, [sp, #16]
 800ac56:	1e5e      	subs	r6, r3, #1
 800ac58:	9b08      	ldr	r3, [sp, #32]
 800ac5a:	42b3      	cmp	r3, r6
 800ac5c:	bfbf      	itttt	lt
 800ac5e:	9b08      	ldrlt	r3, [sp, #32]
 800ac60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ac62:	9608      	strlt	r6, [sp, #32]
 800ac64:	1af3      	sublt	r3, r6, r3
 800ac66:	bfb4      	ite	lt
 800ac68:	18d2      	addlt	r2, r2, r3
 800ac6a:	1b9e      	subge	r6, r3, r6
 800ac6c:	9b04      	ldr	r3, [sp, #16]
 800ac6e:	bfbc      	itt	lt
 800ac70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ac72:	2600      	movlt	r6, #0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	bfb7      	itett	lt
 800ac78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ac7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ac80:	1a9d      	sublt	r5, r3, r2
 800ac82:	2300      	movlt	r3, #0
 800ac84:	e741      	b.n	800ab0a <_dtoa_r+0x742>
 800ac86:	9e08      	ldr	r6, [sp, #32]
 800ac88:	9d05      	ldr	r5, [sp, #20]
 800ac8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ac8c:	e748      	b.n	800ab20 <_dtoa_r+0x758>
 800ac8e:	9a08      	ldr	r2, [sp, #32]
 800ac90:	e770      	b.n	800ab74 <_dtoa_r+0x7ac>
 800ac92:	9b07      	ldr	r3, [sp, #28]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	dc19      	bgt.n	800accc <_dtoa_r+0x904>
 800ac98:	9b02      	ldr	r3, [sp, #8]
 800ac9a:	b9bb      	cbnz	r3, 800accc <_dtoa_r+0x904>
 800ac9c:	9b03      	ldr	r3, [sp, #12]
 800ac9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aca2:	b99b      	cbnz	r3, 800accc <_dtoa_r+0x904>
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acaa:	0d1b      	lsrs	r3, r3, #20
 800acac:	051b      	lsls	r3, r3, #20
 800acae:	b183      	cbz	r3, 800acd2 <_dtoa_r+0x90a>
 800acb0:	9b05      	ldr	r3, [sp, #20]
 800acb2:	3301      	adds	r3, #1
 800acb4:	9305      	str	r3, [sp, #20]
 800acb6:	9b06      	ldr	r3, [sp, #24]
 800acb8:	3301      	adds	r3, #1
 800acba:	9306      	str	r3, [sp, #24]
 800acbc:	f04f 0801 	mov.w	r8, #1
 800acc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f47f af6f 	bne.w	800aba6 <_dtoa_r+0x7de>
 800acc8:	2001      	movs	r0, #1
 800acca:	e774      	b.n	800abb6 <_dtoa_r+0x7ee>
 800accc:	f04f 0800 	mov.w	r8, #0
 800acd0:	e7f6      	b.n	800acc0 <_dtoa_r+0x8f8>
 800acd2:	4698      	mov	r8, r3
 800acd4:	e7f4      	b.n	800acc0 <_dtoa_r+0x8f8>
 800acd6:	d082      	beq.n	800abde <_dtoa_r+0x816>
 800acd8:	9a05      	ldr	r2, [sp, #20]
 800acda:	331c      	adds	r3, #28
 800acdc:	441a      	add	r2, r3
 800acde:	9205      	str	r2, [sp, #20]
 800ace0:	9a06      	ldr	r2, [sp, #24]
 800ace2:	441a      	add	r2, r3
 800ace4:	441d      	add	r5, r3
 800ace6:	9206      	str	r2, [sp, #24]
 800ace8:	e779      	b.n	800abde <_dtoa_r+0x816>
 800acea:	4603      	mov	r3, r0
 800acec:	e7f4      	b.n	800acd8 <_dtoa_r+0x910>
 800acee:	9b04      	ldr	r3, [sp, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	dc37      	bgt.n	800ad64 <_dtoa_r+0x99c>
 800acf4:	9b07      	ldr	r3, [sp, #28]
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	dd34      	ble.n	800ad64 <_dtoa_r+0x99c>
 800acfa:	9b04      	ldr	r3, [sp, #16]
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	9b01      	ldr	r3, [sp, #4]
 800ad00:	b963      	cbnz	r3, 800ad1c <_dtoa_r+0x954>
 800ad02:	4631      	mov	r1, r6
 800ad04:	2205      	movs	r2, #5
 800ad06:	4620      	mov	r0, r4
 800ad08:	f000 fab2 	bl	800b270 <__multadd>
 800ad0c:	4601      	mov	r1, r0
 800ad0e:	4606      	mov	r6, r0
 800ad10:	4650      	mov	r0, sl
 800ad12:	f000 fcc7 	bl	800b6a4 <__mcmp>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	f73f adbb 	bgt.w	800a892 <_dtoa_r+0x4ca>
 800ad1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad1e:	9d00      	ldr	r5, [sp, #0]
 800ad20:	ea6f 0b03 	mvn.w	fp, r3
 800ad24:	f04f 0800 	mov.w	r8, #0
 800ad28:	4631      	mov	r1, r6
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 fa7e 	bl	800b22c <_Bfree>
 800ad30:	2f00      	cmp	r7, #0
 800ad32:	f43f aeab 	beq.w	800aa8c <_dtoa_r+0x6c4>
 800ad36:	f1b8 0f00 	cmp.w	r8, #0
 800ad3a:	d005      	beq.n	800ad48 <_dtoa_r+0x980>
 800ad3c:	45b8      	cmp	r8, r7
 800ad3e:	d003      	beq.n	800ad48 <_dtoa_r+0x980>
 800ad40:	4641      	mov	r1, r8
 800ad42:	4620      	mov	r0, r4
 800ad44:	f000 fa72 	bl	800b22c <_Bfree>
 800ad48:	4639      	mov	r1, r7
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 fa6e 	bl	800b22c <_Bfree>
 800ad50:	e69c      	b.n	800aa8c <_dtoa_r+0x6c4>
 800ad52:	2600      	movs	r6, #0
 800ad54:	4637      	mov	r7, r6
 800ad56:	e7e1      	b.n	800ad1c <_dtoa_r+0x954>
 800ad58:	46bb      	mov	fp, r7
 800ad5a:	4637      	mov	r7, r6
 800ad5c:	e599      	b.n	800a892 <_dtoa_r+0x4ca>
 800ad5e:	bf00      	nop
 800ad60:	40240000 	.word	0x40240000
 800ad64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f000 80c8 	beq.w	800aefc <_dtoa_r+0xb34>
 800ad6c:	9b04      	ldr	r3, [sp, #16]
 800ad6e:	9301      	str	r3, [sp, #4]
 800ad70:	2d00      	cmp	r5, #0
 800ad72:	dd05      	ble.n	800ad80 <_dtoa_r+0x9b8>
 800ad74:	4639      	mov	r1, r7
 800ad76:	462a      	mov	r2, r5
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f000 fc27 	bl	800b5cc <__lshift>
 800ad7e:	4607      	mov	r7, r0
 800ad80:	f1b8 0f00 	cmp.w	r8, #0
 800ad84:	d05b      	beq.n	800ae3e <_dtoa_r+0xa76>
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f000 fa0f 	bl	800b1ac <_Balloc>
 800ad8e:	4605      	mov	r5, r0
 800ad90:	b928      	cbnz	r0, 800ad9e <_dtoa_r+0x9d6>
 800ad92:	4b83      	ldr	r3, [pc, #524]	; (800afa0 <_dtoa_r+0xbd8>)
 800ad94:	4602      	mov	r2, r0
 800ad96:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ad9a:	f7ff bb2e 	b.w	800a3fa <_dtoa_r+0x32>
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	3202      	adds	r2, #2
 800ada2:	0092      	lsls	r2, r2, #2
 800ada4:	f107 010c 	add.w	r1, r7, #12
 800ada8:	300c      	adds	r0, #12
 800adaa:	f001 f801 	bl	800bdb0 <memcpy>
 800adae:	2201      	movs	r2, #1
 800adb0:	4629      	mov	r1, r5
 800adb2:	4620      	mov	r0, r4
 800adb4:	f000 fc0a 	bl	800b5cc <__lshift>
 800adb8:	9b00      	ldr	r3, [sp, #0]
 800adba:	3301      	adds	r3, #1
 800adbc:	9304      	str	r3, [sp, #16]
 800adbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adc2:	4413      	add	r3, r2
 800adc4:	9308      	str	r3, [sp, #32]
 800adc6:	9b02      	ldr	r3, [sp, #8]
 800adc8:	f003 0301 	and.w	r3, r3, #1
 800adcc:	46b8      	mov	r8, r7
 800adce:	9306      	str	r3, [sp, #24]
 800add0:	4607      	mov	r7, r0
 800add2:	9b04      	ldr	r3, [sp, #16]
 800add4:	4631      	mov	r1, r6
 800add6:	3b01      	subs	r3, #1
 800add8:	4650      	mov	r0, sl
 800adda:	9301      	str	r3, [sp, #4]
 800addc:	f7ff fa6a 	bl	800a2b4 <quorem>
 800ade0:	4641      	mov	r1, r8
 800ade2:	9002      	str	r0, [sp, #8]
 800ade4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ade8:	4650      	mov	r0, sl
 800adea:	f000 fc5b 	bl	800b6a4 <__mcmp>
 800adee:	463a      	mov	r2, r7
 800adf0:	9005      	str	r0, [sp, #20]
 800adf2:	4631      	mov	r1, r6
 800adf4:	4620      	mov	r0, r4
 800adf6:	f000 fc71 	bl	800b6dc <__mdiff>
 800adfa:	68c2      	ldr	r2, [r0, #12]
 800adfc:	4605      	mov	r5, r0
 800adfe:	bb02      	cbnz	r2, 800ae42 <_dtoa_r+0xa7a>
 800ae00:	4601      	mov	r1, r0
 800ae02:	4650      	mov	r0, sl
 800ae04:	f000 fc4e 	bl	800b6a4 <__mcmp>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ae10:	f000 fa0c 	bl	800b22c <_Bfree>
 800ae14:	9b07      	ldr	r3, [sp, #28]
 800ae16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae18:	9d04      	ldr	r5, [sp, #16]
 800ae1a:	ea43 0102 	orr.w	r1, r3, r2
 800ae1e:	9b06      	ldr	r3, [sp, #24]
 800ae20:	4319      	orrs	r1, r3
 800ae22:	d110      	bne.n	800ae46 <_dtoa_r+0xa7e>
 800ae24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ae28:	d029      	beq.n	800ae7e <_dtoa_r+0xab6>
 800ae2a:	9b05      	ldr	r3, [sp, #20]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	dd02      	ble.n	800ae36 <_dtoa_r+0xa6e>
 800ae30:	9b02      	ldr	r3, [sp, #8]
 800ae32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ae36:	9b01      	ldr	r3, [sp, #4]
 800ae38:	f883 9000 	strb.w	r9, [r3]
 800ae3c:	e774      	b.n	800ad28 <_dtoa_r+0x960>
 800ae3e:	4638      	mov	r0, r7
 800ae40:	e7ba      	b.n	800adb8 <_dtoa_r+0x9f0>
 800ae42:	2201      	movs	r2, #1
 800ae44:	e7e1      	b.n	800ae0a <_dtoa_r+0xa42>
 800ae46:	9b05      	ldr	r3, [sp, #20]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	db04      	blt.n	800ae56 <_dtoa_r+0xa8e>
 800ae4c:	9907      	ldr	r1, [sp, #28]
 800ae4e:	430b      	orrs	r3, r1
 800ae50:	9906      	ldr	r1, [sp, #24]
 800ae52:	430b      	orrs	r3, r1
 800ae54:	d120      	bne.n	800ae98 <_dtoa_r+0xad0>
 800ae56:	2a00      	cmp	r2, #0
 800ae58:	dded      	ble.n	800ae36 <_dtoa_r+0xa6e>
 800ae5a:	4651      	mov	r1, sl
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f000 fbb4 	bl	800b5cc <__lshift>
 800ae64:	4631      	mov	r1, r6
 800ae66:	4682      	mov	sl, r0
 800ae68:	f000 fc1c 	bl	800b6a4 <__mcmp>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	dc03      	bgt.n	800ae78 <_dtoa_r+0xab0>
 800ae70:	d1e1      	bne.n	800ae36 <_dtoa_r+0xa6e>
 800ae72:	f019 0f01 	tst.w	r9, #1
 800ae76:	d0de      	beq.n	800ae36 <_dtoa_r+0xa6e>
 800ae78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ae7c:	d1d8      	bne.n	800ae30 <_dtoa_r+0xa68>
 800ae7e:	9a01      	ldr	r2, [sp, #4]
 800ae80:	2339      	movs	r3, #57	; 0x39
 800ae82:	7013      	strb	r3, [r2, #0]
 800ae84:	462b      	mov	r3, r5
 800ae86:	461d      	mov	r5, r3
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae8e:	2a39      	cmp	r2, #57	; 0x39
 800ae90:	d06c      	beq.n	800af6c <_dtoa_r+0xba4>
 800ae92:	3201      	adds	r2, #1
 800ae94:	701a      	strb	r2, [r3, #0]
 800ae96:	e747      	b.n	800ad28 <_dtoa_r+0x960>
 800ae98:	2a00      	cmp	r2, #0
 800ae9a:	dd07      	ble.n	800aeac <_dtoa_r+0xae4>
 800ae9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aea0:	d0ed      	beq.n	800ae7e <_dtoa_r+0xab6>
 800aea2:	9a01      	ldr	r2, [sp, #4]
 800aea4:	f109 0301 	add.w	r3, r9, #1
 800aea8:	7013      	strb	r3, [r2, #0]
 800aeaa:	e73d      	b.n	800ad28 <_dtoa_r+0x960>
 800aeac:	9b04      	ldr	r3, [sp, #16]
 800aeae:	9a08      	ldr	r2, [sp, #32]
 800aeb0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d043      	beq.n	800af40 <_dtoa_r+0xb78>
 800aeb8:	4651      	mov	r1, sl
 800aeba:	2300      	movs	r3, #0
 800aebc:	220a      	movs	r2, #10
 800aebe:	4620      	mov	r0, r4
 800aec0:	f000 f9d6 	bl	800b270 <__multadd>
 800aec4:	45b8      	cmp	r8, r7
 800aec6:	4682      	mov	sl, r0
 800aec8:	f04f 0300 	mov.w	r3, #0
 800aecc:	f04f 020a 	mov.w	r2, #10
 800aed0:	4641      	mov	r1, r8
 800aed2:	4620      	mov	r0, r4
 800aed4:	d107      	bne.n	800aee6 <_dtoa_r+0xb1e>
 800aed6:	f000 f9cb 	bl	800b270 <__multadd>
 800aeda:	4680      	mov	r8, r0
 800aedc:	4607      	mov	r7, r0
 800aede:	9b04      	ldr	r3, [sp, #16]
 800aee0:	3301      	adds	r3, #1
 800aee2:	9304      	str	r3, [sp, #16]
 800aee4:	e775      	b.n	800add2 <_dtoa_r+0xa0a>
 800aee6:	f000 f9c3 	bl	800b270 <__multadd>
 800aeea:	4639      	mov	r1, r7
 800aeec:	4680      	mov	r8, r0
 800aeee:	2300      	movs	r3, #0
 800aef0:	220a      	movs	r2, #10
 800aef2:	4620      	mov	r0, r4
 800aef4:	f000 f9bc 	bl	800b270 <__multadd>
 800aef8:	4607      	mov	r7, r0
 800aefa:	e7f0      	b.n	800aede <_dtoa_r+0xb16>
 800aefc:	9b04      	ldr	r3, [sp, #16]
 800aefe:	9301      	str	r3, [sp, #4]
 800af00:	9d00      	ldr	r5, [sp, #0]
 800af02:	4631      	mov	r1, r6
 800af04:	4650      	mov	r0, sl
 800af06:	f7ff f9d5 	bl	800a2b4 <quorem>
 800af0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800af0e:	9b00      	ldr	r3, [sp, #0]
 800af10:	f805 9b01 	strb.w	r9, [r5], #1
 800af14:	1aea      	subs	r2, r5, r3
 800af16:	9b01      	ldr	r3, [sp, #4]
 800af18:	4293      	cmp	r3, r2
 800af1a:	dd07      	ble.n	800af2c <_dtoa_r+0xb64>
 800af1c:	4651      	mov	r1, sl
 800af1e:	2300      	movs	r3, #0
 800af20:	220a      	movs	r2, #10
 800af22:	4620      	mov	r0, r4
 800af24:	f000 f9a4 	bl	800b270 <__multadd>
 800af28:	4682      	mov	sl, r0
 800af2a:	e7ea      	b.n	800af02 <_dtoa_r+0xb3a>
 800af2c:	9b01      	ldr	r3, [sp, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	bfc8      	it	gt
 800af32:	461d      	movgt	r5, r3
 800af34:	9b00      	ldr	r3, [sp, #0]
 800af36:	bfd8      	it	le
 800af38:	2501      	movle	r5, #1
 800af3a:	441d      	add	r5, r3
 800af3c:	f04f 0800 	mov.w	r8, #0
 800af40:	4651      	mov	r1, sl
 800af42:	2201      	movs	r2, #1
 800af44:	4620      	mov	r0, r4
 800af46:	f000 fb41 	bl	800b5cc <__lshift>
 800af4a:	4631      	mov	r1, r6
 800af4c:	4682      	mov	sl, r0
 800af4e:	f000 fba9 	bl	800b6a4 <__mcmp>
 800af52:	2800      	cmp	r0, #0
 800af54:	dc96      	bgt.n	800ae84 <_dtoa_r+0xabc>
 800af56:	d102      	bne.n	800af5e <_dtoa_r+0xb96>
 800af58:	f019 0f01 	tst.w	r9, #1
 800af5c:	d192      	bne.n	800ae84 <_dtoa_r+0xabc>
 800af5e:	462b      	mov	r3, r5
 800af60:	461d      	mov	r5, r3
 800af62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af66:	2a30      	cmp	r2, #48	; 0x30
 800af68:	d0fa      	beq.n	800af60 <_dtoa_r+0xb98>
 800af6a:	e6dd      	b.n	800ad28 <_dtoa_r+0x960>
 800af6c:	9a00      	ldr	r2, [sp, #0]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d189      	bne.n	800ae86 <_dtoa_r+0xabe>
 800af72:	f10b 0b01 	add.w	fp, fp, #1
 800af76:	2331      	movs	r3, #49	; 0x31
 800af78:	e796      	b.n	800aea8 <_dtoa_r+0xae0>
 800af7a:	4b0a      	ldr	r3, [pc, #40]	; (800afa4 <_dtoa_r+0xbdc>)
 800af7c:	f7ff ba99 	b.w	800a4b2 <_dtoa_r+0xea>
 800af80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af82:	2b00      	cmp	r3, #0
 800af84:	f47f aa6d 	bne.w	800a462 <_dtoa_r+0x9a>
 800af88:	4b07      	ldr	r3, [pc, #28]	; (800afa8 <_dtoa_r+0xbe0>)
 800af8a:	f7ff ba92 	b.w	800a4b2 <_dtoa_r+0xea>
 800af8e:	9b01      	ldr	r3, [sp, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	dcb5      	bgt.n	800af00 <_dtoa_r+0xb38>
 800af94:	9b07      	ldr	r3, [sp, #28]
 800af96:	2b02      	cmp	r3, #2
 800af98:	f73f aeb1 	bgt.w	800acfe <_dtoa_r+0x936>
 800af9c:	e7b0      	b.n	800af00 <_dtoa_r+0xb38>
 800af9e:	bf00      	nop
 800afa0:	0800c550 	.word	0x0800c550
 800afa4:	0800c4b0 	.word	0x0800c4b0
 800afa8:	0800c4d4 	.word	0x0800c4d4

0800afac <_free_r>:
 800afac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afae:	2900      	cmp	r1, #0
 800afb0:	d044      	beq.n	800b03c <_free_r+0x90>
 800afb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afb6:	9001      	str	r0, [sp, #4]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f1a1 0404 	sub.w	r4, r1, #4
 800afbe:	bfb8      	it	lt
 800afc0:	18e4      	addlt	r4, r4, r3
 800afc2:	f000 f8e7 	bl	800b194 <__malloc_lock>
 800afc6:	4a1e      	ldr	r2, [pc, #120]	; (800b040 <_free_r+0x94>)
 800afc8:	9801      	ldr	r0, [sp, #4]
 800afca:	6813      	ldr	r3, [r2, #0]
 800afcc:	b933      	cbnz	r3, 800afdc <_free_r+0x30>
 800afce:	6063      	str	r3, [r4, #4]
 800afd0:	6014      	str	r4, [r2, #0]
 800afd2:	b003      	add	sp, #12
 800afd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afd8:	f000 b8e2 	b.w	800b1a0 <__malloc_unlock>
 800afdc:	42a3      	cmp	r3, r4
 800afde:	d908      	bls.n	800aff2 <_free_r+0x46>
 800afe0:	6825      	ldr	r5, [r4, #0]
 800afe2:	1961      	adds	r1, r4, r5
 800afe4:	428b      	cmp	r3, r1
 800afe6:	bf01      	itttt	eq
 800afe8:	6819      	ldreq	r1, [r3, #0]
 800afea:	685b      	ldreq	r3, [r3, #4]
 800afec:	1949      	addeq	r1, r1, r5
 800afee:	6021      	streq	r1, [r4, #0]
 800aff0:	e7ed      	b.n	800afce <_free_r+0x22>
 800aff2:	461a      	mov	r2, r3
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	b10b      	cbz	r3, 800affc <_free_r+0x50>
 800aff8:	42a3      	cmp	r3, r4
 800affa:	d9fa      	bls.n	800aff2 <_free_r+0x46>
 800affc:	6811      	ldr	r1, [r2, #0]
 800affe:	1855      	adds	r5, r2, r1
 800b000:	42a5      	cmp	r5, r4
 800b002:	d10b      	bne.n	800b01c <_free_r+0x70>
 800b004:	6824      	ldr	r4, [r4, #0]
 800b006:	4421      	add	r1, r4
 800b008:	1854      	adds	r4, r2, r1
 800b00a:	42a3      	cmp	r3, r4
 800b00c:	6011      	str	r1, [r2, #0]
 800b00e:	d1e0      	bne.n	800afd2 <_free_r+0x26>
 800b010:	681c      	ldr	r4, [r3, #0]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	6053      	str	r3, [r2, #4]
 800b016:	440c      	add	r4, r1
 800b018:	6014      	str	r4, [r2, #0]
 800b01a:	e7da      	b.n	800afd2 <_free_r+0x26>
 800b01c:	d902      	bls.n	800b024 <_free_r+0x78>
 800b01e:	230c      	movs	r3, #12
 800b020:	6003      	str	r3, [r0, #0]
 800b022:	e7d6      	b.n	800afd2 <_free_r+0x26>
 800b024:	6825      	ldr	r5, [r4, #0]
 800b026:	1961      	adds	r1, r4, r5
 800b028:	428b      	cmp	r3, r1
 800b02a:	bf04      	itt	eq
 800b02c:	6819      	ldreq	r1, [r3, #0]
 800b02e:	685b      	ldreq	r3, [r3, #4]
 800b030:	6063      	str	r3, [r4, #4]
 800b032:	bf04      	itt	eq
 800b034:	1949      	addeq	r1, r1, r5
 800b036:	6021      	streq	r1, [r4, #0]
 800b038:	6054      	str	r4, [r2, #4]
 800b03a:	e7ca      	b.n	800afd2 <_free_r+0x26>
 800b03c:	b003      	add	sp, #12
 800b03e:	bd30      	pop	{r4, r5, pc}
 800b040:	200011b8 	.word	0x200011b8

0800b044 <malloc>:
 800b044:	4b02      	ldr	r3, [pc, #8]	; (800b050 <malloc+0xc>)
 800b046:	4601      	mov	r1, r0
 800b048:	6818      	ldr	r0, [r3, #0]
 800b04a:	f000 b823 	b.w	800b094 <_malloc_r>
 800b04e:	bf00      	nop
 800b050:	2000007c 	.word	0x2000007c

0800b054 <sbrk_aligned>:
 800b054:	b570      	push	{r4, r5, r6, lr}
 800b056:	4e0e      	ldr	r6, [pc, #56]	; (800b090 <sbrk_aligned+0x3c>)
 800b058:	460c      	mov	r4, r1
 800b05a:	6831      	ldr	r1, [r6, #0]
 800b05c:	4605      	mov	r5, r0
 800b05e:	b911      	cbnz	r1, 800b066 <sbrk_aligned+0x12>
 800b060:	f000 fe96 	bl	800bd90 <_sbrk_r>
 800b064:	6030      	str	r0, [r6, #0]
 800b066:	4621      	mov	r1, r4
 800b068:	4628      	mov	r0, r5
 800b06a:	f000 fe91 	bl	800bd90 <_sbrk_r>
 800b06e:	1c43      	adds	r3, r0, #1
 800b070:	d00a      	beq.n	800b088 <sbrk_aligned+0x34>
 800b072:	1cc4      	adds	r4, r0, #3
 800b074:	f024 0403 	bic.w	r4, r4, #3
 800b078:	42a0      	cmp	r0, r4
 800b07a:	d007      	beq.n	800b08c <sbrk_aligned+0x38>
 800b07c:	1a21      	subs	r1, r4, r0
 800b07e:	4628      	mov	r0, r5
 800b080:	f000 fe86 	bl	800bd90 <_sbrk_r>
 800b084:	3001      	adds	r0, #1
 800b086:	d101      	bne.n	800b08c <sbrk_aligned+0x38>
 800b088:	f04f 34ff 	mov.w	r4, #4294967295
 800b08c:	4620      	mov	r0, r4
 800b08e:	bd70      	pop	{r4, r5, r6, pc}
 800b090:	200011bc 	.word	0x200011bc

0800b094 <_malloc_r>:
 800b094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b098:	1ccd      	adds	r5, r1, #3
 800b09a:	f025 0503 	bic.w	r5, r5, #3
 800b09e:	3508      	adds	r5, #8
 800b0a0:	2d0c      	cmp	r5, #12
 800b0a2:	bf38      	it	cc
 800b0a4:	250c      	movcc	r5, #12
 800b0a6:	2d00      	cmp	r5, #0
 800b0a8:	4607      	mov	r7, r0
 800b0aa:	db01      	blt.n	800b0b0 <_malloc_r+0x1c>
 800b0ac:	42a9      	cmp	r1, r5
 800b0ae:	d905      	bls.n	800b0bc <_malloc_r+0x28>
 800b0b0:	230c      	movs	r3, #12
 800b0b2:	603b      	str	r3, [r7, #0]
 800b0b4:	2600      	movs	r6, #0
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b190 <_malloc_r+0xfc>
 800b0c0:	f000 f868 	bl	800b194 <__malloc_lock>
 800b0c4:	f8d8 3000 	ldr.w	r3, [r8]
 800b0c8:	461c      	mov	r4, r3
 800b0ca:	bb5c      	cbnz	r4, 800b124 <_malloc_r+0x90>
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	f7ff ffc0 	bl	800b054 <sbrk_aligned>
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	d155      	bne.n	800b186 <_malloc_r+0xf2>
 800b0da:	f8d8 4000 	ldr.w	r4, [r8]
 800b0de:	4626      	mov	r6, r4
 800b0e0:	2e00      	cmp	r6, #0
 800b0e2:	d145      	bne.n	800b170 <_malloc_r+0xdc>
 800b0e4:	2c00      	cmp	r4, #0
 800b0e6:	d048      	beq.n	800b17a <_malloc_r+0xe6>
 800b0e8:	6823      	ldr	r3, [r4, #0]
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4638      	mov	r0, r7
 800b0ee:	eb04 0903 	add.w	r9, r4, r3
 800b0f2:	f000 fe4d 	bl	800bd90 <_sbrk_r>
 800b0f6:	4581      	cmp	r9, r0
 800b0f8:	d13f      	bne.n	800b17a <_malloc_r+0xe6>
 800b0fa:	6821      	ldr	r1, [r4, #0]
 800b0fc:	1a6d      	subs	r5, r5, r1
 800b0fe:	4629      	mov	r1, r5
 800b100:	4638      	mov	r0, r7
 800b102:	f7ff ffa7 	bl	800b054 <sbrk_aligned>
 800b106:	3001      	adds	r0, #1
 800b108:	d037      	beq.n	800b17a <_malloc_r+0xe6>
 800b10a:	6823      	ldr	r3, [r4, #0]
 800b10c:	442b      	add	r3, r5
 800b10e:	6023      	str	r3, [r4, #0]
 800b110:	f8d8 3000 	ldr.w	r3, [r8]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d038      	beq.n	800b18a <_malloc_r+0xf6>
 800b118:	685a      	ldr	r2, [r3, #4]
 800b11a:	42a2      	cmp	r2, r4
 800b11c:	d12b      	bne.n	800b176 <_malloc_r+0xe2>
 800b11e:	2200      	movs	r2, #0
 800b120:	605a      	str	r2, [r3, #4]
 800b122:	e00f      	b.n	800b144 <_malloc_r+0xb0>
 800b124:	6822      	ldr	r2, [r4, #0]
 800b126:	1b52      	subs	r2, r2, r5
 800b128:	d41f      	bmi.n	800b16a <_malloc_r+0xd6>
 800b12a:	2a0b      	cmp	r2, #11
 800b12c:	d917      	bls.n	800b15e <_malloc_r+0xca>
 800b12e:	1961      	adds	r1, r4, r5
 800b130:	42a3      	cmp	r3, r4
 800b132:	6025      	str	r5, [r4, #0]
 800b134:	bf18      	it	ne
 800b136:	6059      	strne	r1, [r3, #4]
 800b138:	6863      	ldr	r3, [r4, #4]
 800b13a:	bf08      	it	eq
 800b13c:	f8c8 1000 	streq.w	r1, [r8]
 800b140:	5162      	str	r2, [r4, r5]
 800b142:	604b      	str	r3, [r1, #4]
 800b144:	4638      	mov	r0, r7
 800b146:	f104 060b 	add.w	r6, r4, #11
 800b14a:	f000 f829 	bl	800b1a0 <__malloc_unlock>
 800b14e:	f026 0607 	bic.w	r6, r6, #7
 800b152:	1d23      	adds	r3, r4, #4
 800b154:	1af2      	subs	r2, r6, r3
 800b156:	d0ae      	beq.n	800b0b6 <_malloc_r+0x22>
 800b158:	1b9b      	subs	r3, r3, r6
 800b15a:	50a3      	str	r3, [r4, r2]
 800b15c:	e7ab      	b.n	800b0b6 <_malloc_r+0x22>
 800b15e:	42a3      	cmp	r3, r4
 800b160:	6862      	ldr	r2, [r4, #4]
 800b162:	d1dd      	bne.n	800b120 <_malloc_r+0x8c>
 800b164:	f8c8 2000 	str.w	r2, [r8]
 800b168:	e7ec      	b.n	800b144 <_malloc_r+0xb0>
 800b16a:	4623      	mov	r3, r4
 800b16c:	6864      	ldr	r4, [r4, #4]
 800b16e:	e7ac      	b.n	800b0ca <_malloc_r+0x36>
 800b170:	4634      	mov	r4, r6
 800b172:	6876      	ldr	r6, [r6, #4]
 800b174:	e7b4      	b.n	800b0e0 <_malloc_r+0x4c>
 800b176:	4613      	mov	r3, r2
 800b178:	e7cc      	b.n	800b114 <_malloc_r+0x80>
 800b17a:	230c      	movs	r3, #12
 800b17c:	603b      	str	r3, [r7, #0]
 800b17e:	4638      	mov	r0, r7
 800b180:	f000 f80e 	bl	800b1a0 <__malloc_unlock>
 800b184:	e797      	b.n	800b0b6 <_malloc_r+0x22>
 800b186:	6025      	str	r5, [r4, #0]
 800b188:	e7dc      	b.n	800b144 <_malloc_r+0xb0>
 800b18a:	605b      	str	r3, [r3, #4]
 800b18c:	deff      	udf	#255	; 0xff
 800b18e:	bf00      	nop
 800b190:	200011b8 	.word	0x200011b8

0800b194 <__malloc_lock>:
 800b194:	4801      	ldr	r0, [pc, #4]	; (800b19c <__malloc_lock+0x8>)
 800b196:	f7ff b88b 	b.w	800a2b0 <__retarget_lock_acquire_recursive>
 800b19a:	bf00      	nop
 800b19c:	200011b4 	.word	0x200011b4

0800b1a0 <__malloc_unlock>:
 800b1a0:	4801      	ldr	r0, [pc, #4]	; (800b1a8 <__malloc_unlock+0x8>)
 800b1a2:	f7ff b886 	b.w	800a2b2 <__retarget_lock_release_recursive>
 800b1a6:	bf00      	nop
 800b1a8:	200011b4 	.word	0x200011b4

0800b1ac <_Balloc>:
 800b1ac:	b570      	push	{r4, r5, r6, lr}
 800b1ae:	69c6      	ldr	r6, [r0, #28]
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	460d      	mov	r5, r1
 800b1b4:	b976      	cbnz	r6, 800b1d4 <_Balloc+0x28>
 800b1b6:	2010      	movs	r0, #16
 800b1b8:	f7ff ff44 	bl	800b044 <malloc>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	61e0      	str	r0, [r4, #28]
 800b1c0:	b920      	cbnz	r0, 800b1cc <_Balloc+0x20>
 800b1c2:	4b18      	ldr	r3, [pc, #96]	; (800b224 <_Balloc+0x78>)
 800b1c4:	4818      	ldr	r0, [pc, #96]	; (800b228 <_Balloc+0x7c>)
 800b1c6:	216b      	movs	r1, #107	; 0x6b
 800b1c8:	f000 fe00 	bl	800bdcc <__assert_func>
 800b1cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1d0:	6006      	str	r6, [r0, #0]
 800b1d2:	60c6      	str	r6, [r0, #12]
 800b1d4:	69e6      	ldr	r6, [r4, #28]
 800b1d6:	68f3      	ldr	r3, [r6, #12]
 800b1d8:	b183      	cbz	r3, 800b1fc <_Balloc+0x50>
 800b1da:	69e3      	ldr	r3, [r4, #28]
 800b1dc:	68db      	ldr	r3, [r3, #12]
 800b1de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1e2:	b9b8      	cbnz	r0, 800b214 <_Balloc+0x68>
 800b1e4:	2101      	movs	r1, #1
 800b1e6:	fa01 f605 	lsl.w	r6, r1, r5
 800b1ea:	1d72      	adds	r2, r6, #5
 800b1ec:	0092      	lsls	r2, r2, #2
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f000 fe0a 	bl	800be08 <_calloc_r>
 800b1f4:	b160      	cbz	r0, 800b210 <_Balloc+0x64>
 800b1f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1fa:	e00e      	b.n	800b21a <_Balloc+0x6e>
 800b1fc:	2221      	movs	r2, #33	; 0x21
 800b1fe:	2104      	movs	r1, #4
 800b200:	4620      	mov	r0, r4
 800b202:	f000 fe01 	bl	800be08 <_calloc_r>
 800b206:	69e3      	ldr	r3, [r4, #28]
 800b208:	60f0      	str	r0, [r6, #12]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1e4      	bne.n	800b1da <_Balloc+0x2e>
 800b210:	2000      	movs	r0, #0
 800b212:	bd70      	pop	{r4, r5, r6, pc}
 800b214:	6802      	ldr	r2, [r0, #0]
 800b216:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b21a:	2300      	movs	r3, #0
 800b21c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b220:	e7f7      	b.n	800b212 <_Balloc+0x66>
 800b222:	bf00      	nop
 800b224:	0800c4e1 	.word	0x0800c4e1
 800b228:	0800c561 	.word	0x0800c561

0800b22c <_Bfree>:
 800b22c:	b570      	push	{r4, r5, r6, lr}
 800b22e:	69c6      	ldr	r6, [r0, #28]
 800b230:	4605      	mov	r5, r0
 800b232:	460c      	mov	r4, r1
 800b234:	b976      	cbnz	r6, 800b254 <_Bfree+0x28>
 800b236:	2010      	movs	r0, #16
 800b238:	f7ff ff04 	bl	800b044 <malloc>
 800b23c:	4602      	mov	r2, r0
 800b23e:	61e8      	str	r0, [r5, #28]
 800b240:	b920      	cbnz	r0, 800b24c <_Bfree+0x20>
 800b242:	4b09      	ldr	r3, [pc, #36]	; (800b268 <_Bfree+0x3c>)
 800b244:	4809      	ldr	r0, [pc, #36]	; (800b26c <_Bfree+0x40>)
 800b246:	218f      	movs	r1, #143	; 0x8f
 800b248:	f000 fdc0 	bl	800bdcc <__assert_func>
 800b24c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b250:	6006      	str	r6, [r0, #0]
 800b252:	60c6      	str	r6, [r0, #12]
 800b254:	b13c      	cbz	r4, 800b266 <_Bfree+0x3a>
 800b256:	69eb      	ldr	r3, [r5, #28]
 800b258:	6862      	ldr	r2, [r4, #4]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b260:	6021      	str	r1, [r4, #0]
 800b262:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b266:	bd70      	pop	{r4, r5, r6, pc}
 800b268:	0800c4e1 	.word	0x0800c4e1
 800b26c:	0800c561 	.word	0x0800c561

0800b270 <__multadd>:
 800b270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b274:	690d      	ldr	r5, [r1, #16]
 800b276:	4607      	mov	r7, r0
 800b278:	460c      	mov	r4, r1
 800b27a:	461e      	mov	r6, r3
 800b27c:	f101 0c14 	add.w	ip, r1, #20
 800b280:	2000      	movs	r0, #0
 800b282:	f8dc 3000 	ldr.w	r3, [ip]
 800b286:	b299      	uxth	r1, r3
 800b288:	fb02 6101 	mla	r1, r2, r1, r6
 800b28c:	0c1e      	lsrs	r6, r3, #16
 800b28e:	0c0b      	lsrs	r3, r1, #16
 800b290:	fb02 3306 	mla	r3, r2, r6, r3
 800b294:	b289      	uxth	r1, r1
 800b296:	3001      	adds	r0, #1
 800b298:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b29c:	4285      	cmp	r5, r0
 800b29e:	f84c 1b04 	str.w	r1, [ip], #4
 800b2a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2a6:	dcec      	bgt.n	800b282 <__multadd+0x12>
 800b2a8:	b30e      	cbz	r6, 800b2ee <__multadd+0x7e>
 800b2aa:	68a3      	ldr	r3, [r4, #8]
 800b2ac:	42ab      	cmp	r3, r5
 800b2ae:	dc19      	bgt.n	800b2e4 <__multadd+0x74>
 800b2b0:	6861      	ldr	r1, [r4, #4]
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	3101      	adds	r1, #1
 800b2b6:	f7ff ff79 	bl	800b1ac <_Balloc>
 800b2ba:	4680      	mov	r8, r0
 800b2bc:	b928      	cbnz	r0, 800b2ca <__multadd+0x5a>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	4b0c      	ldr	r3, [pc, #48]	; (800b2f4 <__multadd+0x84>)
 800b2c2:	480d      	ldr	r0, [pc, #52]	; (800b2f8 <__multadd+0x88>)
 800b2c4:	21ba      	movs	r1, #186	; 0xba
 800b2c6:	f000 fd81 	bl	800bdcc <__assert_func>
 800b2ca:	6922      	ldr	r2, [r4, #16]
 800b2cc:	3202      	adds	r2, #2
 800b2ce:	f104 010c 	add.w	r1, r4, #12
 800b2d2:	0092      	lsls	r2, r2, #2
 800b2d4:	300c      	adds	r0, #12
 800b2d6:	f000 fd6b 	bl	800bdb0 <memcpy>
 800b2da:	4621      	mov	r1, r4
 800b2dc:	4638      	mov	r0, r7
 800b2de:	f7ff ffa5 	bl	800b22c <_Bfree>
 800b2e2:	4644      	mov	r4, r8
 800b2e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2e8:	3501      	adds	r5, #1
 800b2ea:	615e      	str	r6, [r3, #20]
 800b2ec:	6125      	str	r5, [r4, #16]
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2f4:	0800c550 	.word	0x0800c550
 800b2f8:	0800c561 	.word	0x0800c561

0800b2fc <__hi0bits>:
 800b2fc:	0c03      	lsrs	r3, r0, #16
 800b2fe:	041b      	lsls	r3, r3, #16
 800b300:	b9d3      	cbnz	r3, 800b338 <__hi0bits+0x3c>
 800b302:	0400      	lsls	r0, r0, #16
 800b304:	2310      	movs	r3, #16
 800b306:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b30a:	bf04      	itt	eq
 800b30c:	0200      	lsleq	r0, r0, #8
 800b30e:	3308      	addeq	r3, #8
 800b310:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b314:	bf04      	itt	eq
 800b316:	0100      	lsleq	r0, r0, #4
 800b318:	3304      	addeq	r3, #4
 800b31a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b31e:	bf04      	itt	eq
 800b320:	0080      	lsleq	r0, r0, #2
 800b322:	3302      	addeq	r3, #2
 800b324:	2800      	cmp	r0, #0
 800b326:	db05      	blt.n	800b334 <__hi0bits+0x38>
 800b328:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b32c:	f103 0301 	add.w	r3, r3, #1
 800b330:	bf08      	it	eq
 800b332:	2320      	moveq	r3, #32
 800b334:	4618      	mov	r0, r3
 800b336:	4770      	bx	lr
 800b338:	2300      	movs	r3, #0
 800b33a:	e7e4      	b.n	800b306 <__hi0bits+0xa>

0800b33c <__lo0bits>:
 800b33c:	6803      	ldr	r3, [r0, #0]
 800b33e:	f013 0207 	ands.w	r2, r3, #7
 800b342:	d00c      	beq.n	800b35e <__lo0bits+0x22>
 800b344:	07d9      	lsls	r1, r3, #31
 800b346:	d422      	bmi.n	800b38e <__lo0bits+0x52>
 800b348:	079a      	lsls	r2, r3, #30
 800b34a:	bf49      	itett	mi
 800b34c:	085b      	lsrmi	r3, r3, #1
 800b34e:	089b      	lsrpl	r3, r3, #2
 800b350:	6003      	strmi	r3, [r0, #0]
 800b352:	2201      	movmi	r2, #1
 800b354:	bf5c      	itt	pl
 800b356:	6003      	strpl	r3, [r0, #0]
 800b358:	2202      	movpl	r2, #2
 800b35a:	4610      	mov	r0, r2
 800b35c:	4770      	bx	lr
 800b35e:	b299      	uxth	r1, r3
 800b360:	b909      	cbnz	r1, 800b366 <__lo0bits+0x2a>
 800b362:	0c1b      	lsrs	r3, r3, #16
 800b364:	2210      	movs	r2, #16
 800b366:	b2d9      	uxtb	r1, r3
 800b368:	b909      	cbnz	r1, 800b36e <__lo0bits+0x32>
 800b36a:	3208      	adds	r2, #8
 800b36c:	0a1b      	lsrs	r3, r3, #8
 800b36e:	0719      	lsls	r1, r3, #28
 800b370:	bf04      	itt	eq
 800b372:	091b      	lsreq	r3, r3, #4
 800b374:	3204      	addeq	r2, #4
 800b376:	0799      	lsls	r1, r3, #30
 800b378:	bf04      	itt	eq
 800b37a:	089b      	lsreq	r3, r3, #2
 800b37c:	3202      	addeq	r2, #2
 800b37e:	07d9      	lsls	r1, r3, #31
 800b380:	d403      	bmi.n	800b38a <__lo0bits+0x4e>
 800b382:	085b      	lsrs	r3, r3, #1
 800b384:	f102 0201 	add.w	r2, r2, #1
 800b388:	d003      	beq.n	800b392 <__lo0bits+0x56>
 800b38a:	6003      	str	r3, [r0, #0]
 800b38c:	e7e5      	b.n	800b35a <__lo0bits+0x1e>
 800b38e:	2200      	movs	r2, #0
 800b390:	e7e3      	b.n	800b35a <__lo0bits+0x1e>
 800b392:	2220      	movs	r2, #32
 800b394:	e7e1      	b.n	800b35a <__lo0bits+0x1e>
	...

0800b398 <__i2b>:
 800b398:	b510      	push	{r4, lr}
 800b39a:	460c      	mov	r4, r1
 800b39c:	2101      	movs	r1, #1
 800b39e:	f7ff ff05 	bl	800b1ac <_Balloc>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	b928      	cbnz	r0, 800b3b2 <__i2b+0x1a>
 800b3a6:	4b05      	ldr	r3, [pc, #20]	; (800b3bc <__i2b+0x24>)
 800b3a8:	4805      	ldr	r0, [pc, #20]	; (800b3c0 <__i2b+0x28>)
 800b3aa:	f240 1145 	movw	r1, #325	; 0x145
 800b3ae:	f000 fd0d 	bl	800bdcc <__assert_func>
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	6144      	str	r4, [r0, #20]
 800b3b6:	6103      	str	r3, [r0, #16]
 800b3b8:	bd10      	pop	{r4, pc}
 800b3ba:	bf00      	nop
 800b3bc:	0800c550 	.word	0x0800c550
 800b3c0:	0800c561 	.word	0x0800c561

0800b3c4 <__multiply>:
 800b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c8:	4691      	mov	r9, r2
 800b3ca:	690a      	ldr	r2, [r1, #16]
 800b3cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	bfb8      	it	lt
 800b3d4:	460b      	movlt	r3, r1
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	bfbc      	itt	lt
 800b3da:	464c      	movlt	r4, r9
 800b3dc:	4699      	movlt	r9, r3
 800b3de:	6927      	ldr	r7, [r4, #16]
 800b3e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b3e4:	68a3      	ldr	r3, [r4, #8]
 800b3e6:	6861      	ldr	r1, [r4, #4]
 800b3e8:	eb07 060a 	add.w	r6, r7, sl
 800b3ec:	42b3      	cmp	r3, r6
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	bfb8      	it	lt
 800b3f2:	3101      	addlt	r1, #1
 800b3f4:	f7ff feda 	bl	800b1ac <_Balloc>
 800b3f8:	b930      	cbnz	r0, 800b408 <__multiply+0x44>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	4b44      	ldr	r3, [pc, #272]	; (800b510 <__multiply+0x14c>)
 800b3fe:	4845      	ldr	r0, [pc, #276]	; (800b514 <__multiply+0x150>)
 800b400:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b404:	f000 fce2 	bl	800bdcc <__assert_func>
 800b408:	f100 0514 	add.w	r5, r0, #20
 800b40c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b410:	462b      	mov	r3, r5
 800b412:	2200      	movs	r2, #0
 800b414:	4543      	cmp	r3, r8
 800b416:	d321      	bcc.n	800b45c <__multiply+0x98>
 800b418:	f104 0314 	add.w	r3, r4, #20
 800b41c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b420:	f109 0314 	add.w	r3, r9, #20
 800b424:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b428:	9202      	str	r2, [sp, #8]
 800b42a:	1b3a      	subs	r2, r7, r4
 800b42c:	3a15      	subs	r2, #21
 800b42e:	f022 0203 	bic.w	r2, r2, #3
 800b432:	3204      	adds	r2, #4
 800b434:	f104 0115 	add.w	r1, r4, #21
 800b438:	428f      	cmp	r7, r1
 800b43a:	bf38      	it	cc
 800b43c:	2204      	movcc	r2, #4
 800b43e:	9201      	str	r2, [sp, #4]
 800b440:	9a02      	ldr	r2, [sp, #8]
 800b442:	9303      	str	r3, [sp, #12]
 800b444:	429a      	cmp	r2, r3
 800b446:	d80c      	bhi.n	800b462 <__multiply+0x9e>
 800b448:	2e00      	cmp	r6, #0
 800b44a:	dd03      	ble.n	800b454 <__multiply+0x90>
 800b44c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b450:	2b00      	cmp	r3, #0
 800b452:	d05b      	beq.n	800b50c <__multiply+0x148>
 800b454:	6106      	str	r6, [r0, #16]
 800b456:	b005      	add	sp, #20
 800b458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45c:	f843 2b04 	str.w	r2, [r3], #4
 800b460:	e7d8      	b.n	800b414 <__multiply+0x50>
 800b462:	f8b3 a000 	ldrh.w	sl, [r3]
 800b466:	f1ba 0f00 	cmp.w	sl, #0
 800b46a:	d024      	beq.n	800b4b6 <__multiply+0xf2>
 800b46c:	f104 0e14 	add.w	lr, r4, #20
 800b470:	46a9      	mov	r9, r5
 800b472:	f04f 0c00 	mov.w	ip, #0
 800b476:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b47a:	f8d9 1000 	ldr.w	r1, [r9]
 800b47e:	fa1f fb82 	uxth.w	fp, r2
 800b482:	b289      	uxth	r1, r1
 800b484:	fb0a 110b 	mla	r1, sl, fp, r1
 800b488:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b48c:	f8d9 2000 	ldr.w	r2, [r9]
 800b490:	4461      	add	r1, ip
 800b492:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b496:	fb0a c20b 	mla	r2, sl, fp, ip
 800b49a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b49e:	b289      	uxth	r1, r1
 800b4a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4a4:	4577      	cmp	r7, lr
 800b4a6:	f849 1b04 	str.w	r1, [r9], #4
 800b4aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4ae:	d8e2      	bhi.n	800b476 <__multiply+0xb2>
 800b4b0:	9a01      	ldr	r2, [sp, #4]
 800b4b2:	f845 c002 	str.w	ip, [r5, r2]
 800b4b6:	9a03      	ldr	r2, [sp, #12]
 800b4b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4bc:	3304      	adds	r3, #4
 800b4be:	f1b9 0f00 	cmp.w	r9, #0
 800b4c2:	d021      	beq.n	800b508 <__multiply+0x144>
 800b4c4:	6829      	ldr	r1, [r5, #0]
 800b4c6:	f104 0c14 	add.w	ip, r4, #20
 800b4ca:	46ae      	mov	lr, r5
 800b4cc:	f04f 0a00 	mov.w	sl, #0
 800b4d0:	f8bc b000 	ldrh.w	fp, [ip]
 800b4d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b4d8:	fb09 220b 	mla	r2, r9, fp, r2
 800b4dc:	4452      	add	r2, sl
 800b4de:	b289      	uxth	r1, r1
 800b4e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4e4:	f84e 1b04 	str.w	r1, [lr], #4
 800b4e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b4ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b4f0:	f8be 1000 	ldrh.w	r1, [lr]
 800b4f4:	fb09 110a 	mla	r1, r9, sl, r1
 800b4f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b4fc:	4567      	cmp	r7, ip
 800b4fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b502:	d8e5      	bhi.n	800b4d0 <__multiply+0x10c>
 800b504:	9a01      	ldr	r2, [sp, #4]
 800b506:	50a9      	str	r1, [r5, r2]
 800b508:	3504      	adds	r5, #4
 800b50a:	e799      	b.n	800b440 <__multiply+0x7c>
 800b50c:	3e01      	subs	r6, #1
 800b50e:	e79b      	b.n	800b448 <__multiply+0x84>
 800b510:	0800c550 	.word	0x0800c550
 800b514:	0800c561 	.word	0x0800c561

0800b518 <__pow5mult>:
 800b518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b51c:	4615      	mov	r5, r2
 800b51e:	f012 0203 	ands.w	r2, r2, #3
 800b522:	4606      	mov	r6, r0
 800b524:	460f      	mov	r7, r1
 800b526:	d007      	beq.n	800b538 <__pow5mult+0x20>
 800b528:	4c25      	ldr	r4, [pc, #148]	; (800b5c0 <__pow5mult+0xa8>)
 800b52a:	3a01      	subs	r2, #1
 800b52c:	2300      	movs	r3, #0
 800b52e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b532:	f7ff fe9d 	bl	800b270 <__multadd>
 800b536:	4607      	mov	r7, r0
 800b538:	10ad      	asrs	r5, r5, #2
 800b53a:	d03d      	beq.n	800b5b8 <__pow5mult+0xa0>
 800b53c:	69f4      	ldr	r4, [r6, #28]
 800b53e:	b97c      	cbnz	r4, 800b560 <__pow5mult+0x48>
 800b540:	2010      	movs	r0, #16
 800b542:	f7ff fd7f 	bl	800b044 <malloc>
 800b546:	4602      	mov	r2, r0
 800b548:	61f0      	str	r0, [r6, #28]
 800b54a:	b928      	cbnz	r0, 800b558 <__pow5mult+0x40>
 800b54c:	4b1d      	ldr	r3, [pc, #116]	; (800b5c4 <__pow5mult+0xac>)
 800b54e:	481e      	ldr	r0, [pc, #120]	; (800b5c8 <__pow5mult+0xb0>)
 800b550:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b554:	f000 fc3a 	bl	800bdcc <__assert_func>
 800b558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b55c:	6004      	str	r4, [r0, #0]
 800b55e:	60c4      	str	r4, [r0, #12]
 800b560:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b568:	b94c      	cbnz	r4, 800b57e <__pow5mult+0x66>
 800b56a:	f240 2171 	movw	r1, #625	; 0x271
 800b56e:	4630      	mov	r0, r6
 800b570:	f7ff ff12 	bl	800b398 <__i2b>
 800b574:	2300      	movs	r3, #0
 800b576:	f8c8 0008 	str.w	r0, [r8, #8]
 800b57a:	4604      	mov	r4, r0
 800b57c:	6003      	str	r3, [r0, #0]
 800b57e:	f04f 0900 	mov.w	r9, #0
 800b582:	07eb      	lsls	r3, r5, #31
 800b584:	d50a      	bpl.n	800b59c <__pow5mult+0x84>
 800b586:	4639      	mov	r1, r7
 800b588:	4622      	mov	r2, r4
 800b58a:	4630      	mov	r0, r6
 800b58c:	f7ff ff1a 	bl	800b3c4 <__multiply>
 800b590:	4639      	mov	r1, r7
 800b592:	4680      	mov	r8, r0
 800b594:	4630      	mov	r0, r6
 800b596:	f7ff fe49 	bl	800b22c <_Bfree>
 800b59a:	4647      	mov	r7, r8
 800b59c:	106d      	asrs	r5, r5, #1
 800b59e:	d00b      	beq.n	800b5b8 <__pow5mult+0xa0>
 800b5a0:	6820      	ldr	r0, [r4, #0]
 800b5a2:	b938      	cbnz	r0, 800b5b4 <__pow5mult+0x9c>
 800b5a4:	4622      	mov	r2, r4
 800b5a6:	4621      	mov	r1, r4
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f7ff ff0b 	bl	800b3c4 <__multiply>
 800b5ae:	6020      	str	r0, [r4, #0]
 800b5b0:	f8c0 9000 	str.w	r9, [r0]
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	e7e4      	b.n	800b582 <__pow5mult+0x6a>
 800b5b8:	4638      	mov	r0, r7
 800b5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5be:	bf00      	nop
 800b5c0:	0800c6b0 	.word	0x0800c6b0
 800b5c4:	0800c4e1 	.word	0x0800c4e1
 800b5c8:	0800c561 	.word	0x0800c561

0800b5cc <__lshift>:
 800b5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	6849      	ldr	r1, [r1, #4]
 800b5d4:	6923      	ldr	r3, [r4, #16]
 800b5d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5da:	68a3      	ldr	r3, [r4, #8]
 800b5dc:	4607      	mov	r7, r0
 800b5de:	4691      	mov	r9, r2
 800b5e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5e4:	f108 0601 	add.w	r6, r8, #1
 800b5e8:	42b3      	cmp	r3, r6
 800b5ea:	db0b      	blt.n	800b604 <__lshift+0x38>
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	f7ff fddd 	bl	800b1ac <_Balloc>
 800b5f2:	4605      	mov	r5, r0
 800b5f4:	b948      	cbnz	r0, 800b60a <__lshift+0x3e>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	4b28      	ldr	r3, [pc, #160]	; (800b69c <__lshift+0xd0>)
 800b5fa:	4829      	ldr	r0, [pc, #164]	; (800b6a0 <__lshift+0xd4>)
 800b5fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b600:	f000 fbe4 	bl	800bdcc <__assert_func>
 800b604:	3101      	adds	r1, #1
 800b606:	005b      	lsls	r3, r3, #1
 800b608:	e7ee      	b.n	800b5e8 <__lshift+0x1c>
 800b60a:	2300      	movs	r3, #0
 800b60c:	f100 0114 	add.w	r1, r0, #20
 800b610:	f100 0210 	add.w	r2, r0, #16
 800b614:	4618      	mov	r0, r3
 800b616:	4553      	cmp	r3, sl
 800b618:	db33      	blt.n	800b682 <__lshift+0xb6>
 800b61a:	6920      	ldr	r0, [r4, #16]
 800b61c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b620:	f104 0314 	add.w	r3, r4, #20
 800b624:	f019 091f 	ands.w	r9, r9, #31
 800b628:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b62c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b630:	d02b      	beq.n	800b68a <__lshift+0xbe>
 800b632:	f1c9 0e20 	rsb	lr, r9, #32
 800b636:	468a      	mov	sl, r1
 800b638:	2200      	movs	r2, #0
 800b63a:	6818      	ldr	r0, [r3, #0]
 800b63c:	fa00 f009 	lsl.w	r0, r0, r9
 800b640:	4310      	orrs	r0, r2
 800b642:	f84a 0b04 	str.w	r0, [sl], #4
 800b646:	f853 2b04 	ldr.w	r2, [r3], #4
 800b64a:	459c      	cmp	ip, r3
 800b64c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b650:	d8f3      	bhi.n	800b63a <__lshift+0x6e>
 800b652:	ebac 0304 	sub.w	r3, ip, r4
 800b656:	3b15      	subs	r3, #21
 800b658:	f023 0303 	bic.w	r3, r3, #3
 800b65c:	3304      	adds	r3, #4
 800b65e:	f104 0015 	add.w	r0, r4, #21
 800b662:	4584      	cmp	ip, r0
 800b664:	bf38      	it	cc
 800b666:	2304      	movcc	r3, #4
 800b668:	50ca      	str	r2, [r1, r3]
 800b66a:	b10a      	cbz	r2, 800b670 <__lshift+0xa4>
 800b66c:	f108 0602 	add.w	r6, r8, #2
 800b670:	3e01      	subs	r6, #1
 800b672:	4638      	mov	r0, r7
 800b674:	612e      	str	r6, [r5, #16]
 800b676:	4621      	mov	r1, r4
 800b678:	f7ff fdd8 	bl	800b22c <_Bfree>
 800b67c:	4628      	mov	r0, r5
 800b67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b682:	f842 0f04 	str.w	r0, [r2, #4]!
 800b686:	3301      	adds	r3, #1
 800b688:	e7c5      	b.n	800b616 <__lshift+0x4a>
 800b68a:	3904      	subs	r1, #4
 800b68c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b690:	f841 2f04 	str.w	r2, [r1, #4]!
 800b694:	459c      	cmp	ip, r3
 800b696:	d8f9      	bhi.n	800b68c <__lshift+0xc0>
 800b698:	e7ea      	b.n	800b670 <__lshift+0xa4>
 800b69a:	bf00      	nop
 800b69c:	0800c550 	.word	0x0800c550
 800b6a0:	0800c561 	.word	0x0800c561

0800b6a4 <__mcmp>:
 800b6a4:	b530      	push	{r4, r5, lr}
 800b6a6:	6902      	ldr	r2, [r0, #16]
 800b6a8:	690c      	ldr	r4, [r1, #16]
 800b6aa:	1b12      	subs	r2, r2, r4
 800b6ac:	d10e      	bne.n	800b6cc <__mcmp+0x28>
 800b6ae:	f100 0314 	add.w	r3, r0, #20
 800b6b2:	3114      	adds	r1, #20
 800b6b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b6b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b6bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b6c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b6c4:	42a5      	cmp	r5, r4
 800b6c6:	d003      	beq.n	800b6d0 <__mcmp+0x2c>
 800b6c8:	d305      	bcc.n	800b6d6 <__mcmp+0x32>
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	4610      	mov	r0, r2
 800b6ce:	bd30      	pop	{r4, r5, pc}
 800b6d0:	4283      	cmp	r3, r0
 800b6d2:	d3f3      	bcc.n	800b6bc <__mcmp+0x18>
 800b6d4:	e7fa      	b.n	800b6cc <__mcmp+0x28>
 800b6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6da:	e7f7      	b.n	800b6cc <__mcmp+0x28>

0800b6dc <__mdiff>:
 800b6dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e0:	460c      	mov	r4, r1
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	4611      	mov	r1, r2
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	4690      	mov	r8, r2
 800b6ea:	f7ff ffdb 	bl	800b6a4 <__mcmp>
 800b6ee:	1e05      	subs	r5, r0, #0
 800b6f0:	d110      	bne.n	800b714 <__mdiff+0x38>
 800b6f2:	4629      	mov	r1, r5
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	f7ff fd59 	bl	800b1ac <_Balloc>
 800b6fa:	b930      	cbnz	r0, 800b70a <__mdiff+0x2e>
 800b6fc:	4b3a      	ldr	r3, [pc, #232]	; (800b7e8 <__mdiff+0x10c>)
 800b6fe:	4602      	mov	r2, r0
 800b700:	f240 2137 	movw	r1, #567	; 0x237
 800b704:	4839      	ldr	r0, [pc, #228]	; (800b7ec <__mdiff+0x110>)
 800b706:	f000 fb61 	bl	800bdcc <__assert_func>
 800b70a:	2301      	movs	r3, #1
 800b70c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b714:	bfa4      	itt	ge
 800b716:	4643      	movge	r3, r8
 800b718:	46a0      	movge	r8, r4
 800b71a:	4630      	mov	r0, r6
 800b71c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b720:	bfa6      	itte	ge
 800b722:	461c      	movge	r4, r3
 800b724:	2500      	movge	r5, #0
 800b726:	2501      	movlt	r5, #1
 800b728:	f7ff fd40 	bl	800b1ac <_Balloc>
 800b72c:	b920      	cbnz	r0, 800b738 <__mdiff+0x5c>
 800b72e:	4b2e      	ldr	r3, [pc, #184]	; (800b7e8 <__mdiff+0x10c>)
 800b730:	4602      	mov	r2, r0
 800b732:	f240 2145 	movw	r1, #581	; 0x245
 800b736:	e7e5      	b.n	800b704 <__mdiff+0x28>
 800b738:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b73c:	6926      	ldr	r6, [r4, #16]
 800b73e:	60c5      	str	r5, [r0, #12]
 800b740:	f104 0914 	add.w	r9, r4, #20
 800b744:	f108 0514 	add.w	r5, r8, #20
 800b748:	f100 0e14 	add.w	lr, r0, #20
 800b74c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b750:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b754:	f108 0210 	add.w	r2, r8, #16
 800b758:	46f2      	mov	sl, lr
 800b75a:	2100      	movs	r1, #0
 800b75c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b760:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b764:	fa11 f88b 	uxtah	r8, r1, fp
 800b768:	b299      	uxth	r1, r3
 800b76a:	0c1b      	lsrs	r3, r3, #16
 800b76c:	eba8 0801 	sub.w	r8, r8, r1
 800b770:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b774:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b778:	fa1f f888 	uxth.w	r8, r8
 800b77c:	1419      	asrs	r1, r3, #16
 800b77e:	454e      	cmp	r6, r9
 800b780:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b784:	f84a 3b04 	str.w	r3, [sl], #4
 800b788:	d8e8      	bhi.n	800b75c <__mdiff+0x80>
 800b78a:	1b33      	subs	r3, r6, r4
 800b78c:	3b15      	subs	r3, #21
 800b78e:	f023 0303 	bic.w	r3, r3, #3
 800b792:	3304      	adds	r3, #4
 800b794:	3415      	adds	r4, #21
 800b796:	42a6      	cmp	r6, r4
 800b798:	bf38      	it	cc
 800b79a:	2304      	movcc	r3, #4
 800b79c:	441d      	add	r5, r3
 800b79e:	4473      	add	r3, lr
 800b7a0:	469e      	mov	lr, r3
 800b7a2:	462e      	mov	r6, r5
 800b7a4:	4566      	cmp	r6, ip
 800b7a6:	d30e      	bcc.n	800b7c6 <__mdiff+0xea>
 800b7a8:	f10c 0203 	add.w	r2, ip, #3
 800b7ac:	1b52      	subs	r2, r2, r5
 800b7ae:	f022 0203 	bic.w	r2, r2, #3
 800b7b2:	3d03      	subs	r5, #3
 800b7b4:	45ac      	cmp	ip, r5
 800b7b6:	bf38      	it	cc
 800b7b8:	2200      	movcc	r2, #0
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b7c0:	b17a      	cbz	r2, 800b7e2 <__mdiff+0x106>
 800b7c2:	6107      	str	r7, [r0, #16]
 800b7c4:	e7a4      	b.n	800b710 <__mdiff+0x34>
 800b7c6:	f856 8b04 	ldr.w	r8, [r6], #4
 800b7ca:	fa11 f288 	uxtah	r2, r1, r8
 800b7ce:	1414      	asrs	r4, r2, #16
 800b7d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b7d4:	b292      	uxth	r2, r2
 800b7d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b7da:	f84e 2b04 	str.w	r2, [lr], #4
 800b7de:	1421      	asrs	r1, r4, #16
 800b7e0:	e7e0      	b.n	800b7a4 <__mdiff+0xc8>
 800b7e2:	3f01      	subs	r7, #1
 800b7e4:	e7ea      	b.n	800b7bc <__mdiff+0xe0>
 800b7e6:	bf00      	nop
 800b7e8:	0800c550 	.word	0x0800c550
 800b7ec:	0800c561 	.word	0x0800c561

0800b7f0 <__d2b>:
 800b7f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7f4:	460f      	mov	r7, r1
 800b7f6:	2101      	movs	r1, #1
 800b7f8:	ec59 8b10 	vmov	r8, r9, d0
 800b7fc:	4616      	mov	r6, r2
 800b7fe:	f7ff fcd5 	bl	800b1ac <_Balloc>
 800b802:	4604      	mov	r4, r0
 800b804:	b930      	cbnz	r0, 800b814 <__d2b+0x24>
 800b806:	4602      	mov	r2, r0
 800b808:	4b24      	ldr	r3, [pc, #144]	; (800b89c <__d2b+0xac>)
 800b80a:	4825      	ldr	r0, [pc, #148]	; (800b8a0 <__d2b+0xb0>)
 800b80c:	f240 310f 	movw	r1, #783	; 0x30f
 800b810:	f000 fadc 	bl	800bdcc <__assert_func>
 800b814:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b81c:	bb2d      	cbnz	r5, 800b86a <__d2b+0x7a>
 800b81e:	9301      	str	r3, [sp, #4]
 800b820:	f1b8 0300 	subs.w	r3, r8, #0
 800b824:	d026      	beq.n	800b874 <__d2b+0x84>
 800b826:	4668      	mov	r0, sp
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	f7ff fd87 	bl	800b33c <__lo0bits>
 800b82e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b832:	b1e8      	cbz	r0, 800b870 <__d2b+0x80>
 800b834:	f1c0 0320 	rsb	r3, r0, #32
 800b838:	fa02 f303 	lsl.w	r3, r2, r3
 800b83c:	430b      	orrs	r3, r1
 800b83e:	40c2      	lsrs	r2, r0
 800b840:	6163      	str	r3, [r4, #20]
 800b842:	9201      	str	r2, [sp, #4]
 800b844:	9b01      	ldr	r3, [sp, #4]
 800b846:	61a3      	str	r3, [r4, #24]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	bf14      	ite	ne
 800b84c:	2202      	movne	r2, #2
 800b84e:	2201      	moveq	r2, #1
 800b850:	6122      	str	r2, [r4, #16]
 800b852:	b1bd      	cbz	r5, 800b884 <__d2b+0x94>
 800b854:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b858:	4405      	add	r5, r0
 800b85a:	603d      	str	r5, [r7, #0]
 800b85c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b860:	6030      	str	r0, [r6, #0]
 800b862:	4620      	mov	r0, r4
 800b864:	b003      	add	sp, #12
 800b866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b86a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b86e:	e7d6      	b.n	800b81e <__d2b+0x2e>
 800b870:	6161      	str	r1, [r4, #20]
 800b872:	e7e7      	b.n	800b844 <__d2b+0x54>
 800b874:	a801      	add	r0, sp, #4
 800b876:	f7ff fd61 	bl	800b33c <__lo0bits>
 800b87a:	9b01      	ldr	r3, [sp, #4]
 800b87c:	6163      	str	r3, [r4, #20]
 800b87e:	3020      	adds	r0, #32
 800b880:	2201      	movs	r2, #1
 800b882:	e7e5      	b.n	800b850 <__d2b+0x60>
 800b884:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b888:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b88c:	6038      	str	r0, [r7, #0]
 800b88e:	6918      	ldr	r0, [r3, #16]
 800b890:	f7ff fd34 	bl	800b2fc <__hi0bits>
 800b894:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b898:	e7e2      	b.n	800b860 <__d2b+0x70>
 800b89a:	bf00      	nop
 800b89c:	0800c550 	.word	0x0800c550
 800b8a0:	0800c561 	.word	0x0800c561

0800b8a4 <__sfputc_r>:
 800b8a4:	6893      	ldr	r3, [r2, #8]
 800b8a6:	3b01      	subs	r3, #1
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	b410      	push	{r4}
 800b8ac:	6093      	str	r3, [r2, #8]
 800b8ae:	da08      	bge.n	800b8c2 <__sfputc_r+0x1e>
 800b8b0:	6994      	ldr	r4, [r2, #24]
 800b8b2:	42a3      	cmp	r3, r4
 800b8b4:	db01      	blt.n	800b8ba <__sfputc_r+0x16>
 800b8b6:	290a      	cmp	r1, #10
 800b8b8:	d103      	bne.n	800b8c2 <__sfputc_r+0x1e>
 800b8ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8be:	f7fe bbe6 	b.w	800a08e <__swbuf_r>
 800b8c2:	6813      	ldr	r3, [r2, #0]
 800b8c4:	1c58      	adds	r0, r3, #1
 800b8c6:	6010      	str	r0, [r2, #0]
 800b8c8:	7019      	strb	r1, [r3, #0]
 800b8ca:	4608      	mov	r0, r1
 800b8cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8d0:	4770      	bx	lr

0800b8d2 <__sfputs_r>:
 800b8d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d4:	4606      	mov	r6, r0
 800b8d6:	460f      	mov	r7, r1
 800b8d8:	4614      	mov	r4, r2
 800b8da:	18d5      	adds	r5, r2, r3
 800b8dc:	42ac      	cmp	r4, r5
 800b8de:	d101      	bne.n	800b8e4 <__sfputs_r+0x12>
 800b8e0:	2000      	movs	r0, #0
 800b8e2:	e007      	b.n	800b8f4 <__sfputs_r+0x22>
 800b8e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8e8:	463a      	mov	r2, r7
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	f7ff ffda 	bl	800b8a4 <__sfputc_r>
 800b8f0:	1c43      	adds	r3, r0, #1
 800b8f2:	d1f3      	bne.n	800b8dc <__sfputs_r+0xa>
 800b8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8f8 <_vfiprintf_r>:
 800b8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8fc:	460d      	mov	r5, r1
 800b8fe:	b09d      	sub	sp, #116	; 0x74
 800b900:	4614      	mov	r4, r2
 800b902:	4698      	mov	r8, r3
 800b904:	4606      	mov	r6, r0
 800b906:	b118      	cbz	r0, 800b910 <_vfiprintf_r+0x18>
 800b908:	6a03      	ldr	r3, [r0, #32]
 800b90a:	b90b      	cbnz	r3, 800b910 <_vfiprintf_r+0x18>
 800b90c:	f7fe fad8 	bl	8009ec0 <__sinit>
 800b910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b912:	07d9      	lsls	r1, r3, #31
 800b914:	d405      	bmi.n	800b922 <_vfiprintf_r+0x2a>
 800b916:	89ab      	ldrh	r3, [r5, #12]
 800b918:	059a      	lsls	r2, r3, #22
 800b91a:	d402      	bmi.n	800b922 <_vfiprintf_r+0x2a>
 800b91c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b91e:	f7fe fcc7 	bl	800a2b0 <__retarget_lock_acquire_recursive>
 800b922:	89ab      	ldrh	r3, [r5, #12]
 800b924:	071b      	lsls	r3, r3, #28
 800b926:	d501      	bpl.n	800b92c <_vfiprintf_r+0x34>
 800b928:	692b      	ldr	r3, [r5, #16]
 800b92a:	b99b      	cbnz	r3, 800b954 <_vfiprintf_r+0x5c>
 800b92c:	4629      	mov	r1, r5
 800b92e:	4630      	mov	r0, r6
 800b930:	f7fe fbea 	bl	800a108 <__swsetup_r>
 800b934:	b170      	cbz	r0, 800b954 <_vfiprintf_r+0x5c>
 800b936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b938:	07dc      	lsls	r4, r3, #31
 800b93a:	d504      	bpl.n	800b946 <_vfiprintf_r+0x4e>
 800b93c:	f04f 30ff 	mov.w	r0, #4294967295
 800b940:	b01d      	add	sp, #116	; 0x74
 800b942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b946:	89ab      	ldrh	r3, [r5, #12]
 800b948:	0598      	lsls	r0, r3, #22
 800b94a:	d4f7      	bmi.n	800b93c <_vfiprintf_r+0x44>
 800b94c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b94e:	f7fe fcb0 	bl	800a2b2 <__retarget_lock_release_recursive>
 800b952:	e7f3      	b.n	800b93c <_vfiprintf_r+0x44>
 800b954:	2300      	movs	r3, #0
 800b956:	9309      	str	r3, [sp, #36]	; 0x24
 800b958:	2320      	movs	r3, #32
 800b95a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b95e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b962:	2330      	movs	r3, #48	; 0x30
 800b964:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bb18 <_vfiprintf_r+0x220>
 800b968:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b96c:	f04f 0901 	mov.w	r9, #1
 800b970:	4623      	mov	r3, r4
 800b972:	469a      	mov	sl, r3
 800b974:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b978:	b10a      	cbz	r2, 800b97e <_vfiprintf_r+0x86>
 800b97a:	2a25      	cmp	r2, #37	; 0x25
 800b97c:	d1f9      	bne.n	800b972 <_vfiprintf_r+0x7a>
 800b97e:	ebba 0b04 	subs.w	fp, sl, r4
 800b982:	d00b      	beq.n	800b99c <_vfiprintf_r+0xa4>
 800b984:	465b      	mov	r3, fp
 800b986:	4622      	mov	r2, r4
 800b988:	4629      	mov	r1, r5
 800b98a:	4630      	mov	r0, r6
 800b98c:	f7ff ffa1 	bl	800b8d2 <__sfputs_r>
 800b990:	3001      	adds	r0, #1
 800b992:	f000 80a9 	beq.w	800bae8 <_vfiprintf_r+0x1f0>
 800b996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b998:	445a      	add	r2, fp
 800b99a:	9209      	str	r2, [sp, #36]	; 0x24
 800b99c:	f89a 3000 	ldrb.w	r3, [sl]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f000 80a1 	beq.w	800bae8 <_vfiprintf_r+0x1f0>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9b0:	f10a 0a01 	add.w	sl, sl, #1
 800b9b4:	9304      	str	r3, [sp, #16]
 800b9b6:	9307      	str	r3, [sp, #28]
 800b9b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9bc:	931a      	str	r3, [sp, #104]	; 0x68
 800b9be:	4654      	mov	r4, sl
 800b9c0:	2205      	movs	r2, #5
 800b9c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9c6:	4854      	ldr	r0, [pc, #336]	; (800bb18 <_vfiprintf_r+0x220>)
 800b9c8:	f7f4 fc22 	bl	8000210 <memchr>
 800b9cc:	9a04      	ldr	r2, [sp, #16]
 800b9ce:	b9d8      	cbnz	r0, 800ba08 <_vfiprintf_r+0x110>
 800b9d0:	06d1      	lsls	r1, r2, #27
 800b9d2:	bf44      	itt	mi
 800b9d4:	2320      	movmi	r3, #32
 800b9d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9da:	0713      	lsls	r3, r2, #28
 800b9dc:	bf44      	itt	mi
 800b9de:	232b      	movmi	r3, #43	; 0x2b
 800b9e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9ea:	d015      	beq.n	800ba18 <_vfiprintf_r+0x120>
 800b9ec:	9a07      	ldr	r2, [sp, #28]
 800b9ee:	4654      	mov	r4, sl
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	f04f 0c0a 	mov.w	ip, #10
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9fc:	3b30      	subs	r3, #48	; 0x30
 800b9fe:	2b09      	cmp	r3, #9
 800ba00:	d94d      	bls.n	800ba9e <_vfiprintf_r+0x1a6>
 800ba02:	b1b0      	cbz	r0, 800ba32 <_vfiprintf_r+0x13a>
 800ba04:	9207      	str	r2, [sp, #28]
 800ba06:	e014      	b.n	800ba32 <_vfiprintf_r+0x13a>
 800ba08:	eba0 0308 	sub.w	r3, r0, r8
 800ba0c:	fa09 f303 	lsl.w	r3, r9, r3
 800ba10:	4313      	orrs	r3, r2
 800ba12:	9304      	str	r3, [sp, #16]
 800ba14:	46a2      	mov	sl, r4
 800ba16:	e7d2      	b.n	800b9be <_vfiprintf_r+0xc6>
 800ba18:	9b03      	ldr	r3, [sp, #12]
 800ba1a:	1d19      	adds	r1, r3, #4
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	9103      	str	r1, [sp, #12]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	bfbb      	ittet	lt
 800ba24:	425b      	neglt	r3, r3
 800ba26:	f042 0202 	orrlt.w	r2, r2, #2
 800ba2a:	9307      	strge	r3, [sp, #28]
 800ba2c:	9307      	strlt	r3, [sp, #28]
 800ba2e:	bfb8      	it	lt
 800ba30:	9204      	strlt	r2, [sp, #16]
 800ba32:	7823      	ldrb	r3, [r4, #0]
 800ba34:	2b2e      	cmp	r3, #46	; 0x2e
 800ba36:	d10c      	bne.n	800ba52 <_vfiprintf_r+0x15a>
 800ba38:	7863      	ldrb	r3, [r4, #1]
 800ba3a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba3c:	d134      	bne.n	800baa8 <_vfiprintf_r+0x1b0>
 800ba3e:	9b03      	ldr	r3, [sp, #12]
 800ba40:	1d1a      	adds	r2, r3, #4
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	9203      	str	r2, [sp, #12]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	bfb8      	it	lt
 800ba4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba4e:	3402      	adds	r4, #2
 800ba50:	9305      	str	r3, [sp, #20]
 800ba52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bb28 <_vfiprintf_r+0x230>
 800ba56:	7821      	ldrb	r1, [r4, #0]
 800ba58:	2203      	movs	r2, #3
 800ba5a:	4650      	mov	r0, sl
 800ba5c:	f7f4 fbd8 	bl	8000210 <memchr>
 800ba60:	b138      	cbz	r0, 800ba72 <_vfiprintf_r+0x17a>
 800ba62:	9b04      	ldr	r3, [sp, #16]
 800ba64:	eba0 000a 	sub.w	r0, r0, sl
 800ba68:	2240      	movs	r2, #64	; 0x40
 800ba6a:	4082      	lsls	r2, r0
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	3401      	adds	r4, #1
 800ba70:	9304      	str	r3, [sp, #16]
 800ba72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba76:	4829      	ldr	r0, [pc, #164]	; (800bb1c <_vfiprintf_r+0x224>)
 800ba78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba7c:	2206      	movs	r2, #6
 800ba7e:	f7f4 fbc7 	bl	8000210 <memchr>
 800ba82:	2800      	cmp	r0, #0
 800ba84:	d03f      	beq.n	800bb06 <_vfiprintf_r+0x20e>
 800ba86:	4b26      	ldr	r3, [pc, #152]	; (800bb20 <_vfiprintf_r+0x228>)
 800ba88:	bb1b      	cbnz	r3, 800bad2 <_vfiprintf_r+0x1da>
 800ba8a:	9b03      	ldr	r3, [sp, #12]
 800ba8c:	3307      	adds	r3, #7
 800ba8e:	f023 0307 	bic.w	r3, r3, #7
 800ba92:	3308      	adds	r3, #8
 800ba94:	9303      	str	r3, [sp, #12]
 800ba96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba98:	443b      	add	r3, r7
 800ba9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba9c:	e768      	b.n	800b970 <_vfiprintf_r+0x78>
 800ba9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800baa2:	460c      	mov	r4, r1
 800baa4:	2001      	movs	r0, #1
 800baa6:	e7a6      	b.n	800b9f6 <_vfiprintf_r+0xfe>
 800baa8:	2300      	movs	r3, #0
 800baaa:	3401      	adds	r4, #1
 800baac:	9305      	str	r3, [sp, #20]
 800baae:	4619      	mov	r1, r3
 800bab0:	f04f 0c0a 	mov.w	ip, #10
 800bab4:	4620      	mov	r0, r4
 800bab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baba:	3a30      	subs	r2, #48	; 0x30
 800babc:	2a09      	cmp	r2, #9
 800babe:	d903      	bls.n	800bac8 <_vfiprintf_r+0x1d0>
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d0c6      	beq.n	800ba52 <_vfiprintf_r+0x15a>
 800bac4:	9105      	str	r1, [sp, #20]
 800bac6:	e7c4      	b.n	800ba52 <_vfiprintf_r+0x15a>
 800bac8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bacc:	4604      	mov	r4, r0
 800bace:	2301      	movs	r3, #1
 800bad0:	e7f0      	b.n	800bab4 <_vfiprintf_r+0x1bc>
 800bad2:	ab03      	add	r3, sp, #12
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	462a      	mov	r2, r5
 800bad8:	4b12      	ldr	r3, [pc, #72]	; (800bb24 <_vfiprintf_r+0x22c>)
 800bada:	a904      	add	r1, sp, #16
 800badc:	4630      	mov	r0, r6
 800bade:	f7fd fdaf 	bl	8009640 <_printf_float>
 800bae2:	4607      	mov	r7, r0
 800bae4:	1c78      	adds	r0, r7, #1
 800bae6:	d1d6      	bne.n	800ba96 <_vfiprintf_r+0x19e>
 800bae8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800baea:	07d9      	lsls	r1, r3, #31
 800baec:	d405      	bmi.n	800bafa <_vfiprintf_r+0x202>
 800baee:	89ab      	ldrh	r3, [r5, #12]
 800baf0:	059a      	lsls	r2, r3, #22
 800baf2:	d402      	bmi.n	800bafa <_vfiprintf_r+0x202>
 800baf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baf6:	f7fe fbdc 	bl	800a2b2 <__retarget_lock_release_recursive>
 800bafa:	89ab      	ldrh	r3, [r5, #12]
 800bafc:	065b      	lsls	r3, r3, #25
 800bafe:	f53f af1d 	bmi.w	800b93c <_vfiprintf_r+0x44>
 800bb02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb04:	e71c      	b.n	800b940 <_vfiprintf_r+0x48>
 800bb06:	ab03      	add	r3, sp, #12
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	462a      	mov	r2, r5
 800bb0c:	4b05      	ldr	r3, [pc, #20]	; (800bb24 <_vfiprintf_r+0x22c>)
 800bb0e:	a904      	add	r1, sp, #16
 800bb10:	4630      	mov	r0, r6
 800bb12:	f7fe f839 	bl	8009b88 <_printf_i>
 800bb16:	e7e4      	b.n	800bae2 <_vfiprintf_r+0x1ea>
 800bb18:	0800c6bc 	.word	0x0800c6bc
 800bb1c:	0800c6c6 	.word	0x0800c6c6
 800bb20:	08009641 	.word	0x08009641
 800bb24:	0800b8d3 	.word	0x0800b8d3
 800bb28:	0800c6c2 	.word	0x0800c6c2

0800bb2c <__sflush_r>:
 800bb2c:	898a      	ldrh	r2, [r1, #12]
 800bb2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb32:	4605      	mov	r5, r0
 800bb34:	0710      	lsls	r0, r2, #28
 800bb36:	460c      	mov	r4, r1
 800bb38:	d458      	bmi.n	800bbec <__sflush_r+0xc0>
 800bb3a:	684b      	ldr	r3, [r1, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	dc05      	bgt.n	800bb4c <__sflush_r+0x20>
 800bb40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	dc02      	bgt.n	800bb4c <__sflush_r+0x20>
 800bb46:	2000      	movs	r0, #0
 800bb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb4e:	2e00      	cmp	r6, #0
 800bb50:	d0f9      	beq.n	800bb46 <__sflush_r+0x1a>
 800bb52:	2300      	movs	r3, #0
 800bb54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb58:	682f      	ldr	r7, [r5, #0]
 800bb5a:	6a21      	ldr	r1, [r4, #32]
 800bb5c:	602b      	str	r3, [r5, #0]
 800bb5e:	d032      	beq.n	800bbc6 <__sflush_r+0x9a>
 800bb60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb62:	89a3      	ldrh	r3, [r4, #12]
 800bb64:	075a      	lsls	r2, r3, #29
 800bb66:	d505      	bpl.n	800bb74 <__sflush_r+0x48>
 800bb68:	6863      	ldr	r3, [r4, #4]
 800bb6a:	1ac0      	subs	r0, r0, r3
 800bb6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb6e:	b10b      	cbz	r3, 800bb74 <__sflush_r+0x48>
 800bb70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb72:	1ac0      	subs	r0, r0, r3
 800bb74:	2300      	movs	r3, #0
 800bb76:	4602      	mov	r2, r0
 800bb78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb7a:	6a21      	ldr	r1, [r4, #32]
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	47b0      	blx	r6
 800bb80:	1c43      	adds	r3, r0, #1
 800bb82:	89a3      	ldrh	r3, [r4, #12]
 800bb84:	d106      	bne.n	800bb94 <__sflush_r+0x68>
 800bb86:	6829      	ldr	r1, [r5, #0]
 800bb88:	291d      	cmp	r1, #29
 800bb8a:	d82b      	bhi.n	800bbe4 <__sflush_r+0xb8>
 800bb8c:	4a29      	ldr	r2, [pc, #164]	; (800bc34 <__sflush_r+0x108>)
 800bb8e:	410a      	asrs	r2, r1
 800bb90:	07d6      	lsls	r6, r2, #31
 800bb92:	d427      	bmi.n	800bbe4 <__sflush_r+0xb8>
 800bb94:	2200      	movs	r2, #0
 800bb96:	6062      	str	r2, [r4, #4]
 800bb98:	04d9      	lsls	r1, r3, #19
 800bb9a:	6922      	ldr	r2, [r4, #16]
 800bb9c:	6022      	str	r2, [r4, #0]
 800bb9e:	d504      	bpl.n	800bbaa <__sflush_r+0x7e>
 800bba0:	1c42      	adds	r2, r0, #1
 800bba2:	d101      	bne.n	800bba8 <__sflush_r+0x7c>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	b903      	cbnz	r3, 800bbaa <__sflush_r+0x7e>
 800bba8:	6560      	str	r0, [r4, #84]	; 0x54
 800bbaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbac:	602f      	str	r7, [r5, #0]
 800bbae:	2900      	cmp	r1, #0
 800bbb0:	d0c9      	beq.n	800bb46 <__sflush_r+0x1a>
 800bbb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbb6:	4299      	cmp	r1, r3
 800bbb8:	d002      	beq.n	800bbc0 <__sflush_r+0x94>
 800bbba:	4628      	mov	r0, r5
 800bbbc:	f7ff f9f6 	bl	800afac <_free_r>
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	6360      	str	r0, [r4, #52]	; 0x34
 800bbc4:	e7c0      	b.n	800bb48 <__sflush_r+0x1c>
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	4628      	mov	r0, r5
 800bbca:	47b0      	blx	r6
 800bbcc:	1c41      	adds	r1, r0, #1
 800bbce:	d1c8      	bne.n	800bb62 <__sflush_r+0x36>
 800bbd0:	682b      	ldr	r3, [r5, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d0c5      	beq.n	800bb62 <__sflush_r+0x36>
 800bbd6:	2b1d      	cmp	r3, #29
 800bbd8:	d001      	beq.n	800bbde <__sflush_r+0xb2>
 800bbda:	2b16      	cmp	r3, #22
 800bbdc:	d101      	bne.n	800bbe2 <__sflush_r+0xb6>
 800bbde:	602f      	str	r7, [r5, #0]
 800bbe0:	e7b1      	b.n	800bb46 <__sflush_r+0x1a>
 800bbe2:	89a3      	ldrh	r3, [r4, #12]
 800bbe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbe8:	81a3      	strh	r3, [r4, #12]
 800bbea:	e7ad      	b.n	800bb48 <__sflush_r+0x1c>
 800bbec:	690f      	ldr	r7, [r1, #16]
 800bbee:	2f00      	cmp	r7, #0
 800bbf0:	d0a9      	beq.n	800bb46 <__sflush_r+0x1a>
 800bbf2:	0793      	lsls	r3, r2, #30
 800bbf4:	680e      	ldr	r6, [r1, #0]
 800bbf6:	bf08      	it	eq
 800bbf8:	694b      	ldreq	r3, [r1, #20]
 800bbfa:	600f      	str	r7, [r1, #0]
 800bbfc:	bf18      	it	ne
 800bbfe:	2300      	movne	r3, #0
 800bc00:	eba6 0807 	sub.w	r8, r6, r7
 800bc04:	608b      	str	r3, [r1, #8]
 800bc06:	f1b8 0f00 	cmp.w	r8, #0
 800bc0a:	dd9c      	ble.n	800bb46 <__sflush_r+0x1a>
 800bc0c:	6a21      	ldr	r1, [r4, #32]
 800bc0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc10:	4643      	mov	r3, r8
 800bc12:	463a      	mov	r2, r7
 800bc14:	4628      	mov	r0, r5
 800bc16:	47b0      	blx	r6
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	dc06      	bgt.n	800bc2a <__sflush_r+0xfe>
 800bc1c:	89a3      	ldrh	r3, [r4, #12]
 800bc1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc22:	81a3      	strh	r3, [r4, #12]
 800bc24:	f04f 30ff 	mov.w	r0, #4294967295
 800bc28:	e78e      	b.n	800bb48 <__sflush_r+0x1c>
 800bc2a:	4407      	add	r7, r0
 800bc2c:	eba8 0800 	sub.w	r8, r8, r0
 800bc30:	e7e9      	b.n	800bc06 <__sflush_r+0xda>
 800bc32:	bf00      	nop
 800bc34:	dfbffffe 	.word	0xdfbffffe

0800bc38 <_fflush_r>:
 800bc38:	b538      	push	{r3, r4, r5, lr}
 800bc3a:	690b      	ldr	r3, [r1, #16]
 800bc3c:	4605      	mov	r5, r0
 800bc3e:	460c      	mov	r4, r1
 800bc40:	b913      	cbnz	r3, 800bc48 <_fflush_r+0x10>
 800bc42:	2500      	movs	r5, #0
 800bc44:	4628      	mov	r0, r5
 800bc46:	bd38      	pop	{r3, r4, r5, pc}
 800bc48:	b118      	cbz	r0, 800bc52 <_fflush_r+0x1a>
 800bc4a:	6a03      	ldr	r3, [r0, #32]
 800bc4c:	b90b      	cbnz	r3, 800bc52 <_fflush_r+0x1a>
 800bc4e:	f7fe f937 	bl	8009ec0 <__sinit>
 800bc52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d0f3      	beq.n	800bc42 <_fflush_r+0xa>
 800bc5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc5c:	07d0      	lsls	r0, r2, #31
 800bc5e:	d404      	bmi.n	800bc6a <_fflush_r+0x32>
 800bc60:	0599      	lsls	r1, r3, #22
 800bc62:	d402      	bmi.n	800bc6a <_fflush_r+0x32>
 800bc64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc66:	f7fe fb23 	bl	800a2b0 <__retarget_lock_acquire_recursive>
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	f7ff ff5d 	bl	800bb2c <__sflush_r>
 800bc72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc74:	07da      	lsls	r2, r3, #31
 800bc76:	4605      	mov	r5, r0
 800bc78:	d4e4      	bmi.n	800bc44 <_fflush_r+0xc>
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	059b      	lsls	r3, r3, #22
 800bc7e:	d4e1      	bmi.n	800bc44 <_fflush_r+0xc>
 800bc80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc82:	f7fe fb16 	bl	800a2b2 <__retarget_lock_release_recursive>
 800bc86:	e7dd      	b.n	800bc44 <_fflush_r+0xc>

0800bc88 <__swhatbuf_r>:
 800bc88:	b570      	push	{r4, r5, r6, lr}
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc90:	2900      	cmp	r1, #0
 800bc92:	b096      	sub	sp, #88	; 0x58
 800bc94:	4615      	mov	r5, r2
 800bc96:	461e      	mov	r6, r3
 800bc98:	da0d      	bge.n	800bcb6 <__swhatbuf_r+0x2e>
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bca0:	f04f 0100 	mov.w	r1, #0
 800bca4:	bf0c      	ite	eq
 800bca6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bcaa:	2340      	movne	r3, #64	; 0x40
 800bcac:	2000      	movs	r0, #0
 800bcae:	6031      	str	r1, [r6, #0]
 800bcb0:	602b      	str	r3, [r5, #0]
 800bcb2:	b016      	add	sp, #88	; 0x58
 800bcb4:	bd70      	pop	{r4, r5, r6, pc}
 800bcb6:	466a      	mov	r2, sp
 800bcb8:	f000 f848 	bl	800bd4c <_fstat_r>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	dbec      	blt.n	800bc9a <__swhatbuf_r+0x12>
 800bcc0:	9901      	ldr	r1, [sp, #4]
 800bcc2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bcc6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bcca:	4259      	negs	r1, r3
 800bccc:	4159      	adcs	r1, r3
 800bcce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcd2:	e7eb      	b.n	800bcac <__swhatbuf_r+0x24>

0800bcd4 <__smakebuf_r>:
 800bcd4:	898b      	ldrh	r3, [r1, #12]
 800bcd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcd8:	079d      	lsls	r5, r3, #30
 800bcda:	4606      	mov	r6, r0
 800bcdc:	460c      	mov	r4, r1
 800bcde:	d507      	bpl.n	800bcf0 <__smakebuf_r+0x1c>
 800bce0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	6123      	str	r3, [r4, #16]
 800bce8:	2301      	movs	r3, #1
 800bcea:	6163      	str	r3, [r4, #20]
 800bcec:	b002      	add	sp, #8
 800bcee:	bd70      	pop	{r4, r5, r6, pc}
 800bcf0:	ab01      	add	r3, sp, #4
 800bcf2:	466a      	mov	r2, sp
 800bcf4:	f7ff ffc8 	bl	800bc88 <__swhatbuf_r>
 800bcf8:	9900      	ldr	r1, [sp, #0]
 800bcfa:	4605      	mov	r5, r0
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	f7ff f9c9 	bl	800b094 <_malloc_r>
 800bd02:	b948      	cbnz	r0, 800bd18 <__smakebuf_r+0x44>
 800bd04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd08:	059a      	lsls	r2, r3, #22
 800bd0a:	d4ef      	bmi.n	800bcec <__smakebuf_r+0x18>
 800bd0c:	f023 0303 	bic.w	r3, r3, #3
 800bd10:	f043 0302 	orr.w	r3, r3, #2
 800bd14:	81a3      	strh	r3, [r4, #12]
 800bd16:	e7e3      	b.n	800bce0 <__smakebuf_r+0xc>
 800bd18:	89a3      	ldrh	r3, [r4, #12]
 800bd1a:	6020      	str	r0, [r4, #0]
 800bd1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd20:	81a3      	strh	r3, [r4, #12]
 800bd22:	9b00      	ldr	r3, [sp, #0]
 800bd24:	6163      	str	r3, [r4, #20]
 800bd26:	9b01      	ldr	r3, [sp, #4]
 800bd28:	6120      	str	r0, [r4, #16]
 800bd2a:	b15b      	cbz	r3, 800bd44 <__smakebuf_r+0x70>
 800bd2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd30:	4630      	mov	r0, r6
 800bd32:	f000 f81d 	bl	800bd70 <_isatty_r>
 800bd36:	b128      	cbz	r0, 800bd44 <__smakebuf_r+0x70>
 800bd38:	89a3      	ldrh	r3, [r4, #12]
 800bd3a:	f023 0303 	bic.w	r3, r3, #3
 800bd3e:	f043 0301 	orr.w	r3, r3, #1
 800bd42:	81a3      	strh	r3, [r4, #12]
 800bd44:	89a3      	ldrh	r3, [r4, #12]
 800bd46:	431d      	orrs	r5, r3
 800bd48:	81a5      	strh	r5, [r4, #12]
 800bd4a:	e7cf      	b.n	800bcec <__smakebuf_r+0x18>

0800bd4c <_fstat_r>:
 800bd4c:	b538      	push	{r3, r4, r5, lr}
 800bd4e:	4d07      	ldr	r5, [pc, #28]	; (800bd6c <_fstat_r+0x20>)
 800bd50:	2300      	movs	r3, #0
 800bd52:	4604      	mov	r4, r0
 800bd54:	4608      	mov	r0, r1
 800bd56:	4611      	mov	r1, r2
 800bd58:	602b      	str	r3, [r5, #0]
 800bd5a:	f7f6 fe3e 	bl	80029da <_fstat>
 800bd5e:	1c43      	adds	r3, r0, #1
 800bd60:	d102      	bne.n	800bd68 <_fstat_r+0x1c>
 800bd62:	682b      	ldr	r3, [r5, #0]
 800bd64:	b103      	cbz	r3, 800bd68 <_fstat_r+0x1c>
 800bd66:	6023      	str	r3, [r4, #0]
 800bd68:	bd38      	pop	{r3, r4, r5, pc}
 800bd6a:	bf00      	nop
 800bd6c:	200011b0 	.word	0x200011b0

0800bd70 <_isatty_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	4d06      	ldr	r5, [pc, #24]	; (800bd8c <_isatty_r+0x1c>)
 800bd74:	2300      	movs	r3, #0
 800bd76:	4604      	mov	r4, r0
 800bd78:	4608      	mov	r0, r1
 800bd7a:	602b      	str	r3, [r5, #0]
 800bd7c:	f7f6 fe32 	bl	80029e4 <_isatty>
 800bd80:	1c43      	adds	r3, r0, #1
 800bd82:	d102      	bne.n	800bd8a <_isatty_r+0x1a>
 800bd84:	682b      	ldr	r3, [r5, #0]
 800bd86:	b103      	cbz	r3, 800bd8a <_isatty_r+0x1a>
 800bd88:	6023      	str	r3, [r4, #0]
 800bd8a:	bd38      	pop	{r3, r4, r5, pc}
 800bd8c:	200011b0 	.word	0x200011b0

0800bd90 <_sbrk_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	4d06      	ldr	r5, [pc, #24]	; (800bdac <_sbrk_r+0x1c>)
 800bd94:	2300      	movs	r3, #0
 800bd96:	4604      	mov	r4, r0
 800bd98:	4608      	mov	r0, r1
 800bd9a:	602b      	str	r3, [r5, #0]
 800bd9c:	f7f6 fe26 	bl	80029ec <_sbrk>
 800bda0:	1c43      	adds	r3, r0, #1
 800bda2:	d102      	bne.n	800bdaa <_sbrk_r+0x1a>
 800bda4:	682b      	ldr	r3, [r5, #0]
 800bda6:	b103      	cbz	r3, 800bdaa <_sbrk_r+0x1a>
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	bd38      	pop	{r3, r4, r5, pc}
 800bdac:	200011b0 	.word	0x200011b0

0800bdb0 <memcpy>:
 800bdb0:	440a      	add	r2, r1
 800bdb2:	4291      	cmp	r1, r2
 800bdb4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdb8:	d100      	bne.n	800bdbc <memcpy+0xc>
 800bdba:	4770      	bx	lr
 800bdbc:	b510      	push	{r4, lr}
 800bdbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdc6:	4291      	cmp	r1, r2
 800bdc8:	d1f9      	bne.n	800bdbe <memcpy+0xe>
 800bdca:	bd10      	pop	{r4, pc}

0800bdcc <__assert_func>:
 800bdcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bdce:	4614      	mov	r4, r2
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	4b09      	ldr	r3, [pc, #36]	; (800bdf8 <__assert_func+0x2c>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4605      	mov	r5, r0
 800bdd8:	68d8      	ldr	r0, [r3, #12]
 800bdda:	b14c      	cbz	r4, 800bdf0 <__assert_func+0x24>
 800bddc:	4b07      	ldr	r3, [pc, #28]	; (800bdfc <__assert_func+0x30>)
 800bdde:	9100      	str	r1, [sp, #0]
 800bde0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bde4:	4906      	ldr	r1, [pc, #24]	; (800be00 <__assert_func+0x34>)
 800bde6:	462b      	mov	r3, r5
 800bde8:	f000 f844 	bl	800be74 <fiprintf>
 800bdec:	f000 f854 	bl	800be98 <abort>
 800bdf0:	4b04      	ldr	r3, [pc, #16]	; (800be04 <__assert_func+0x38>)
 800bdf2:	461c      	mov	r4, r3
 800bdf4:	e7f3      	b.n	800bdde <__assert_func+0x12>
 800bdf6:	bf00      	nop
 800bdf8:	2000007c 	.word	0x2000007c
 800bdfc:	0800c6d7 	.word	0x0800c6d7
 800be00:	0800c6e4 	.word	0x0800c6e4
 800be04:	0800bf8b 	.word	0x0800bf8b

0800be08 <_calloc_r>:
 800be08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be0a:	fba1 2402 	umull	r2, r4, r1, r2
 800be0e:	b94c      	cbnz	r4, 800be24 <_calloc_r+0x1c>
 800be10:	4611      	mov	r1, r2
 800be12:	9201      	str	r2, [sp, #4]
 800be14:	f7ff f93e 	bl	800b094 <_malloc_r>
 800be18:	9a01      	ldr	r2, [sp, #4]
 800be1a:	4605      	mov	r5, r0
 800be1c:	b930      	cbnz	r0, 800be2c <_calloc_r+0x24>
 800be1e:	4628      	mov	r0, r5
 800be20:	b003      	add	sp, #12
 800be22:	bd30      	pop	{r4, r5, pc}
 800be24:	220c      	movs	r2, #12
 800be26:	6002      	str	r2, [r0, #0]
 800be28:	2500      	movs	r5, #0
 800be2a:	e7f8      	b.n	800be1e <_calloc_r+0x16>
 800be2c:	4621      	mov	r1, r4
 800be2e:	f7fe f9c3 	bl	800a1b8 <memset>
 800be32:	e7f4      	b.n	800be1e <_calloc_r+0x16>

0800be34 <__ascii_mbtowc>:
 800be34:	b082      	sub	sp, #8
 800be36:	b901      	cbnz	r1, 800be3a <__ascii_mbtowc+0x6>
 800be38:	a901      	add	r1, sp, #4
 800be3a:	b142      	cbz	r2, 800be4e <__ascii_mbtowc+0x1a>
 800be3c:	b14b      	cbz	r3, 800be52 <__ascii_mbtowc+0x1e>
 800be3e:	7813      	ldrb	r3, [r2, #0]
 800be40:	600b      	str	r3, [r1, #0]
 800be42:	7812      	ldrb	r2, [r2, #0]
 800be44:	1e10      	subs	r0, r2, #0
 800be46:	bf18      	it	ne
 800be48:	2001      	movne	r0, #1
 800be4a:	b002      	add	sp, #8
 800be4c:	4770      	bx	lr
 800be4e:	4610      	mov	r0, r2
 800be50:	e7fb      	b.n	800be4a <__ascii_mbtowc+0x16>
 800be52:	f06f 0001 	mvn.w	r0, #1
 800be56:	e7f8      	b.n	800be4a <__ascii_mbtowc+0x16>

0800be58 <__ascii_wctomb>:
 800be58:	b149      	cbz	r1, 800be6e <__ascii_wctomb+0x16>
 800be5a:	2aff      	cmp	r2, #255	; 0xff
 800be5c:	bf85      	ittet	hi
 800be5e:	238a      	movhi	r3, #138	; 0x8a
 800be60:	6003      	strhi	r3, [r0, #0]
 800be62:	700a      	strbls	r2, [r1, #0]
 800be64:	f04f 30ff 	movhi.w	r0, #4294967295
 800be68:	bf98      	it	ls
 800be6a:	2001      	movls	r0, #1
 800be6c:	4770      	bx	lr
 800be6e:	4608      	mov	r0, r1
 800be70:	4770      	bx	lr
	...

0800be74 <fiprintf>:
 800be74:	b40e      	push	{r1, r2, r3}
 800be76:	b503      	push	{r0, r1, lr}
 800be78:	4601      	mov	r1, r0
 800be7a:	ab03      	add	r3, sp, #12
 800be7c:	4805      	ldr	r0, [pc, #20]	; (800be94 <fiprintf+0x20>)
 800be7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be82:	6800      	ldr	r0, [r0, #0]
 800be84:	9301      	str	r3, [sp, #4]
 800be86:	f7ff fd37 	bl	800b8f8 <_vfiprintf_r>
 800be8a:	b002      	add	sp, #8
 800be8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be90:	b003      	add	sp, #12
 800be92:	4770      	bx	lr
 800be94:	2000007c 	.word	0x2000007c

0800be98 <abort>:
 800be98:	b508      	push	{r3, lr}
 800be9a:	2006      	movs	r0, #6
 800be9c:	f000 f82c 	bl	800bef8 <raise>
 800bea0:	2001      	movs	r0, #1
 800bea2:	f7f6 fd83 	bl	80029ac <_exit>

0800bea6 <_raise_r>:
 800bea6:	291f      	cmp	r1, #31
 800bea8:	b538      	push	{r3, r4, r5, lr}
 800beaa:	4604      	mov	r4, r0
 800beac:	460d      	mov	r5, r1
 800beae:	d904      	bls.n	800beba <_raise_r+0x14>
 800beb0:	2316      	movs	r3, #22
 800beb2:	6003      	str	r3, [r0, #0]
 800beb4:	f04f 30ff 	mov.w	r0, #4294967295
 800beb8:	bd38      	pop	{r3, r4, r5, pc}
 800beba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bebc:	b112      	cbz	r2, 800bec4 <_raise_r+0x1e>
 800bebe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bec2:	b94b      	cbnz	r3, 800bed8 <_raise_r+0x32>
 800bec4:	4620      	mov	r0, r4
 800bec6:	f000 f831 	bl	800bf2c <_getpid_r>
 800beca:	462a      	mov	r2, r5
 800becc:	4601      	mov	r1, r0
 800bece:	4620      	mov	r0, r4
 800bed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bed4:	f000 b818 	b.w	800bf08 <_kill_r>
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d00a      	beq.n	800bef2 <_raise_r+0x4c>
 800bedc:	1c59      	adds	r1, r3, #1
 800bede:	d103      	bne.n	800bee8 <_raise_r+0x42>
 800bee0:	2316      	movs	r3, #22
 800bee2:	6003      	str	r3, [r0, #0]
 800bee4:	2001      	movs	r0, #1
 800bee6:	e7e7      	b.n	800beb8 <_raise_r+0x12>
 800bee8:	2400      	movs	r4, #0
 800beea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800beee:	4628      	mov	r0, r5
 800bef0:	4798      	blx	r3
 800bef2:	2000      	movs	r0, #0
 800bef4:	e7e0      	b.n	800beb8 <_raise_r+0x12>
	...

0800bef8 <raise>:
 800bef8:	4b02      	ldr	r3, [pc, #8]	; (800bf04 <raise+0xc>)
 800befa:	4601      	mov	r1, r0
 800befc:	6818      	ldr	r0, [r3, #0]
 800befe:	f7ff bfd2 	b.w	800bea6 <_raise_r>
 800bf02:	bf00      	nop
 800bf04:	2000007c 	.word	0x2000007c

0800bf08 <_kill_r>:
 800bf08:	b538      	push	{r3, r4, r5, lr}
 800bf0a:	4d07      	ldr	r5, [pc, #28]	; (800bf28 <_kill_r+0x20>)
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4604      	mov	r4, r0
 800bf10:	4608      	mov	r0, r1
 800bf12:	4611      	mov	r1, r2
 800bf14:	602b      	str	r3, [r5, #0]
 800bf16:	f7f6 fd41 	bl	800299c <_kill>
 800bf1a:	1c43      	adds	r3, r0, #1
 800bf1c:	d102      	bne.n	800bf24 <_kill_r+0x1c>
 800bf1e:	682b      	ldr	r3, [r5, #0]
 800bf20:	b103      	cbz	r3, 800bf24 <_kill_r+0x1c>
 800bf22:	6023      	str	r3, [r4, #0]
 800bf24:	bd38      	pop	{r3, r4, r5, pc}
 800bf26:	bf00      	nop
 800bf28:	200011b0 	.word	0x200011b0

0800bf2c <_getpid_r>:
 800bf2c:	f7f6 bd34 	b.w	8002998 <_getpid>

0800bf30 <_init>:
 800bf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf32:	bf00      	nop
 800bf34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf36:	bc08      	pop	{r3}
 800bf38:	469e      	mov	lr, r3
 800bf3a:	4770      	bx	lr

0800bf3c <_fini>:
 800bf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf3e:	bf00      	nop
 800bf40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf42:	bc08      	pop	{r3}
 800bf44:	469e      	mov	lr, r3
 800bf46:	4770      	bx	lr
