/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MUSICLISTVIEWBASE_HPP
#define MUSICLISTVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/musiclist_screen/MusicListPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TiledImage.hpp>
#include <touchgfx/containers/scrollers/ScrollList.hpp>
#include <gui/containers/CustomListElement.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/Image.hpp>

class MusicListViewBase : public touchgfx::View<MusicListPresenter>
{
public:
    MusicListViewBase();
    virtual ~MusicListViewBase();
    virtual void setupScreen();

    virtual void musicListUpdateItem(CustomListElement& item, int16_t itemIndex)
    {
        // Override and implement this function in MusicList
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::TiledImage background;
    touchgfx::ScrollList musicList;
    touchgfx::DrawableListItems<CustomListElement, 6> musicListListItems;
    touchgfx::Button Home;
    touchgfx::TextArea playList;
    touchgfx::TextAreaWithOneWildcard selectedVal;
    touchgfx::Image listIcon;
    touchgfx::Button btnPlaying;

    /*
     * Wildcard Buffers
     */
    static const uint16_t SELECTEDVAL_SIZE = 30;
    touchgfx::Unicode::UnicodeChar selectedValBuffer[SELECTEDVAL_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MusicListViewBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;
    touchgfx::Callback<MusicListViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // MUSICLISTVIEWBASE_HPP
