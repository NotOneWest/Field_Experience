/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/musiclist_screen/MusicListViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MusicListViewBase::MusicListViewBase() :
    updateItemCallback(this, &MusicListViewBase::updateItemCallbackHandler),
    buttonCallback(this, &MusicListViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_BACKGROUNDS_480X272_STONE_ID));
    background.setPosition(0, 0, 480, 272);
    background.setOffset(0, 0);
    add(background);

    musicList.setPosition(80, 36, 320, 167);
    musicList.setHorizontal(false);
    musicList.setCircular(false);
    musicList.setEasingEquation(touchgfx::EasingEquations::cubicEaseOut);
    musicList.setSwipeAcceleration(10);
    musicList.setDragAcceleration(10);
    musicList.setNumberOfItems(30);
    musicList.setPadding(0, 0);
    musicList.setSnapping(true);
    musicList.setDrawableSize(40, 0);
    musicList.setDrawables(musicListListItems, updateItemCallback);
    add(musicList);

    Home.setXY(225, 242);
    Home.setBitmaps(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_HOME_30_30_3297C8_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_HOME_30_30_000000_SVG_ID));
    Home.setAction(buttonCallback);
    add(Home);

    playList.setPosition(210, 0, 91, 30);
    playList.setColor(touchgfx::Color::getColorFromRGB(50, 151, 200));
    playList.setLinespacing(0);
    playList.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GDJS));
    add(playList);

    selectedVal.setXY(80, 211);
    selectedVal.setColor(touchgfx::Color::getColorFromRGB(50, 151, 200));
    selectedVal.setLinespacing(0);
    Unicode::snprintf(selectedValBuffer, SELECTEDVAL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_WAGL).getText());
    selectedVal.setWildcard(selectedValBuffer);
    selectedVal.resizeToCurrentText();
    selectedVal.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MVJM));
    add(selectedVal);

    listIcon.setXY(180, 0);
    listIcon.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_AV_PLAYLIST_PLAY_30_30_3297C8_SVG_ID));
    add(listIcon);

    btnPlaying.setXY(370, 208);
    btnPlaying.setBitmaps(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_NEXT_PLAN_30_30_3297C8_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_NEXT_PLAN_30_30_E6007E_SVG_ID));
    btnPlaying.setAction(buttonCallback);
    add(btnPlaying);
}

MusicListViewBase::~MusicListViewBase()
{

}

void MusicListViewBase::setupScreen()
{
    musicList.initialize();
    for (int i = 0; i < musicListListItems.getNumberOfDrawables(); i++)
    {
        musicListListItems[i].initialize();
    }
}

void MusicListViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &Home)
    {
        //Home
        //When Home clicked change screen to Main
        //Go to Main with screen transition towards East
        application().gotoMainScreenSlideTransitionEast();
    }
    if (&src == &btnPlaying)
    {
        //playMusic
        //When btnPlaying clicked change screen to Music
        //Go to Music with screen transition towards East
        application().gotoMusicScreenSlideTransitionEast();
    }
}

void MusicListViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &musicListListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        CustomListElement* cc = (CustomListElement*)d;
        musicListUpdateItem(*cc, itemIndex);
    }
}
